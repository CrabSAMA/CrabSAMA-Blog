import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o,c as e,a as n,b as p,d as c,e as i}from"./app-D1nyDd9a.js";const r="/CrabSAMA-Blog/assets/prototype-CSxYHMFr.png",l={},u=n("p",null,"帮你彻底搞懂JS中的PROTOTYPE、__PROTO__与CONSTRUCTOR（图解）",-1),_={href:"https://blog.csdn.net/cc18868876837/article/details/81211729",target:"_blank",rel:"noopener noreferrer"},m=i(`<ol><li>我们需要牢记两点：①_proto_和_constructor_属性是<strong>对象</strong>所独有的；② _prototype_属性是<strong>函数</strong>所独有的，因为函数也是一种对象，所以函数也拥有_proto_和_constructor_属性。</li><li>_proto_属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的_proto_属性所指向的那个对象（父对象）里找，一直找，直到_proto_属性的终点null，再往上找就相当于在null上取值，会报错。通过_proto_属性将对象连接起来的这条链路即我们所谓的<strong>原型链</strong>。</li><li>_prototype_属性的作用就是让该<strong>函数所实例化的对象</strong>们都可以找到<strong>公用的属性和方法</strong>，即f1.<em>proto</em> === Foo.<em>prototype</em>。</li><li>_constructor_属性的含义就是指向<strong>该对象的构造函数</strong>，所有函数（此时看成对象了）最终的构造函数都指向Function。</li></ol><figure><img src="https://img-blog.csdnimg.cn/20190311194017886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NjMTg4Njg4NzY4Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p style="text-align:center;">原型链解释图</p><hr><h2 id="方便理解的代码" tabindex="-1"><a class="header-anchor" href="#方便理解的代码"><span>方便理解的代码</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> person<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 指向 Function 的 prototype</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>\\_\\_proto\\_\\_<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Person.prototype.\\_\\_proto\\_\\_ 指向 Object.prototype</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>\\_\\_proto\\_\\_<span class="token punctuation">)</span><span class="token punctuation">;</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>\\_\\_proto\\_\\_<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// constructor 从对象指向一个函数 即自身的构造函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p style="text-align:center;">运行结果</p>',8);function d(k,g){const t=a("ExternalLinkIcon");return o(),e("div",null,[n("blockquote",null,[u,n("p",null,[n("a",_,[p("CSDN链接"),c(t)])])]),m])}const y=s(l,[["render",d],["__file","prototype.html.vue"]]),h=JSON.parse('{"path":"/JavaScript/prototype.html","title":"Prototype","lang":"zh-CN","frontmatter":{"title":"Prototype","category":["前端开发"],"tag":["JavaScript"],"description":"帮你彻底搞懂JS中的PROTOTYPE、__PROTO__与CONSTRUCTOR（图解） CSDN链接 我们需要牢记两点：①_proto_和_constructor_属性是对象所独有的；② _prototype_属性是函数所独有的，因为函数也是一种对象，所以函数也拥有_proto_和_constructor_属性。 _proto_属性的作用就是当访问...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/JavaScript/prototype.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"Prototype"}],["meta",{"property":"og:description","content":"帮你彻底搞懂JS中的PROTOTYPE、__PROTO__与CONSTRUCTOR（图解） CSDN链接 我们需要牢记两点：①_proto_和_constructor_属性是对象所独有的；② _prototype_属性是函数所独有的，因为函数也是一种对象，所以函数也拥有_proto_和_constructor_属性。 _proto_属性的作用就是当访问..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img-blog.csdnimg.cn/20190311194017886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NjMTg4Njg4NzY4Mzc=,size_16,color_FFFFFF,t_70#pic_center"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-18T04:29:56.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:modified_time","content":"2023-03-18T04:29:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Prototype\\",\\"image\\":[\\"https://img-blog.csdnimg.cn/20190311194017886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NjMTg4Njg4NzY4Mzc=,size_16,color_FFFFFF,t_70#pic_center\\"],\\"dateModified\\":\\"2023-03-18T04:29:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"方便理解的代码","slug":"方便理解的代码","link":"#方便理解的代码","children":[]}],"git":{"createdTime":1679071923000,"updatedTime":1679113796000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":2}]},"readingTime":{"minutes":1.31,"words":392},"filePathRelative":"JavaScript/prototype.md","localizedDate":"2023年3月17日","excerpt":"<blockquote>\\n<p>帮你彻底搞懂JS中的PROTOTYPE、__PROTO__与CONSTRUCTOR（图解）</p>\\n<p><a href=\\"https://blog.csdn.net/cc18868876837/article/details/81211729\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">CSDN链接</a></p>\\n</blockquote>\\n<ol>\\n<li>我们需要牢记两点：①_proto_和_constructor_属性是<strong>对象</strong>所独有的；② _prototype_属性是<strong>函数</strong>所独有的，因为函数也是一种对象，所以函数也拥有_proto_和_constructor_属性。</li>\\n<li>_proto_属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的_proto_属性所指向的那个对象（父对象）里找，一直找，直到_proto_属性的终点null，再往上找就相当于在null上取值，会报错。通过_proto_属性将对象连接起来的这条链路即我们所谓的<strong>原型链</strong>。</li>\\n<li>_prototype_属性的作用就是让该<strong>函数所实例化的对象</strong>们都可以找到<strong>公用的属性和方法</strong>，即f1.<em>proto</em> === Foo.<em>prototype</em>。</li>\\n<li>_constructor_属性的含义就是指向<strong>该对象的构造函数</strong>，所有函数（此时看成对象了）最终的构造函数都指向Function。</li>\\n</ol>","autoDesc":true}');export{y as comp,h as data};
