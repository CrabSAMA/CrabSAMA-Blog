import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as n,e as s}from"./app-D1nyDd9a.js";const l={},t=s(`<h2 id="babel-7-库的作用域-scope" tabindex="-1"><a class="header-anchor" href="#babel-7-库的作用域-scope"><span>Babel 7 库的作用域 (scope)</span></a></h2><ol><li><p>Babel 7 用了 npm 的 private scope，把全部的包都挂在在 @babel 下，类似的有 typescript 的 @type。</p></li><li><p>Babel 7 提供多种配置</p><p><code>.babelrc</code><br><code>babel.config.js</code><br><code>webpack babel loader</code></p></li></ol><h2 id="升级步骤" tabindex="-1"><a class="header-anchor" href="#升级步骤"><span>升级步骤</span></a></h2><ol><li><p><code>babel-core</code>卸载掉，重新安装 <code>@babel/core</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> uninstall babel-core
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> @babel/core
<span class="token comment"># 调用 babel-upgrade 这个工具将对 package.json 进行一次扫描</span>
<span class="token comment"># 将旧版本的 plugin 自动替换成 babel7 的作用域 plugin</span>
npx babel-upgrade <span class="token parameter variable">--write</span> <span class="token parameter variable">--install</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>.babelrc</code>引入解析</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token comment">// babel7 以上的 plugin 都变成了 @babel 作用域下的包 需要在这里填写以便解析</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;@babel/plugin-proposal-class-properties&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;@babel/plugin-proposal-optional-chaining&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;@babel/plugin-proposal-json-strings&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;@babel/plugin-syntax-dynamic-import&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;@babel/plugin-syntax-import-meta&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 <code>package.json</code> 文件中删除 <code>babel6</code> 相关的依赖</p><p>简单的来说，就是不以 <code>@babel</code> 开头的（除了 babel-loader）都删掉即可，或者看后面版本号写 6.XX.XX 的都删掉。</p></li><li><p>删除文件夹 <code>node_modules</code> 然后重新安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token parameter variable">-rf</span> node_modules
<span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,4),p=[t];function o(c,i){return e(),n("div",null,p)}const d=a(l,[["render",o],["__file","babel6-update-babel7.html.vue"]]),u=JSON.parse('{"path":"/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE/babel6-update-babel7.html","title":"babel6升级到babel7","lang":"zh-CN","frontmatter":{"title":"babel6升级到babel7","date":"2020-12-29T06:58:51.000Z","category":["实际项目","前端开发"],"tag":["babel"],"description":"Babel 7 库的作用域 (scope) Babel 7 用了 npm 的 private scope，把全部的包都挂在在 @babel 下，类似的有 typescript 的 @type。 Babel 7 提供多种配置 .babelrc babel.config.js webpack babel loader 升级步骤 babel-core卸载掉，...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE/babel6-update-babel7.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"babel6升级到babel7"}],["meta",{"property":"og:description","content":"Babel 7 库的作用域 (scope) Babel 7 用了 npm 的 private scope，把全部的包都挂在在 @babel 下，类似的有 typescript 的 @type。 Babel 7 提供多种配置 .babelrc babel.config.js webpack babel loader 升级步骤 babel-core卸载掉，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-18T04:29:56.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"babel"}],["meta",{"property":"article:published_time","content":"2020-12-29T06:58:51.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-18T04:29:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"babel6升级到babel7\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-12-29T06:58:51.000Z\\",\\"dateModified\\":\\"2023-03-18T04:29:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"Babel 7 库的作用域 (scope)","slug":"babel-7-库的作用域-scope","link":"#babel-7-库的作用域-scope","children":[]},{"level":2,"title":"升级步骤","slug":"升级步骤","link":"#升级步骤","children":[]}],"git":{"createdTime":1679071923000,"updatedTime":1679113796000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":2}]},"readingTime":{"minutes":0.87,"words":262},"filePathRelative":"实际项目/babel6-update-babel7.md","localizedDate":"2020年12月29日","excerpt":"<h2>Babel 7 库的作用域 (scope)</h2>\\n<ol>\\n<li>\\n<p>Babel 7 用了 npm 的 private scope，把全部的包都挂在在 @babel 下，类似的有 typescript 的 @type。</p>\\n</li>\\n<li>\\n<p>Babel 7 提供多种配置</p>\\n<p><code>.babelrc</code><br>\\n<code>babel.config.js</code><br>\\n<code>webpack babel loader</code></p>\\n</li>\\n</ol>\\n<h2>升级步骤</h2>\\n<ol>\\n<li>\\n<p><code>babel-core</code>卸载掉，重新安装 <code>@babel/core</code></p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">npm</span> uninstall babel-core\\n<span class=\\"token function\\">npm</span> <span class=\\"token function\\">install</span> <span class=\\"token parameter variable\\">-D</span> @babel/core\\n<span class=\\"token comment\\"># 调用 babel-upgrade 这个工具将对 package.json 进行一次扫描</span>\\n<span class=\\"token comment\\"># 将旧版本的 plugin 自动替换成 babel7 的作用域 plugin</span>\\nnpx babel-upgrade <span class=\\"token parameter variable\\">--write</span> <span class=\\"token parameter variable\\">--install</span> \\n</code></pre></div></li>\\n<li>\\n<p><code>.babelrc</code>引入解析</p>\\n<div class=\\"language-json\\" data-ext=\\"json\\" data-title=\\"json\\"><pre class=\\"language-json\\"><code><span class=\\"token comment\\">// babel7 以上的 plugin 都变成了 @babel 作用域下的包 需要在这里填写以便解析</span>\\n<span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">\\"plugins\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n    <span class=\\"token string\\">\\"@babel/plugin-proposal-class-properties\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token string\\">\\"@babel/plugin-proposal-optional-chaining\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token string\\">\\"@babel/plugin-proposal-json-strings\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token string\\">\\"@babel/plugin-syntax-dynamic-import\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token string\\">\\"@babel/plugin-syntax-import-meta\\"</span>\\n  <span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></li>\\n<li>\\n<p>在 <code>package.json</code> 文件中删除 <code>babel6</code> 相关的依赖</p>\\n<p>简单的来说，就是不以 <code>@babel</code> 开头的（除了 babel-loader）都删掉即可，或者看后面版本号写 6.XX.XX 的都删掉。</p>\\n</li>\\n<li>\\n<p>删除文件夹 <code>node_modules</code> 然后重新安装</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">rm</span> <span class=\\"token parameter variable\\">-rf</span> node_modules\\n<span class=\\"token function\\">npm</span> <span class=\\"token function\\">install</span>\\n</code></pre></div></li>\\n</ol>","autoDesc":true}');export{d as comp,u as data};
