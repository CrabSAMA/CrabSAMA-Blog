import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as s,i as t}from"./app-CkQAPpyV.js";const o="/CrabSAMA-Blog/assets/image-20220627103856499-BpUn-xDx.png",a={},n=t('<p><strong>从资源请求完成到页面的显示：</strong></p><ol><li>解析<code>HTML</code>字符串构建<code>DOM</code>树</li><li>解析<code>CSS</code>样式，产生<code>CSSOM</code>树</li><li>执行<code>js</code>脚本文件，<code>js</code>加载完成，通过<code>DOM API</code> 和 <code>CSSOM API</code> 来操作<code>DOM</code>树和<code>CSSOM</code>树</li><li>浏览器根据<code>DOM</code>树和<code>CSSOM</code>树构建渲染树（rendering tree），渲染树包括显示的节点和节点显示的样式信息，如果某个节点设置了样式 <code>display: none</code>，那么就不会在渲染树中显示，如果设置<code>visibility:hidden</code>渲染树中存在该节点，但不显示。</li><li>根据渲染树对每一个节点在页面上进行布局。（<code>reflow</code>）</li><li>遍历渲染树，为每一个节点绘制对应的样式，显示到屏幕。(<code>repaint</code>)</li></ol><figure><img src="'+o+`" alt="image-20220627103856499" tabindex="0" loading="lazy"><figcaption>image-20220627103856499</figcaption></figure><p>白屏和<code>FOUC</code>主要是由于不同浏览器在加载资源时产生的不同问题。</p><p><strong><code>FOUC</code>（无样式内容闪烁）</strong></p><p><code>FOUC</code>是浏览器在加载资源时，加载多少渲染多少，直至完全加载成并计算渲染成功为止。<br><strong>白屏</strong></p><p>白屏是浏览器未加载完全部资源时，<strong>选择等待全部资源加载完成</strong>之后再进行计算和渲染的等待加载过程。</p><p><strong>关于<code>CSS</code>和<code>JS</code>的放置顺序：</strong></p><ul><li><strong>使用<code>link</code>标签将样式表放在顶部</strong>，是为了让<code>css</code>优先加载，防止页面上其他元素（图片，音频，视频等）的加载影响<code>css</code>的加载，同时<code>css</code>也会影响这些元素的加载（例如：浏览器的队列时间等）</li><li><strong>将<code>js</code>文件放在底部</strong><ol><li>脚本会阻塞后面内容的呈现（需要等待脚本加载完成之后页面内的元素才会被呈现）</li><li>脚本会阻塞后面组件的下载（主要是影响图片和其他音频视频等资源的加载）</li><li>脚本用于操作页面上的元素，放在顶部时，元素仍未加载，未出现在文档流中容易出现报错。</li><li>脚本加载完成之后立即执行，如若碰到执行时间比较长，大量计算，循环甚至死循环时会影响后面资源的加载。</li><li>当我们使用一个<strong>决定页面上所有元素的呈现的框架</strong>时，可以将其放<strong>置于顶部</strong>，因为该框架不加载好、未执行，页面都是一片空白或是以混乱的样式呈现。</li></ol></li><li>对于<strong>图片和和<code>css</code></strong>，在<strong>加载时会并发加载</strong>（如一个域名下同时加载两个文件）。但是加载<code>JavaScript</code>时，会禁用并发，并且阻止其他内容的下载，所以将<code>JavaScript</code>放在页面顶部也会导致白屏现象。</li></ul><p><strong>加载异步</strong></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;script.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> async</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;script.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> defer</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;script.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>没有<code>defer</code>或<code>async</code>，浏览器会立即加载并执行<strong>指定的脚本。“立即”指的是在渲染该<code>script</code>标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。</strong></li><li>有<code>async</code>，加载后续文档元素的过程和<strong>js的加载与执行</strong>并行进行（异步）。</li><li>有<code>defer</code>，加载后续文档的过程和<code>js</code>的<strong>加载</strong>并行进行（异步），但<code>js</code>的<strong>执行</strong>要在所有元素解析完成之后，<code>DOMContentLoaded</code>事件触发之前完成。</li></ul>`,12),d=[n];function c(r,l){return s(),i("div",null,d)}const g=e(a,[["render",c],["__file","browser-loading-mechanism-and-fouc.html.vue"]]),k=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/browser-loading-mechanism-and-fouc.html","title":"浏览器的加载机制与白屏现象","lang":"zh-CN","frontmatter":{"title":"浏览器的加载机制与白屏现象","date":"2020-08-19T08:07:44.000Z","category":["学习笔记"],"tag":["浏览器","性能优化"],"description":"从资源请求完成到页面的显示： 解析HTML字符串构建DOM树 解析CSS样式，产生CSSOM树 执行js脚本文件，js加载完成，通过DOM API 和 CSSOM API 来操作DOM树和CSSOM树 浏览器根据DOM树和CSSOM树构建渲染树（rendering tree），渲染树包括显示的节点和节点显示的样式信息，如果某个节点设置了样式 displ...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/browser-loading-mechanism-and-fouc.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"浏览器的加载机制与白屏现象"}],["meta",{"property":"og:description","content":"从资源请求完成到页面的显示： 解析HTML字符串构建DOM树 解析CSS样式，产生CSSOM树 执行js脚本文件，js加载完成，通过DOM API 和 CSSOM API 来操作DOM树和CSSOM树 浏览器根据DOM树和CSSOM树构建渲染树（rendering tree），渲染树包括显示的节点和节点显示的样式信息，如果某个节点设置了样式 displ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-05T09:14:26.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"浏览器"}],["meta",{"property":"article:tag","content":"性能优化"}],["meta",{"property":"article:published_time","content":"2020-08-19T08:07:44.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-05T09:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器的加载机制与白屏现象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-08-19T08:07:44.000Z\\",\\"dateModified\\":\\"2024-08-05T09:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[],"git":{"createdTime":1656301166000,"updatedTime":1722849266000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":3}]},"readingTime":{"minutes":2.94,"words":882},"filePathRelative":"学习笔记/browser-loading-mechanism-and-fouc.md","localizedDate":"2020年8月19日","excerpt":"<p><strong>从资源请求完成到页面的显示：</strong></p>\\n<ol>\\n<li>解析<code>HTML</code>字符串构建<code>DOM</code>树</li>\\n<li>解析<code>CSS</code>样式，产生<code>CSSOM</code>树</li>\\n<li>执行<code>js</code>脚本文件，<code>js</code>加载完成，通过<code>DOM API</code> 和 <code>CSSOM API</code> 来操作<code>DOM</code>树和<code>CSSOM</code>树</li>\\n<li>浏览器根据<code>DOM</code>树和<code>CSSOM</code>树构建渲染树（rendering tree），渲染树包括显示的节点和节点显示的样式信息，如果某个节点设置了样式 <code>display: none</code>，那么就不会在渲染树中显示，如果设置<code>visibility:hidden</code>渲染树中存在该节点，但不显示。</li>\\n<li>根据渲染树对每一个节点在页面上进行布局。（<code>reflow</code>）</li>\\n<li>遍历渲染树，为每一个节点绘制对应的样式，显示到屏幕。(<code>repaint</code>)</li>\\n</ol>","autoDesc":true}');export{g as comp,k as data};
