import{_ as e,c as i,i as l,o as n}from"./app-B0UMYhNd.js";const o={};function r(a,t){return n(),i("div",null,t[0]||(t[0]=[l("<ol><li><p>确立需求</p></li><li><p>第一次迭代（基本功能）<br> 快速迭代是一种不错的开发方式，在第一次迭代时先实现服务器的基本功能</p><ol><li>分析需求，得出设计方案</li><li>根据设计方案，进行代码实现</li><li>测试，分析问题，为下一次迭代寻找需求</li></ol></li><li><p>第二次迭代（性能）<br> 在第一次迭代之后，已经拥有了一个简单的、可工作的版本，满足了功能需求。一般第二次迭代需要从性能的角度出发，看看有什么改进余地。</p><ol><li>分析需求，得出设计方案</li><li>根据设计方案，进行代码实现</li></ol></li><li><p>第三次迭代（稳定性）<br> 第二次迭代之后，服务器本身的功能和性能已经得到了初步满足。接下来我们要从稳定性的角度重新审视一下代码，看看还需要做些什么。</p></li><li><p>第四次迭代（代码部署，项目结构）<br> 在解决了服务器本身的功能、性能和可靠性问题后，最后要考虑的是代码部署的问题，以及服务器控制的问题</p><ol><li>设计程序部署目录</li><li>构建项目结构</li><li>编写控制脚本</li></ol></li><li><p>后续迭代<br> 在服务器程序正式上线后，将会从可改进的点出发，将上述问题放大审视，并逐步完善需求与修复 bug</p></li></ol><hr><ul><li><strong>要先设计再实现。</strong><br> 在开发一个程序前首先要有一个全局的设计，不一定要很周全，但要足够能写出一些代码。</li><li><strong>要实现后再设计。</strong><br> 在写了一些代码，有了一些具体的东西后，一定会发现一些之前忽略掉的细节。这时再反过来改进之前的设计，为第二轮迭代做准备。</li></ul>",3)]))}const c=e(o,[["render",r]]),m=JSON.parse('{"path":"/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/iteration-example.html","title":"迭代示例","lang":"zh-CN","frontmatter":{"title":"迭代示例","date":"2020-07-10T03:44:23.000Z","category":["项目总结"],"tag":["Node.js","开发规范"],"description":"确立需求 第一次迭代（基本功能） 快速迭代是一种不错的开发方式，在第一次迭代时先实现服务器的基本功能 分析需求，得出设计方案 根据设计方案，进行代码实现 测试，分析问题，为下一次迭代寻找需求 第二次迭代（性能） 在第一次迭代之后，已经拥有了一个简单的、可工作的版本，满足了功能需求。一般第二次迭代需要从性能的角度出发，看看有什么改进余地。 分析需求，得出...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"迭代示例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-07-10T03:44:23.000Z\\",\\"dateModified\\":\\"2024-09-29T07:33:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"],["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/iteration-example.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"迭代示例"}],["meta",{"property":"og:description","content":"确立需求 第一次迭代（基本功能） 快速迭代是一种不错的开发方式，在第一次迭代时先实现服务器的基本功能 分析需求，得出设计方案 根据设计方案，进行代码实现 测试，分析问题，为下一次迭代寻找需求 第二次迭代（性能） 在第一次迭代之后，已经拥有了一个简单的、可工作的版本，满足了功能需求。一般第二次迭代需要从性能的角度出发，看看有什么改进余地。 分析需求，得出..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-29T07:33:27.000Z"}],["meta",{"property":"article:tag","content":"开发规范"}],["meta",{"property":"article:tag","content":"Node.js"}],["meta",{"property":"article:published_time","content":"2020-07-10T03:44:23.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-29T07:33:27.000Z"}]]},"git":{"createdTime":1655211700000,"updatedTime":1727595207000,"contributors":[{"name":"CrabSAMA","username":"CrabSAMA","email":"71915282@qq.com","commits":8,"url":"https://github.com/CrabSAMA"}]},"readingTime":{"minutes":1.67,"words":501},"filePathRelative":"项目总结/iteration-example.md","excerpt":"<ol>\\n<li>\\n<p>确立需求</p>\\n</li>\\n<li>\\n<p>第一次迭代（基本功能）<br>\\n快速迭代是一种不错的开发方式，在第一次迭代时先实现服务器的基本功能</p>\\n<ol>\\n<li>分析需求，得出设计方案</li>\\n<li>根据设计方案，进行代码实现</li>\\n<li>测试，分析问题，为下一次迭代寻找需求</li>\\n</ol>\\n</li>\\n<li>\\n<p>第二次迭代（性能）<br>\\n在第一次迭代之后，已经拥有了一个简单的、可工作的版本，满足了功能需求。一般第二次迭代需要从性能的角度出发，看看有什么改进余地。</p>\\n<ol>\\n<li>分析需求，得出设计方案</li>\\n<li>根据设计方案，进行代码实现</li>\\n</ol>\\n</li>\\n<li>\\n<p>第三次迭代（稳定性）<br>\\n第二次迭代之后，服务器本身的功能和性能已经得到了初步满足。接下来我们要从稳定性的角度重新审视一下代码，看看还需要做些什么。</p>\\n</li>\\n<li>\\n<p>第四次迭代（代码部署，项目结构）<br>\\n在解决了服务器本身的功能、性能和可靠性问题后，最后要考虑的是代码部署的问题，以及服务器控制的问题</p>\\n<ol>\\n<li>设计程序部署目录</li>\\n<li>构建项目结构</li>\\n<li>编写控制脚本</li>\\n</ol>\\n</li>\\n<li>\\n<p>后续迭代<br>\\n在服务器程序正式上线后，将会从可改进的点出发，将上述问题放大审视，并逐步完善需求与修复 bug</p>\\n</li>\\n</ol>","autoDesc":true}');export{c as comp,m as data};
