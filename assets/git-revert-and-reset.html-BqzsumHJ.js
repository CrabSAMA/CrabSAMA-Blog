import{_ as e,c as r,i as o,o as i}from"./app-B0UMYhNd.js";const a={};function c(d,t){return i(),r("div",null,t[0]||(t[0]=[o('<p>在平时使用 git 时，我们时常会遇到代码需要回退的情况，一般我们使用 git 作为代码管理的工具，我们有两种方法来回退代码：</p><ul><li><code>git reset</code></li><li><code>git revert</code></li></ul><p>两者的区别是，git revert 是提交一个新的版本来回退，将需要 revert 的版本内容再反向修改回去，会创建一个新的版本，不会影响之前提交的内容；而 git reset 是直接将 HEAD 向后移动了一下，直接回退到之前的版本，如果代码已经推到远端仓库，就无法再直接同步代码了。</p><p>我们时常需要 undo last commit，使用到的命令是：<code>git reset --soft HEAD~</code></p><hr><h2 id="已推送到远端且-git-reset-回退遇到的问题" tabindex="-1"><a class="header-anchor" href="#已推送到远端且-git-reset-回退遇到的问题"><span>已推送到远端且 git reset 回退遇到的问题</span></a></h2><p>举个例子，我们有 <code>A - B - C</code> 这样的 commit 记录，且代码已经 push 到远端。</p><p>此时需求发生变动，C 这个 commit 记录我们不需要了，需要分支回退到 B 这次 commit，我们会调用 <code>git reset --hard B</code> 去做，此刻 commit 记录就是 <code>A - B</code>，接着我们会使用 <code>git push --force</code> 去将代码<strong>强推</strong>到远端，因为远端代码比本地代码新，因此要使用强推。</p><p>此时另一台机器的本地仓库是已经拉取到 C 的状态，此时 head 指向 C。执行 <code>git pull</code> 的时候，会将 head 指向 B，但<strong>代码并不会回到 B，仍是 C 的代码</strong>，并且会提示 <code>Already up to date</code>，因为 git 看来目前的代码就是最新的。</p><p>我们这个时候需要手动执行 <code>git reset --hard B</code>，将<strong>代码回滚到 B</strong>，这样就完成了一次完整的回滚。</p><p>上面这个情况是发生在单人开发的项目中。这种方法在多人协作的场景是不推荐的，多人协作的情况下要尽可能避免使用 <code>reset</code> 和 <code>--force</code> 这种行为，尽可能使用 <code>revert</code> 命令来执行回退，确保后续代码变更<strong>可溯源</strong>。</p>',11)]))}const p=e(a,[["render",c]]),s=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/git-revert-and-reset.html","title":"Git 回退","lang":"zh-CN","frontmatter":{"title":"Git 回退","date":"2025-06-06T12:34:00.000Z","category":["学习笔记"],"tag":["Git"],"description":"在平时使用 git 时，我们时常会遇到代码需要回退的情况，一般我们使用 git 作为代码管理的工具，我们有两种方法来回退代码： git reset git revert 两者的区别是，git revert 是提交一个新的版本来回退，将需要 revert 的版本内容再反向修改回去，会创建一个新的版本，不会影响之前提交的内容；而 git reset 是直接...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git 回退\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-06T12:34:00.000Z\\",\\"dateModified\\":\\"2025-06-06T12:44:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"],["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/git-revert-and-reset.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"Git 回退"}],["meta",{"property":"og:description","content":"在平时使用 git 时，我们时常会遇到代码需要回退的情况，一般我们使用 git 作为代码管理的工具，我们有两种方法来回退代码： git reset git revert 两者的区别是，git revert 是提交一个新的版本来回退，将需要 revert 的版本内容再反向修改回去，会创建一个新的版本，不会影响之前提交的内容；而 git reset 是直接..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T12:44:30.000Z"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:published_time","content":"2025-06-06T12:34:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T12:44:30.000Z"}]]},"git":{"createdTime":1749213870000,"updatedTime":1749213870000,"contributors":[{"name":"CrabSAMA","username":"CrabSAMA","email":"71915282@qq.com","commits":1,"url":"https://github.com/CrabSAMA"}]},"readingTime":{"minutes":1.76,"words":527},"filePathRelative":"学习笔记/git-revert-and-reset.md","excerpt":"<p>在平时使用 git 时，我们时常会遇到代码需要回退的情况，一般我们使用 git 作为代码管理的工具，我们有两种方法来回退代码：</p>\\n<ul>\\n<li><code>git reset</code></li>\\n<li><code>git revert</code></li>\\n</ul>\\n<p>两者的区别是，git revert 是提交一个新的版本来回退，将需要 revert 的版本内容再反向修改回去，会创建一个新的版本，不会影响之前提交的内容；而 git reset 是直接将 HEAD 向后移动了一下，直接回退到之前的版本，如果代码已经推到远端仓库，就无法再直接同步代码了。</p>\\n<p>我们时常需要 undo last commit，使用到的命令是：<code>git reset --soft HEAD~</code></p>","autoDesc":true}');export{p as comp,s as data};
