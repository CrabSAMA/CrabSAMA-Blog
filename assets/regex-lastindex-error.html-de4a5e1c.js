import{_ as o,X as c,Y as l,Z as n,$ as e,a1 as a,a2 as t,C as p}from"./framework-43a12551.js";const r={},i=t(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 用于匹配是否被 i18n 块包裹</span>
<span class="token keyword">const</span> i18nKeyPattern <span class="token operator">=</span>
  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:i18n(?:-\\w+)?[ (\\n]\\s*(?:key)?path=|v-t=[&#39;&quot;\`{]|(?:this\\.|\\$|i18n\\.|[^\\w\\d])(?:t|tc|te)\\()\\s*[&#39;&quot;\`](.*?)[&#39;&quot;\`]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;$t(&#39;当有效期结束时间到了，是否直接下线？&#39;)&quot;</span>

<span class="token comment">// Array(2) [&quot;$t(&#39;当有效期结束时间到了，是否直接下线？&#39;&quot;, &quot;当有效期结束时间到了，是否直接下线？&quot;]</span>
i18nKeyPattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token comment">// null</span>
i18nKeyPattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

<span class="token comment">// true</span>
i18nKeyPattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token comment">// false</span>
i18nKeyPattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用正则表达式判断时，会发现调用 <code>exec</code> 方法和 <code>test</code> 方法，每一次的调用结果并不一样。</p><h2 id="原因" tabindex="-1"><a class="header-anchor" href="#原因" aria-hidden="true">#</a> 原因</h2><p>在 MDN 文档上，我们可以看到一个点：</p>`,5),d=n("p",null,[n("code",null,"exec()"),e("：")],-1),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"global",-1),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"sticky",-1),b=n("code",null,"/foo/g",-1),m=n("code",null,"/foo/y",-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"RegExp",-1),f=n("em",null,"有状态",-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"lastIndex",-1),z=n("code",null,"exec()",-1),E=n("p",null,[n("code",null,"test()"),e("：")],-1),N={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"test()",-1),S={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"lastIndex",-1),I=n("code",null,"test()",-1),J={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"exec()",-1),q=n("code",null,"lastIndex 属性值",-1),G=t(`<p>关键点其实在于，如果使用正则表达式时设置了全局标识，同时复用<strong>同一个正则表达式对象</strong>对多个字符串进行匹配时，就会出现这个问题。关键点在于 <code>lastIndex</code> 属性其实是正则表达式对象里面的一个属性。</p><h2 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> 解决方法</h2><ol><li><p>使用 <code>String.prototype.match()</code> 或 <code>String.prototype.matchAll()</code> 方法代替</p></li><li><p>重写一个方法，在每次匹配完成后手动地将 <code>lastIndex</code> 属性重置为 0</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 正则无记忆方法</span>
RegExp<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">TestNoRecord</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">return</span> ret
<span class="token punctuation">}</span>
RegExp<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">ExecNoRecord</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">return</span> ret
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,3);function O(W,K){const s=p("ExternalLinkIcon");return c(),l("div",null,[i,n("blockquote",null,[d,n("p",null,[n("a",u,[e("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec"),a(s)])]),n("p",null,[e("在设置了 "),n("a",k,[v,a(s)]),e(" 或 "),n("a",h,[_,a(s)]),e(" 标志位的情况下（如 "),b,e(" 或 "),m,e("），JavaScript "),n("a",g,[x,a(s)]),e(" 对象是"),f,e("的。它们会将上次成功匹配后的位置记录在 "),n("a",y,[R,a(s)]),e(" 属性中。使用此特性，"),z,e(" 可用来对单个字符串中的多次匹配结果进行逐条的遍历（包括捕获到的匹配）")]),E,n("p",null,[n("a",N,[e("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test"),a(s)])]),n("p",null,[e("如果正则表达式设置了全局标志，"),w,e(" 的执行会改变正则表达式 "),n("a",S,[C,a(s)]),e("属性。连续的执行"),I,e("方法，后续的执行将会从 lastIndex 处开始匹配字符串，("),n("a",J,[j,a(s)]),e(" 同样改变正则本身的 "),q,e(").")])]),G])}const V=o(r,[["render",O],["__file","regex-lastindex-error.html.vue"]]);export{V as default};
