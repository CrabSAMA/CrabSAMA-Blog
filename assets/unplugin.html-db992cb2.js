const e=JSON.parse('{"key":"v-2932bebb","path":"/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/unplugin.html","title":"聊聊unplugin","lang":"zh-CN","frontmatter":{"title":"聊聊unplugin","date":"2022-08-03T02:38:40.000Z","lastUpdated":true,"category":["前端工程化"],"description":"先上一个 github 地址 https://github.com/unjs/unplugin 前言 前端工具链生态是日新月异，很多人 webpack 都还没玩熟悉呢，新的 vite 都要出到 3.0 了，再说 vite 是基于 rollup 和 esbuild 的吧，这些个工具都各有优劣，都是要学习的东西。但在我看来，这些工具都有一个共同的特点：都是打包工具。打包工具需要做的事情就很简单，接收输入的文件，输出成我们想要的东西，这其中还包含了可以通过不同的插件实现对输入文件的处理，以实现混淆、注入等功能；同时打包工具大多都提供了许多钩子（hook），贯穿整个打包流程，也方便了我们对打包过程的关注和额外处理。百变不离其宗，webpack 有 loader 和 plugin，vite 扩展了设计出色的 Rollup 接口，还带了一些 vite 独特的配置项，因此有人就有了写一次代码，适配多个 bundler 的想法，unplugin 就是这样一个存在。","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/unplugin.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"聊聊unplugin"}],["meta",{"property":"og:description","content":"先上一个 github 地址 https://github.com/unjs/unplugin 前言 前端工具链生态是日新月异，很多人 webpack 都还没玩熟悉呢，新的 vite 都要出到 3.0 了，再说 vite 是基于 rollup 和 esbuild 的吧，这些个工具都各有优劣，都是要学习的东西。但在我看来，这些工具都有一个共同的特点：都是打包工具。打包工具需要做的事情就很简单，接收输入的文件，输出成我们想要的东西，这其中还包含了可以通过不同的插件实现对输入文件的处理，以实现混淆、注入等功能；同时打包工具大多都提供了许多钩子（hook），贯穿整个打包流程，也方便了我们对打包过程的关注和额外处理。百变不离其宗，webpack 有 loader 和 plugin，vite 扩展了设计出色的 Rollup 接口，还带了一些 vite 独特的配置项，因此有人就有了写一次代码，适配多个 bundler 的想法，unplugin 就是这样一个存在。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-17T16:52:03.000Z"}],["meta",{"property":"article:published_time","content":"2022-08-03T02:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-17T16:52:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"聊聊unplugin\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-03T02:38:40.000Z\\",\\"dateModified\\":\\"2023-03-17T16:52:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"unplugin","slug":"unplugin","link":"#unplugin","children":[]},{"level":2,"title":"具体实现","slug":"具体实现","link":"#具体实现","children":[]}],"git":{"createdTime":1679071923000,"updatedTime":1679071923000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":1}]},"readingTime":{"minutes":2.5,"words":749},"filePathRelative":"前端工程化/unplugin.md","localizedDate":"2022年8月3日","excerpt":"<blockquote>\\n<p>先上一个 github 地址 <a href=\\"https://github.com/unjs/unplugin\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/unjs/unplugin</a></p>\\n</blockquote>\\n<h2> 前言</h2>\\n<p>前端工具链生态是日新月异，很多人 <code>webpack</code> 都还没玩熟悉呢，新的 <code>vite</code> 都要出到 3.0 了，再说 <code>vite</code> 是基于 <code>rollup</code> 和 <code>esbuild</code> 的吧，这些个工具都各有优劣，都是要学习的东西。但在我看来，这些工具都有一个共同的特点：都是<strong>打包工具</strong>。打包工具需要做的事情就很简单，接收输入的文件，输出成我们想要的东西，这其中还包含了可以通过不同的插件实现对输入文件的处理，以实现混淆、注入等功能；同时打包工具大多都提供了许多<strong>钩子</strong>（<code>hook</code>），贯穿整个打包流程，也方便了我们对打包过程的关注和额外处理。百变不离其宗，<code>webpack</code> 有 <code>loader</code> 和 <code>plugin</code>，<code>vite</code> 扩展了设计出色的 <code>Rollup</code> 接口，还带了一些 <code>vite</code> 独特的配置项，因此有人就有了写一次代码，适配多个 <code>bundler</code> 的想法，<code>unplugin</code> 就是这样一个存在。</p>","autoDesc":true}');export{e as data};
