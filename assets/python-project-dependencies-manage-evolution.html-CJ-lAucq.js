import{_ as t,c as o,i as p,o as n}from"./app-B0UMYhNd.js";const i={};function r(c,e){return n(),o("div",null,e[0]||(e[0]=[p("<p>python 项目依赖管理结构发展：</p><ul><li><p>pip 安装依赖，但安装在全局，容易出现依赖版本冲突的问题</p></li><li><p>venv 为每个项目搭建一套自己的虚拟环境，使得 pip 能安装到每个项目中，但是使用前需要先激活虚拟环境</p></li><li><p>依赖列表使用 <code>pip freeze &gt; requirements.txt</code> 生成，但默认会将所有相关依赖都列出来，删除一个依赖就只会删除一个依赖，不会将其相关的依赖也删除，其他的就变成了孤儿依赖</p></li><li><p>引入 <code>pyproject.toml</code> 来管理依赖，将依赖放置在 <code>dependencies</code> 中，使用 <code>pip install -e .</code> 来安装依赖，就会自动处理好所有的间接依赖了</p></li><li><p>手动去编辑 <code>pyproject.toml</code> 太麻烦了，就催生了 <code>uv</code> <code>poetry</code> 这样的项目管理工具，本质上是对 pip venv 等的高级封装（但我看到 uv 是新的实现，完全使用了 rust 重写），提供了用户友好的高级接口方便地进行操作</p></li></ul><hr><p>这种流程对于我一个前端开发来说，因为 npm 就是这样去做的，我感觉依赖管理本应就是这样，没想到 python 相对来说比较落后，我记得在大学的时候搞 python 还是使用 requirements 来管理依赖，也还没有接触虚拟环境这个概念，也是最近去搞 AI 相关的工程化项目才陆续接触到，证明了这种项目的依赖管理方式目前来说还是比较成熟的，node 的 npm、rust 的 cargo 都是这样的架构。</p>",4)]))}const l=t(i,[["render",r]]),d=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python-project-dependencies-manage-evolution.html","title":"Python 项目依赖管理结构发展","lang":"zh-CN","frontmatter":{"title":"Python 项目依赖管理结构发展","date":"2025-08-12T08:39:03.000Z","category":["学习笔记"],"tag":["Python"],"description":"python 项目依赖管理结构发展： pip 安装依赖，但安装在全局，容易出现依赖版本冲突的问题 venv 为每个项目搭建一套自己的虚拟环境，使得 pip 能安装到每个项目中，但是使用前需要先激活虚拟环境 依赖列表使用 pip freeze > requirements.txt 生成，但默认会将所有相关依赖都列出来，删除一个依赖就只会删除一个依赖，不会...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 项目依赖管理结构发展\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-12T08:39:03.000Z\\",\\"dateModified\\":\\"2025-08-12T08:48:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"],["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python-project-dependencies-manage-evolution.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"Python 项目依赖管理结构发展"}],["meta",{"property":"og:description","content":"python 项目依赖管理结构发展： pip 安装依赖，但安装在全局，容易出现依赖版本冲突的问题 venv 为每个项目搭建一套自己的虚拟环境，使得 pip 能安装到每个项目中，但是使用前需要先激活虚拟环境 依赖列表使用 pip freeze > requirements.txt 生成，但默认会将所有相关依赖都列出来，删除一个依赖就只会删除一个依赖，不会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-12T08:48:15.000Z"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:published_time","content":"2025-08-12T08:39:03.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-12T08:48:15.000Z"}]]},"git":{"createdTime":1754988495000,"updatedTime":1754988495000,"contributors":[{"name":"CrabSAMA","username":"CrabSAMA","email":"71915282@qq.com","commits":1,"url":"https://github.com/CrabSAMA"}]},"readingTime":{"minutes":1.44,"words":431},"filePathRelative":"学习笔记/python-project-dependencies-manage-evolution.md","excerpt":"<p>python 项目依赖管理结构发展：</p>\\n<ul>\\n<li>\\n<p>pip 安装依赖，但安装在全局，容易出现依赖版本冲突的问题</p>\\n</li>\\n<li>\\n<p>venv 为每个项目搭建一套自己的虚拟环境，使得 pip 能安装到每个项目中，但是使用前需要先激活虚拟环境</p>\\n</li>\\n<li>\\n<p>依赖列表使用 <code>pip freeze &gt; requirements.txt</code> 生成，但默认会将所有相关依赖都列出来，删除一个依赖就只会删除一个依赖，不会将其相关的依赖也删除，其他的就变成了孤儿依赖</p>\\n</li>\\n<li>\\n<p>引入 <code>pyproject.toml</code> 来管理依赖，将依赖放置在 <code>dependencies</code> 中，使用 <code>pip install -e .</code> 来安装依赖，就会自动处理好所有的间接依赖了</p>\\n</li>\\n<li>\\n<p>手动去编辑 <code>pyproject.toml</code> 太麻烦了，就催生了 <code>uv</code> <code>poetry</code> 这样的项目管理工具，本质上是对 pip venv 等的高级封装（但我看到 uv 是新的实现，完全使用了 rust 重写），提供了用户友好的高级接口方便地进行操作</p>\\n</li>\\n</ul>","autoDesc":true}');export{l as comp,d as data};
