import{_ as a,c as i,i as t,o as r}from"./app-B0UMYhNd.js";const p="/CrabSAMA-Blog/assets/image-20250717200957758-B_dDaKMh.png",o="/CrabSAMA-Blog/assets/image-20250717201130193-BEj4PkCm.png",n="/CrabSAMA-Blog/assets/image-20250717201342456-CDu4H43P.png",s="/CrabSAMA-Blog/assets/image-20250717201501583-BShCOTxQ.png",g="/CrabSAMA-Blog/assets/image-20250717201842765-BrMCc0UL.png",l="/CrabSAMA-Blog/assets/image-20250718103621542-Do6VRskr.png",c="/CrabSAMA-Blog/assets/image-20250718103650463-DuyCA7SP.png",m="/CrabSAMA-Blog/assets/image-20250718103833153-DMsn9C_g.png",u="/CrabSAMA-Blog/assets/image-20250718110531369-8MnG9pBe.png",f="/CrabSAMA-Blog/assets/image-20250718110646581-Cz-xST3g.png",d="/CrabSAMA-Blog/assets/image-20250718110748847-CbTDBkTU.png",h="/CrabSAMA-Blog/assets/image-20250718112842580-C8oFmh63.png",b="/CrabSAMA-Blog/assets/image-20250718141003544-Blh14MyD.png",v="/CrabSAMA-Blog/assets/image-20250712134753740-CEvzsBfr.jpg",A="/CrabSAMA-Blog/assets/image-20250712135158210-NxpWMsyY.jpg",_="/CrabSAMA-Blog/assets/image-20250712135254155-BzJD5jj7.jpg",V="/CrabSAMA-Blog/assets/image-20250712135318921-DsHurrBZ.jpg",S="/CrabSAMA-Blog/assets/image-20250712135518470-Bn8cQP4e.jpg",y="/CrabSAMA-Blog/assets/image-20250724101357906-3jA3r7W9.png",C="/CrabSAMA-Blog/assets/image-20250724101413558-DR1_QBzi.png",x="/CrabSAMA-Blog/assets/image-20250724101509999-CjpIrPJw.png",B="/CrabSAMA-Blog/assets/image-20250724101558880-_ZPxxuAD.png",M="/CrabSAMA-Blog/assets/image-20250724101725213-DE-ShQMm.png",k="/CrabSAMA-Blog/assets/image-20250724145418652-DsxNenni.png",w="/CrabSAMA-Blog/assets/image-20250724145540559-Bm5ZzxPw.png",z="/CrabSAMA-Blog/assets/image-20250724150107397-DOEhL5tk.png",D="/CrabSAMA-Blog/assets/image-20250724150306928-C3nm40Bd.png",T="/CrabSAMA-Blog/assets/image-20250724150437136-B5-NXl6q.png",j="/CrabSAMA-Blog/assets/image-20250724152201501-CJUl4FKT.png",I="/CrabSAMA-Blog/assets/image-20250724152732833-7i6ZUliG.png",J="/CrabSAMA-Blog/assets/image-20250724153746423-DXK8h4Kl.png",E="/CrabSAMA-Blog/assets/image-20250724154802844-BI7J5Owt.png",P="/CrabSAMA-Blog/assets/image-20250724155434872-DfybSU6P.png",O="/CrabSAMA-Blog/assets/image-20250724155615153-BfUSkp9O.png",L="/CrabSAMA-Blog/assets/image-20250724155627333-BDubUUYc.png",Q="/CrabSAMA-Blog/assets/image-20250724155813406-Nt6Lfy9b.png",q="/CrabSAMA-Blog/assets/image-20250724160324941-Bast2Qkv.png",F="/CrabSAMA-Blog/assets/image-20250724160343774-cZr6aZFK.png",Y="/CrabSAMA-Blog/assets/image-20250724160458117-CeKIpLIV.png",Z={};function U(R,e){return r(),i("div",null,e[0]||(e[0]=[t('<h1 id="vueconf-25" tabindex="-1"><a class="header-anchor" href="#vueconf-25"><span>VueConf 25</span></a></h1><h2 id="vue-vite-5-星" tabindex="-1"><a class="header-anchor" href="#vue-vite-5-星"><span>Vue &amp; Vite 5 星</span></a></h2><p>Evan You：<a href="https://mp.weixin.qq.com/s/S0DYFfwvMIGsQJpe3JsrrQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/S0DYFfwvMIGsQJpe3JsrrQ</a></p><p><a href="https://github.com/VueConf/2025" target="_blank" rel="noopener noreferrer">https://github.com/VueConf/2025</a></p><h3 id="vue" tabindex="-1"><a class="header-anchor" href="#vue"><span>Vue</span></a></h3><p>前面分享了 Vue 和 Vue 3 的增长趋势。</p><p>Vue language tools 3.0 IDE 稳定性提升</p><p>重点是 Vue 3.6 alpha 发布，提供了全新的 Vapor mode。后面会有同学专门说到 Vapor mode 这一块，这里暂时不展开。</p><p>Vapor mode 将响应式系统又重构了一遍，借助了 Alien Signals，在当时达到了性能排名的第一位。</p><p>除了 react 以外都应用上了 signal 响应式的开发模式，这块估计后续也会是主流，甚至 ES 规范也有提这块的 API。</p><p>Vapor mode 是一个为了<strong>极致性能</strong>而存在的全新的编译和渲染模式</p><p>行为一样，不一样的是 sfc -&gt; render 编译输出，支持<strong>细粒度的启用</strong></p><figure><img src="'+p+'" alt="image-20250717200957758" tabindex="0" loading="lazy"><figcaption>image-20250717200957758</figcaption></figure><p>3.6 可以通过 <code>&lt;script setup vapor&gt;</code> 在组件级别启用</p><h3 id="vite" tabindex="-1"><a class="header-anchor" href="#vite"><span>Vite</span></a></h3><p>Framework with Vite plugin</p><p>现在有很多框架都是通过 Vite plugin 的形式去实现的</p><figure><img src="'+o+'" alt="image-20250717201130193" tabindex="0" loading="lazy"><figcaption>image-20250717201130193</figcaption></figure><p>JavaScript 庞大的生态下有太多选择，这也是一个幸福的烦恼，带来的问题就是十分混乱。</p><p>JavaScript 语言已经发展壮大，带来了丰富的选择，随着最佳时间的沉淀，evan 觉得一体化工具链的时机已经到来。</p><p>evan 喜欢做统一的事情，简化用户的使用成本，也喜欢把东西都包起来，这也算他为什么要做这个事情</p><figure><img src="'+n+'" alt="image-20250717201342456" tabindex="0" loading="lazy"><figcaption>image-20250717201342456</figcaption></figure><p>rolldown 目前核心打包功能可用，整合 Oxc 用于 parse 和 transform，支持更高级的功能，兼容性对齐 esbuild 和 rollup，rolldown 将很多 rollup 的插件功能作为内置，目前可以通过 overrides 的形式去尝试 rolldown-vite 了。</p><p>TODO 可以尝试去用 rolldown vite 了</p><p>如果之前用的 plugin 多的时候，切换到 rolldown 性能会提升不少。</p><figure><img src="'+s+'" alt="image-20250717201501583" tabindex="0" loading="lazy"><figcaption>image-20250717201501583</figcaption></figure><p>有些大厂还是会使用 webpack 或者 rspack，因为他们用了一些高阶功能，比如高级分包等，现在 rolldown 也逐渐开始支持这些高级分包。</p><p>疑问：CJS 也支持 tree shaking？</p><p>针对大型项目，Vite 也在 WIP Full Bundle Mode，针对这种情况可以优化 dev 下页面的 load 性能。因为大型项目的内容会很多，提前打包等于是用空间换取了冷启动的时间，是有收益的。</p><p>Oxlint 发布了 1.0，针对中大型项目，就是使用 eslint 要挺久的，切换到 Oxlint 有可能会有提升。（但最近看群友的反馈，普通情况下还是用 Eslint 效率会高一点，这块就后续继续观望一下）</p><p>Rust 写的基建工具会面临一个问题，它们支持使用 JavaScript 去写插件，但是这就涉及到了两个语言之间的通信。很多时候一跑 JS 插件，rust 性能就差，中间有传输的开销。</p><p>因此团队尝试开发了一个 Raw AST transfer 的黑科技，可以优化两个语言之间的传输开销。</p><p>同时团队开发的 tsdown 是 tsup 的继承者，基于 Rolldown 实现，是一个高阶的包打包工具。</p><figure><img src="'+g+'" alt="image-20250717201842765" tabindex="0" loading="lazy"><figcaption>image-20250717201842765</figcaption></figure><p>cargo 在 rust 开发的时候，不只是一个包管理器，还能有很多开发时候使用的工具，Vite 想做的就是 JavaScript 届的 cargo。这个愿景我个人是愿意观望的，因为做成这个事情之后，前端整体的技术选型会变得更加统一，降低了技术选型时的压力，同时在更高阶的场景下我们也可以选择对应的工具去进行具体情况的解题。</p><p>在用 AI 的时候，工具链的分散也会有挑战，你需要通过 prompt 或者 rule 去告诉 AI 什么情况要用什么工具，Vite+ 也出于这个目的，给 AI 提供了一个既定的 scope，让 AI 在这里面具体的场景都有具体的工具可用，而不需要去尝试学习文档，减少出问题的情况。</p><p>当时想提问的问题，但是没问上：</p><p>Vite 成功是因为什么？我算比较早使用 Vite 的一批人，甚至还没有中文文档，当时只是觉得很快，没想到发展这么迅速。</p><h2 id="patak" tabindex="-1"><a class="header-anchor" href="#patak"><span>Patak</span></a></h2><p><a href="https://vueconf-cn-25-patak.vercel.app" target="_blank" rel="noopener noreferrer">https://vueconf-cn-25-patak.vercel.app</a></p><p>一个外国人进行的分享，聊了 Vite 5 年的发展历程。</p><h2 id="tsslint-3-星" tabindex="-1"><a class="header-anchor" href="#tsslint-3-星"><span>TSSLint 3 星</span></a></h2><p>Johnson Chu：</p><p>IDE 保存时会遇到右下角请求 code action 时卡顿的问题，这个问题我也经常遇到，但是我的解决方法是点一下 skip 跳过，或者 reload window 重载一下 vscode，没有想过这是一个大问题。</p><p>大佬和我的区别就是他能发现到这个问题，并尝试去解决。这个主题就是聊怎么解决这个卡顿的问题。</p><p><strong>根本原因</strong></p><ul><li>TypeScript 扩展与 ESLint 扩展各自维护独立语言服务实例，导致重复解析和诊断</li><li>传统流程：文件保存 → TS 诊断 → Linter 诊断 → 双重开销。</li></ul><figure><img src="'+l+'" alt="image-20250718103621542" tabindex="0" loading="lazy"><figcaption>image-20250718103621542</figcaption></figure><figure><img src="'+c+'" alt="image-20250718103650463" tabindex="0" loading="lazy"><figcaption>image-20250718103650463</figcaption></figure><figure><img src="'+m+'" alt="image-20250718103833153" tabindex="0" loading="lazy"><figcaption>image-20250718103833153</figcaption></figure><p><strong>解决方案：TypeScript Language Service Plugin</strong></p><p><strong>1. 核心机制</strong></p><ul><li><strong>共享语言服务实例</strong>：</li><li>插件能力： <ul><li>修改 Language Service API 结果（如诊断/代码操作）</li><li>暴露 Language Service 实例</li><li>控制文件类型识别（如 Vue 文件）</li></ul></li></ul><p><strong>2. 技术实现</strong></p><ul><li><strong>统一诊断流程</strong>：</li><li>Linter 直接复用 TypeScript AST，避免重复解析。</li></ul><p>大佬的技术能力自然是没话说，后面许多主题的分享都有 thanks for johnson 的环节，但是可能是因为大佬比较 I 一点，个人感觉分享观感有点差，估计分享能力这块不是大佬的强项，不过这也可能是我的问题哈哈哈。</p><h2 id="vue-vine-4-星" tabindex="-1"><a class="header-anchor" href="#vue-vine-4-星"><span>Vue Vine 4 星</span></a></h2><p>沈青川: <a href="https://vue-vine-ppt-2025.vercel.app/1" target="_blank" rel="noopener noreferrer">https://vue-vine-ppt-2025.vercel.app/1</a></p><p>Vue Vine 是一种类似 JSX 的 Vue 组件写法，用函数 + 模版字符串函数的方式来声明 Vue 组件。</p><figure><img src="'+u+'" alt="image-20250718110531369" tabindex="0" loading="lazy"><figcaption>image-20250718110531369</figcaption></figure><p>在聊的过程中提到了 tsgo，即 ts7。我们平时用的是 ts5，用 go 重写的 typescript 发布后就叫 ts7。</p><p>为什么在 Vue 中结合 typescript 使用的时候，需要 defineProps，因为 Vue 编译时是需要知道有哪些是 props 有哪些是 attribute，Evan 写了一个小型的 tsc，基于 AST 解析的方案去发现类型定义中的 props，所以会有一些奇怪的现象，这块是不完备的。</p><figure><img src="'+f+'" alt="image-20250718110646581" tabindex="0" loading="lazy"><figcaption>image-20250718110646581</figcaption></figure><figure><img src="'+d+'" alt="image-20250718110748847" tabindex="0" loading="lazy"><figcaption>image-20250718110748847</figcaption></figure><p>使用 <code>ts-morph</code> 去获取 TS 编译器进程，自然就可以获取到完整的类型环境上下文，同时也就能获取到正确、完整的 props 属性名。</p><p>上面是针对编译环节，编译器是独立运行，所以需要外挂 <code>ts-morph</code>。</p><p>而针对 VSCode 插件提示支持这一块，由于 VSCode 本身就有 tsserver 进程，因此语言服务插件不需要 <code>ts-morph</code>。不需要归不需要，但是我们要想办法去跟 tsserver 进行通信，才能拿到它里面我们想要的东西。</p><figure><img src="'+h+'" alt="image-20250718112842580" tabindex="0" loading="lazy"><figcaption>image-20250718112842580</figcaption></figure><p>用了一点骚操作，通过在 ts server plugin 去提供一个 websocket 服务器，ts server 中有自己的上下文，通过 websocket 提供 rpc 调用，给外部获取到 tsserver 相关的上下文。</p><p>然后 language server 通过去连接这个 websocket，实现 language server 与 tsserver 的打通。</p><h2 id="vue-vapor-5-星" tabindex="-1"><a class="header-anchor" href="#vue-vapor-5-星"><span>Vue Vapor 5！星</span></a></h2><p>小音: <a href="https://rizumu-slides-2025-07-12.netlify.app/1" target="_blank" rel="noopener noreferrer">https://rizumu-slides-2025-07-12.netlify.app/1</a></p><p>Vue Vapor 是一个没有虚拟 DOM 的模式。</p><p>原生 JavaScript 操作 DOM 是性能表现最好的，但需要很多的技巧和繁复的操作，这就是框架存在的价值。框架帮我们省去了很多工作，能快速进行开发。</p><p>然后自然就会想到，如果我们将原生 JavaScript 的那些技巧尝试用在框架开发中，使用原生 JavaScript 进行开发，同时保留响应式，不使用虚拟 DOM，是不是就能有十分优秀的性能？</p><p>总的来说，上面这段就是 Vue Vapor 最开始的想法。</p><figure><img src="'+b+'" alt="image-20250718141003544" tabindex="0" loading="lazy"><figcaption>image-20250718141003544</figcaption></figure><p>上面是基础的架构，可以通过这篇文章去了解 Vapor：<a href="https://github.com/ubugeeei/reading-vuejs-core-vapor" target="_blank" rel="noopener noreferrer">https://github.com/ubugeeei/reading-vuejs-core-vapor</a></p><h3 id="开源历程" tabindex="-1"><a class="header-anchor" href="#开源历程"><span>开源历程</span></a></h3><p>开源历程可以参考，尝试关注 X 上大牛的情况</p><p>大型的项目需要更多的时间和更强的能力，新手可以尝试去从边缘库开始贡献，可以先从修改文档、提交测试用例开始，逐步去完善了解整个库，当了解得差不多，就可以从一些熟悉的功能开始贡献，提交一些修复，再到新功能，再到新 idea 的贡献。</p><p><strong>兴趣是最好的老师</strong></p><p>不需要给自己太大压力，开源就是可以用自己喜欢的时间和舒适的方式去 coding。</p><h2 id="无极低代码-前面原来是广告-后面干活-4-星" tabindex="-1"><a class="header-anchor" href="#无极低代码-前面原来是广告-后面干活-4-星"><span>无极低代码 前面原来是广告，后面干活 4 星</span></a></h2><p>吕洋：<a href="https://aiready-bundler-n-editor-repl.netlify.app/" target="_blank" rel="noopener noreferrer">https://aiready-bundler-n-editor-repl.netlify.app/</a></p><p>目前看无极低代码平台这种成熟的平台也避免不了写代码的问题，避免不了它们的解题思路是用 AI 去辅助代码小白去写代码，即用自然语言区产出代码。</p><p>缺点：解决不了大模型的幻觉问题</p><p>解法：从工程化的手段实现自动纠一些错，结合 typescript 的类型检查去保证完善性</p><figure><img src="'+v+'" alt="image-20250712134753740" tabindex="0" loading="lazy"><figcaption>image-20250712134753740</figcaption></figure><p>复杂的需求难以一次完成，需要进行需求拆分和职责划分，细粒度地针对每一个场景进行单块开发。</p><p>AI 不擅长做特别复杂的任务，prompt 会很长，也容易出现理解错误，因此任务拆分是很重要的一个环节。</p><figure><img src="'+A+'" alt="image-20250712135158210" tabindex="0" loading="lazy"><figcaption>image-20250712135158210</figcaption></figure><p>代码运行错误时，AI 如何修复？解法无非就是运行起来，收集错误，然后让 AI 再次纠错。最近做 AI 项目做下来发现，涉及到 AI 出 code 的情况，一般都需要一个纠错的过程来保证结果正确。</p><figure><img src="'+_+'" alt="image-20250712135254155" tabindex="0" loading="lazy"><figcaption>image-20250712135254155</figcaption></figure><figure><img src="'+V+'" alt="image-20250712135318921" tabindex="0" loading="lazy"><figcaption>image-20250712135318921</figcaption></figure><figure><img src="'+S+'" alt="image-20250712135518470" tabindex="0" loading="lazy"><figcaption>image-20250712135518470</figcaption></figure><p>对话中能插入自动生成+构建的组件，构建是怎么解决的呢？</p><p>问题就出来了：针对快速验证 idea 的场景，我们需要在浏览器快速运行 html。</p><p>解法有：</p><ul><li><p>直接使用静态 HTML 运行，结合 cdn 使用 babel、unocss、vue 等框架，但问题就是使用 vue 的 cdn，就没办法享受 <code>&lt;script setup&gt;</code> 这种语法了。</p></li><li><p>使用带构建能力的有 stackblitz 和 CodeSandbox，还有 Vue Repl 和 TypeScript Playground 等，最近在尝试 rolldown，这种原生打包的工具也能编译为 wasm 提供给浏览器环境去使用。</p></li></ul><p>小白想要的是直接聊完就把项目起好，因此我们需要规定与搭建一个浏览器可用的标准环境和流程。</p><figure><img src="'+y+'" alt="image-20250724101357906" tabindex="0" loading="lazy"><figcaption>image-20250724101357906</figcaption></figure><figure><img src="'+C+'" alt="image-20250724101413558" tabindex="0" loading="lazy"><figcaption>image-20250724101413558</figcaption></figure><p>rolldown 支持 wasm，可以将 rolldown 放到 wasm 中进行使用，可以直接编译代码</p><p>总结下来其实就是 browser compile code 的问题要如何解。</p><figure><img src="'+x+'" alt="image-20250724101509999" tabindex="0" loading="lazy"><figcaption>image-20250724101509999</figcaption></figure><p>TODO browser 的 file system 是怎么解决的？</p><figure><img src="'+B+'" alt="image-20250724101558880" tabindex="0" loading="lazy"><figcaption>image-20250724101558880</figcaption></figure><p>这是一个结合 AI 较完整的一个架构图，可以看到在浏览器侧编写并编译代码涉及了许多方面，同时有 AI 可介入的点，这个在以后的工作中如果有需要可以参考这个架构去尝试搭建与实现。</p><figure><img src="'+M+'" alt="image-20250724101725213" tabindex="0" loading="lazy"><figcaption>image-20250724101725213</figcaption></figure><p>总体来说，browser coding 有很多方向可以展开，想象的空间很多，是一个值得研究的问题。</p><h2 id="vue-jsx-vapor-4-星" tabindex="-1"><a class="header-anchor" href="#vue-jsx-vapor-4-星"><span>Vue JSX Vapor 4 星</span></a></h2><p>高飞: <a href="https://ppt.zmjs.dev/1" target="_blank" rel="noopener noreferrer">https://ppt.zmjs.dev/1</a></p><figure><img src="'+k+'" alt="image-20250724145418652" tabindex="0" loading="lazy"><figcaption>image-20250724145418652</figcaption></figure><p>Vue JSX Vapor 提供了更多新的特性，同时支持了 Vapor 模式。</p><figure><img src="'+w+'" alt="image-20250724145540559" tabindex="0" loading="lazy"><figcaption>image-20250724145540559</figcaption></figure><p>开发 vapor 模式过程中，JSX 的 map 表达式的性能不太理想</p><p>在后面 jsx vapor 2.0，支持了所有的指令</p><p>JSX vapor 支持 interop 模式，可以令 Vapor 组件和虚拟 DOM 组件一起使用</p><p>限制：</p><ul><li>解构的 prop 会失去响应式，解决方法是直接传入 ref 对象</li><li>rest 参数（...）的 attrs 也会失去响应式，和上面是差不多的问题</li></ul><p>解法：使用 vue-macros，用一些 hack 的方法去实现</p><p>本质上其实是引入了一些虚拟代码，会通过宏的方式来对代码进行一个转换，将原本不支持的语法转变成支持的写法。</p><h2 id="alien-signal-vue-reactivy-system-演进-4-星" tabindex="-1"><a class="header-anchor" href="#alien-signal-vue-reactivy-system-演进-4-星"><span>alien signal Vue reactivy system 演进 4 星</span></a></h2><p>Docter Wu：<a href="https://talks.doctorwu.me/conf_vue2025" target="_blank" rel="noopener noreferrer">https://talks.doctorwu.me/conf_vue2025</a></p><p>TODO 这一块还是挺有意思的，后面可以看看分享的 PPT</p><p>响应式系统经常会接触的问题就是<strong>毛刺问题</strong>。可以结合钻石依赖解构来理解什么是毛刺问题。</p><figure><img src="'+z+'" alt="image-20250724150107397" tabindex="0" loading="lazy"><figcaption>image-20250724150107397</figcaption></figure><p>Vue 响应式系统中会通过 schedule 去管理 effect，因此不应该出现的中间响应式状态即不会出现。</p><p>dirty 值检查</p><p>染色算法</p><p>push-pull-based propagation 结合推和拉的传播算法。当值变化时，先发送轻量级的通知，然后消息者根据通知请求拉取信息</p><figure><img src="'+D+'" alt="image-20250724150306928" tabindex="0" loading="lazy"><figcaption>image-20250724150306928</figcaption></figure><p>↑ alien signal 的通知响应机制</p><h2 id="ui-视图与请求状态-4-星" tabindex="-1"><a class="header-anchor" href="#ui-视图与请求状态-4-星"><span>UI 视图与请求状态 4 星</span></a></h2><p>Eduardo：<a href="https://esm.is/2025-pinia-colada-talk-zh" target="_blank" rel="noopener noreferrer">https://esm.is/2025-pinia-colada-talk-zh</a></p><p>提出一个问题：请求过程中如何让 UI 视图变更，提升用户体验？</p><p>减少等待时间几要素：</p><ul><li>异步操作更快</li><li>更早地开始执行</li><li>让它们 <strong>感觉</strong> 起来更快</li></ul><h3 id="pinia-colada" tabindex="-1"><a class="header-anchor" href="#pinia-colada"><span>Pinia colada</span></a></h3><figure><img src="'+T+'" alt="image-20250724150437136" tabindex="0" loading="lazy"><figcaption>image-20250724150437136</figcaption></figure><p>是不是类似 react query 或者 swc 的请求框架，pinia 是请求数据的载体？</p><p>没错，下课之后和大佬沟通了解下，这个框架和 pinia 有关系的地方，就是它使用了 pinia 作为数据存放的载体。</p><p>响应时间：</p><ul><li>&lt;= 100ms：几乎是一瞬间</li><li>&lt;= 1s：用户操作不易被打断</li><li>&gt;= 10s ：会感到上下文切换，用户会去做其他的事情</li></ul><p>举个例子，以飞机拿托运行李为例，早点放你下来等 7 分钟，体验比不上让你在飞机上面等 5 分钟，然后你下来等 2 分钟拿到行李的体验好。</p><p>稍稍延迟 spinner，就会让用户有更良好的体验。</p><p>预测未来：</p><ul><li>预请求</li><li>乐观更新（先去改变本地数据，然后再去发起请求，让用户体验会好很多。但需要注意的是，乐观更新适用于数据准确性没那么高的需求中，如果有高准确性的需求不建议使用乐观更新）</li></ul><figure><img src="'+j+'" alt="image-20250724152201501" tabindex="0" loading="lazy"><figcaption>image-20250724152201501</figcaption></figure><h2 id="tsdown-库打包工具-5-星" tabindex="-1"><a class="header-anchor" href="#tsdown-库打包工具-5-星"><span>tsdown 库打包工具 5 星</span></a></h2><p>三咲智子：<a href="https://talks.sxzz.dev/2025-07-vueconf/1" target="_blank" rel="noopener noreferrer">https://talks.sxzz.dev/2025-07-vueconf/1</a></p><p>库打包工具的痛点：</p><ul><li>配置繁琐</li><li>类型声明难搞，要输出合适的类型声明</li><li>多格式易出错</li><li>性能瓶颈</li></ul><p>tsdown 定位就是为现代库开发而生，tsdown 基于 rolldown 实现。</p><p><a href="https://tsdown.dev/" target="_blank" rel="noopener noreferrer">https://tsdown.dev/</a></p><figure><img src="'+I+'" alt="image-20250724152732833" tabindex="0" loading="lazy"><figcaption>image-20250724152732833</figcaption></figure><p>tsdown 可以支持打包那种即运行在 nodejs，也运行在 browser 上面的库，和 Vite 不太一样，Vite 打包库模式预设默认是 nodejs 库。</p><p>tsdown 还提供了许多开箱即用的功能，比如：</p><ul><li>支持自动生成 package.json 的 exports 字段，开发时可以指向源码，发布时自动切换。</li><li>支持自动导入或打包以来，默认将 <code>dependencies</code>/<code>peerDependencies</code> 外部化，不打包到产物中</li></ul><p>目前看 tsdown 官方中，tsdown 已经是 Rolldown Vite lib mode 后续的核心基座。目前我也尝试在使用 Rolldown Vite 的 lib mode 进行打包，现在看是直接使用的 rolldown 进行打包，后面应该会切换成 tsdown。</p><figure><img src="'+J+'" alt="image-20250724153746423" tabindex="0" loading="lazy"><figcaption>image-20250724153746423</figcaption></figure><h2 id="vue-language-tools-4-星" tabindex="-1"><a class="header-anchor" href="#vue-language-tools-4-星"><span>Vue Language Tools 4 星</span></a></h2><p>山吹色御守：<a href="https://bikari-vueconf-2025.netlify.app" target="_blank" rel="noopener noreferrer">https://bikari-vueconf-2025.netlify.app</a></p><p>在开始之前，我们可以了解下 Vue Language Tools 是什么。我听课的时候，默认这个东西就是我们平时 VSCode 中使用的 Vue official 插件，也就是 Language Server 相关的东西。在回去研究了一下后发现，其实 Vue Language 是一个 package，Vue official 是其中的一个包，这下面还有其他的内容：</p><ul><li><a href="https://github.com/vuejs/language-tools/tree/master/extensions/vscode" target="_blank" rel="noopener noreferrer">Vue (Official)</a><br><em>Vue, Vitepress, petite-vue language support extension for VSCode</em></li><li><a href="https://github.com/vuejs/language-tools/tree/master/packages/tsc" target="_blank" rel="noopener noreferrer">vue-tsc</a><br><em>Type-check and dts build command line tool</em></li><li><a href="https://github.com/vuejs/language-tools/tree/master/packages/component-meta" target="_blank" rel="noopener noreferrer">vue-component-meta</a><br><em>Component props, events, slots types information extract tool</em></li><li><a href="https://github.com/vuejs/language-tools/blob/master/packages/language-server" target="_blank" rel="noopener noreferrer"><code>@vue/language-server</code></a><br><em>The language server itself</em>.</li><li><a href="https://github.com/vuejs/language-tools/blob/master/packages/typescript-plugin" target="_blank" rel="noopener noreferrer"><code>@vue/typescript-plugin</code></a><br><em>TypeScript LanguageService Plugin for Vue</em>.</li></ul><p>这些语言工具都是 Vue Language Tools 内含的工具。同时，这个 toolset 都是基于 <code>Volar.js</code> 实现的，这个 Volar 和我们平时说的 VSCode 插件 Volar 不是一个东西，这个 Volar.js 是一个语言服务器的框架，后面可以去研究下这个东西是什么和具体可以用来做什么。</p><p><a href="https://volarjs.dev/core-concepts/why-volar/" target="_blank" rel="noopener noreferrer">https://volarjs.dev/core-concepts/why-volar/</a></p><figure><img src="'+E+'" alt="image-20250724154802844" tabindex="0" loading="lazy"><figcaption>image-20250724154802844</figcaption></figure><p>TODO volar 虚拟文件这个概念提到好多次了，回去看看是啥东西</p><figure><img src="'+P+'" alt="image-20250724155434872" tabindex="0" loading="lazy"><figcaption>image-20250724155434872</figcaption></figure><p>通过这个方式去优化 Vue SFC 解析的开销，细粒度代码块，去辨别究竟是哪一块进行了变化，然后进行增量更新。</p><p>最终的目的是，每次更新时，只更新此次更新影响的值，不进行额外的计算。</p><p>V2 中用的是命名管道实现通信</p><figure><img src="'+O+'" alt="image-20250724155615153" tabindex="0" loading="lazy"><figcaption>image-20250724155615153</figcaption></figure><p>V3 则是直接进行通信，性能应该跟原生 typescript 性能近乎一样。</p><figure><img src="'+L+'" alt="image-20250724155627333" tabindex="0" loading="lazy"><figcaption>image-20250724155627333</figcaption></figure><p>这一 part 基本是介绍 Vue language tools 是什么，做了什么工作，同时在 3.0 版本中通过增量更新和替换命名管道来优化性能。</p><h2 id="vite-devtools-5-星" tabindex="-1"><a class="header-anchor" href="#vite-devtools-5-星"><span>Vite Devtools 5 星</span></a></h2><p>antfu: <a href="https://talks.antfu.me/2025/vueconf-china/1" target="_blank" rel="noopener noreferrer">https://talks.antfu.me/2025/vueconf-china/1</a></p><figure><img src="'+Q+'" alt="image-20250724155813406" tabindex="0" loading="lazy"><figcaption>image-20250724155813406</figcaption></figure><p>好工具原则：</p><ul><li>入门门槛低，容易上手，简单配置，一句话说明白在做什么</li><li>符合直觉的设定，符合用户期待和直觉，优秀的用户体验，渐进式</li><li>信息透明，可以看到内部的状态和过程，便于调试和优化</li><li>可组合性，模块互相解耦，易于组合和扩展</li><li>可扩展性，灵活的插件和配置系统</li></ul><p>一个题外话问题：Vitest 到底用了什么 Vite 的能力，才说是基于 Vite 开发的？</p><figure><img src="'+q+'" alt="image-20250724160324941" tabindex="0" loading="lazy"><figcaption>image-20250724160324941</figcaption></figure><p>因为现在还是 WIP 阶段，下面是一些它的预览截图：</p><figure><img src="'+F+'" alt="image-20250724160343774" tabindex="0" loading="lazy"><figcaption>image-20250724160343774</figcaption></figure><p>因为 Vite 后面预期是做 Vite+，因此 Vite Devtools 要有可扩展性，作为底层框架的 Devtools，要提供给上层框架去使用，因此会考虑模块化、可组合、互相协作的结构框架。</p><figure><img src="'+Y+'" alt="image-20250724160458117" tabindex="0" loading="lazy"><figcaption>image-20250724160458117</figcaption></figure><p><a href="https://github.com/vitejs/devtools" target="_blank" rel="noopener noreferrer">https://github.com/vitejs/devtools</a></p><p>这个库现场开源了，我也尝试 fork 下来做点贡献，希望这个以后真的可以大一统前端框架，我对 Vite+ 还是有期望的。</p>',191)]))}const N=a(Z,[["render",U]]),X=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/vue-conf-25.html","title":"VueConf 25","lang":"zh-CN","frontmatter":{"title":"VueConf 25","date":"2025-07-24T08:07:35.000Z","category":["学习笔记"],"tag":["Vue","Vue Conf"],"description":"VueConf 25 Vue & Vite 5 星 Evan You：https://mp.weixin.qq.com/s/S0DYFfwvMIGsQJpe3JsrrQ https://github.com/VueConf/2025 Vue 前面分享了 Vue 和 Vue 3 的增长趋势。 Vue language tools 3.0 IDE 稳定性提...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"VueConf 25\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-24T08:07:35.000Z\\",\\"dateModified\\":\\"2025-08-12T08:25:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"],["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/vue-conf-25.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"VueConf 25"}],["meta",{"property":"og:description","content":"VueConf 25 Vue & Vite 5 星 Evan You：https://mp.weixin.qq.com/s/S0DYFfwvMIGsQJpe3JsrrQ https://github.com/VueConf/2025 Vue 前面分享了 Vue 和 Vue 3 的增长趋势。 Vue language tools 3.0 IDE 稳定性提..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-12T08:25:36.000Z"}],["meta",{"property":"article:tag","content":"Vue Conf"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:published_time","content":"2025-07-24T08:07:35.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-12T08:25:36.000Z"}]]},"git":{"createdTime":1754987136000,"updatedTime":1754987136000,"contributors":[{"name":"CrabSAMA","username":"CrabSAMA","email":"71915282@qq.com","commits":1,"url":"https://github.com/CrabSAMA"}]},"readingTime":{"minutes":15.4,"words":4619},"filePathRelative":"学习笔记/vue-conf-25.md","excerpt":"\\n<h2>Vue &amp; Vite 5 星</h2>\\n<p>Evan You：<a href=\\"https://mp.weixin.qq.com/s/S0DYFfwvMIGsQJpe3JsrrQ\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://mp.weixin.qq.com/s/S0DYFfwvMIGsQJpe3JsrrQ</a></p>\\n<p><a href=\\"https://github.com/VueConf/2025\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/VueConf/2025</a></p>","autoDesc":true}');export{N as comp,X as data};
