import{_ as i,c as a,i as n,o as t}from"./app-5IOFPByO.js";const l="/CrabSAMA-Blog/assets/c5fa00af07f24540874617cb36ff7a6a~tplv-k3u1fbpfcp-7-7R7KrV.png",e="/CrabSAMA-Blog/assets/68108488bd8341d7bda294be0380bd9d~tplv-k3u1fbpfcp-DFNqu4oa.png",h={};function p(k,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="javascript-事件循环" tabindex="-1"><a class="header-anchor" href="#javascript-事件循环"><span>JavaScript 事件循环</span></a></h1><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  await</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 执行顺序 1 2 3</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 可以拆成几块看</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">await</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 等同于</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>js 引擎是单线程的，直白来说就是一个时间点下 js 引擎只能去做一件事情。</p><p>单线程的<strong>优势</strong>：保证了程序执行的一致性。</p><p>最初作为浏览器的脚本语言，主要用途是与用户互动以及操作 DOM，如果以多线程的方式操作 DOM，线程 1 要求删除 DOM，线程 2 却要求修改 DOM 样式，就会发生冲突。当然可以引入锁的机制来解决冲突，但是这提高了复杂性，因此 js 从诞生开始就选择了单线程运行。</p><p>Q：那有没有可能在新的 js 版本之后改成多线程呢？</p><p>A：不太可能，存在历史问题，这种改动会影响十分多的线上代码，js 和浏览器最大的目的应该是保证兼容性，这种重大变更会影响兼容性，并且现在已经有成熟的事件循环机制来解决异步问题了，这件事情的成本和收益完全不对等。</p><p><strong>为了避免复杂性，从一诞生，JavaScript 就是单线程，这已经成了这门语言的核心特征，将来也不会改变</strong>。</p><p>js 做的任务分为同步和异步两种，异步任务就是指一个任务不是连续完成的，先执行第一段，等做好了准备，再回过头执行第二段，第二段也被叫做回调。</p><p>像读取文件、网络请求这种任务就属于异步任务，花费时间很长，如果没有特殊处理的话，在执行异步的操作的时候是会存在等待的，不去做其他事情。类似下图：</p><figure><img src="`+l+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到中间有很多的空闲时间被浪费。</p><p>其实对于很多多线程的语言来说都是这样处理的，但是对于 js 这种单线程的语言来说，这种长时间的空闲等待是不可接受的。Java 可以多开一个线程继续去处理，js 就只能等。</p><p>所以 js 采取了「异步任务回调通知」模式：</p><figure><img src="'+e+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在等待异步任务的时候，js 去执行其他的同步任务，等异步任务好了之后再去执行回调。</p><p>而实现这个通知的，就是<strong>事件循环</strong>，把异步任务的回调部分交给事件循环，在合适的时候去做合适的事情。</p><h2 id="微任务的出现是为了什么" tabindex="-1"><a class="header-anchor" href="#微任务的出现是为了什么"><span>微任务的出现是为了什么？</span></a></h2><p>事件循环分为微任务和宏任务，完成当下的宏任务后，会立刻执行在此期间入队的微任务。</p><p>这种设计其实是为了给紧急任务一个<strong>插队</strong>的机会，否则新入队的任务会永远放在队尾。微任务实际上就是在插队，我们可以看一下微任务的任务基本都是具有实时性质的，借助了事件循环去插队，使得异步事件也能<strong>相对及时地</strong>被处理，是在 js 单线程模式下一种「顾及了性能和时效性」的异步任务方案。</p><p>微任务都是些必须尽快执行的小任务。其时机晚于一段 JavaScript 执行上下文主体的退出，但早于任何事件处理函数、timeouts 或 intervals 及其他回调被执行。</p><blockquote><p>事件循环中的任务被分为宏任务和微任务，是为了给高优先级任务一个插队的机会：微任务比宏任务有更高优先级。</p></blockquote><p>Q：已经有一个宏任务队列，为什么还需要一个微任务队列？</p><p>微任务中的 DOM 更新会在当前任务完成后立即执行，并在下一次页面渲染前生效。</p><p>而宏任务中的 DOM 更新则会在下一个事件循环中执行，并稍有延迟。</p><h2 id="宏任务一定准时吗" tabindex="-1"><a class="header-anchor" href="#宏任务一定准时吗"><span>宏任务一定准时吗？</span></a></h2><p>setTimeout setInterval 设定多少秒就一定多少秒后执行吗？</p><p>这是错误的，setTimeout setInterval 只是在多少秒后会将回调函数推到宏任务队列中，如果主线程仍在忙、阻塞，那依旧会等待任务执行完成后，再从宏任务队列中拿出回调函数并执行。</p><h2 id="定时器的计时器运行在-js-主线程上吗" tabindex="-1"><a class="header-anchor" href="#定时器的计时器运行在-js-主线程上吗"><span>定时器的计时器运行在 js 主线程上吗？</span></a></h2><p>定时器的计时器在浏览器的实现里面有<strong>一个独立的计时器线程</strong>，因为 js 引擎自己都忙不过来 js 是单线程的，如果阻塞的话会影响计时的准确，因此需要一个独立的线程来计时。</p><p>微任务和宏任务有哪些？</p><p>宏任务：setTimeout setInterval setImmediate script DOM 事件 requestAnimationFrame I/O UI-Render</p><p>微任务：Promise process.nextTick queueMicrotask MutationObserver</p><h2 id="在微任务里面去执行-long-task-一样会导致页面阻塞-那微任务有什么用" tabindex="-1"><a class="header-anchor" href="#在微任务里面去执行-long-task-一样会导致页面阻塞-那微任务有什么用"><span>在微任务里面去执行 long task 一样会导致页面阻塞，那微任务有什么用？</span></a></h2><p>你在单个微任务去执行 long task 会导致阻塞，我们可以拆分开多个微任务去分步执行，这样事件循环机制会自动利用好不同的空隙去「相对及时地」完成任务。</p><p>但是如果这个任务是有前后关联性的，而且是无法优化的，那就考虑使用 worker 吧，在一个独立的线程中执行，跑完后再通知 js 主线程。</p><hr><p>根据 w3c 最新的规范，已经不再使用宏任务队列这个说法了，包括了很多个队列，比如存放定时器的队列是延时队列，存放用户交互操作的是交互队列；还有浏览器一定要准备好的微任务队列，优先级是最高的。</p><p><a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loops" target="_blank" rel="noopener noreferrer">https://html.spec.whatwg.org/multipage/webappapis.html#event-loops</a></p><p><a href="https://www.zhoulujun.cn/html/webfront/ECMAScript/js6/2015_1110_345.html" target="_blank" rel="noopener noreferrer">https://www.zhoulujun.cn/html/webfront/ECMAScript/js6/2015_1110_345.html</a></p>',41)]))}const d=i(h,[["render",p]]),A=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/js-eventloop.html","title":"JavaScript 事件循环","lang":"zh-CN","frontmatter":{"title":"JavaScript 事件循环","date":"2024-12-03T12:06:15.000Z","category":["学习笔记"],"tag":["JavaScript","面试题"],"description":"JavaScript 事件循环 js 引擎是单线程的，直白来说就是一个时间点下 js 引擎只能去做一件事情。 单线程的优势：保证了程序执行的一致性。 最初作为浏览器的脚本语言，主要用途是与用户互动以及操作 DOM，如果以多线程的方式操作 DOM，线程 1 要求删除 DOM，线程 2 却要求修改 DOM 样式，就会发生冲突。当然可以引入锁的机制来解决冲突...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 事件循环\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-03T12:06:15.000Z\\",\\"dateModified\\":\\"2024-12-15T07:58:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"],["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/js-eventloop.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"JavaScript 事件循环"}],["meta",{"property":"og:description","content":"JavaScript 事件循环 js 引擎是单线程的，直白来说就是一个时间点下 js 引擎只能去做一件事情。 单线程的优势：保证了程序执行的一致性。 最初作为浏览器的脚本语言，主要用途是与用户互动以及操作 DOM，如果以多线程的方式操作 DOM，线程 1 要求删除 DOM，线程 2 却要求修改 DOM 样式，就会发生冲突。当然可以引入锁的机制来解决冲突..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-15T07:58:29.000Z"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2024-12-03T12:06:15.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-15T07:58:29.000Z"}]]},"git":{"createdTime":1734249509000,"updatedTime":1734249509000,"contributors":[{"name":"CrabSAMA","username":"CrabSAMA","email":"71915282@qq.com","commits":1,"url":"https://github.com/CrabSAMA"}]},"readingTime":{"minutes":5.02,"words":1505},"filePathRelative":"学习笔记/js-eventloop.md","excerpt":"\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-js\\"><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">async</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> () </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">  await</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> new</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> Promise</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">((</span><span style=\\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\">resolve</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">    console</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">log</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">    resolve</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  }).</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">then</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(() </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> console</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">log</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">2</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">))</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">  console</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">log</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">3</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">})()</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 执行顺序 1 2 3</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 可以拆成几块看</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">await</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> new</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> Promise</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">((</span><span style=\\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\">resolve</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">  console</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">log</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  resolve</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">})</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 等同于</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">function</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,A as data};
