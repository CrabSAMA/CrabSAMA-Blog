import{_ as o,c as t,i as c,o as a}from"./app-C-tK9rPn.js";const d="/CrabSAMA-Blog/assets/image-20220527180211375-Bg1c4iQ0.png",r="/CrabSAMA-Blog/assets/image-20220527181454485-fdnPbOLl.png",i="/CrabSAMA-Blog/assets/image-20220527181554326-YcWYxdtq.png",n={};function T(p,e){return a(),t("div",null,e[0]||(e[0]=[c('<p><code>HTTP 2.0</code> 的出现，相比于 <code>HTTP 1.x</code> ，大幅度的提升了 <code>web</code> 性能。在与 HTTP/1.1 完全语义兼容的基础上，进一步减少了网络延迟。</p><p><code>Firefox</code> 和 <code>Chrome</code> 早已宣布不支持任何不经过 <code>TLS</code> 加密的 <code>HTTP/2</code> 协议。</p><h2 id="多路复用" tabindex="-1"><a class="header-anchor" href="#多路复用"><span>多路复用</span></a></h2><p>多路复用允许同时通过单一的 <code>HTTP/2</code> 连接发起多重请求-响应消息。</p><p>众所周知，在 <code>HTTP/1.1</code> 协议中，浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制，超过限制数目的请求会被阻塞。</p><p>这也是为何一些站点有多个静态资源 <code>CDN</code> 域名的原因之一，可以变相地解决浏览器针对同一域名的请求限制阻塞问题。</p><p>而 <code>HTTP/2</code> 的多路复用则允许同时通过<strong>单一的</strong> <strong>HTTP/2</strong> <strong>连接</strong>发起多重的<strong>请求-响应</strong>消息。</p><figure><img src="'+d+'" alt="image-20220527180211375" tabindex="0" loading="lazy"><figcaption>image-20220527180211375</figcaption></figure><p>因此 <code>HTTP/2</code> 可以很容易的去实现多流并行而不用依赖建立多个 <code>TCP</code> 连接，<code>HTTP/2</code> 把 <code>HTTP</code> 协议通信的基本单位缩小为一个一个的<strong>帧</strong>。</p><h2 id="二进制分帧" tabindex="-1"><a class="header-anchor" href="#二进制分帧"><span>二进制分帧</span></a></h2><p>在不改动 <code>HTTP/1.x</code> 的语义、方法、状态码、URI 以及首部字段……的情况下，<code>HTTP/2</code> 在应用层（<code>HTTP/2</code>）和传输层（<code>TCP</code> or <code>UDP</code>）之间增加一个<strong>二进制分帧层</strong>。</p><figure><img src="'+r+'" alt="image-20220527181454485" tabindex="0" loading="lazy"><figcaption>image-20220527181454485</figcaption></figure><p>在二进制分帧层中，<code>HTTP/2</code> 会将所有传输的信息分割为更小的消息和帧（<code>frame</code>），并对它们采用二进制格式的编码，其中 <code>HTTP1.x</code> 的首部信息会被封装到 <code>HEADER frame</code>，而相应的 <code>Request Body</code> 则封装到 <code>DATA frame</code> 里面。</p><p><code>HTTP/2</code> 通过让所有数据流共用同一个连接，可以更有效地使用 <code>TCP</code> 连接，让高带宽也能真正的服务于 <code>HTTP</code> 的性能提升。</p><p>总结：</p><ul><li><strong>单连接多资源</strong>的方式，减少服务端的链接压力，内存占用更少，连接吞吐量更大</li><li>由于 <code>TCP</code> 连接的减少而使网络拥塞状况得以改善，同时慢启动时间的减少，事拥塞和丢包恢复速度更快</li></ul><h2 id="首部压缩" tabindex="-1"><a class="header-anchor" href="#首部压缩"><span>首部压缩</span></a></h2><p><code>HTTP/1.1</code>并不支持 <code>HTTP</code> 首部压缩，为此 <code>SPDY</code> 和 <code>HTTP/2</code> 应运而生。<code>HTTP/2</code> 使用了专门为首部压缩而设计的 <strong><code>HPACK</code></strong> <strong>算法</strong>。</p><figure><img src="'+i+'" alt="image-20220527181554326" tabindex="0" loading="lazy"><figcaption>image-20220527181554326</figcaption></figure><h2 id="服务端推送" tabindex="-1"><a class="header-anchor" href="#服务端推送"><span>服务端推送</span></a></h2><p>服务端推送是一种在客户端请求之前发送数据的机制。在 <code>HTTP/2</code> 中，服务器可以对客户端的<strong>一个</strong>请求发送<strong>多个</strong>响应。如果一个请求是由你的主页发起的，服务器很可能会响应主页内容、logo 以及样式表，因为它知道客户端会用到这些东西。</p><p>服务端推送还有一个很大的优势：可以缓存！也让在遵循同源的情况下，不同页面之间可以共享缓存资源成为可能。</p>',22)]))}const l=o(n,[["render",T],["__file","http2.0.html.vue"]]),g=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/http2.0.html","title":"HTTP 2.0","lang":"zh-CN","frontmatter":{"title":"HTTP 2.0","date":"2022-05-27T10:00:41.000Z","category":["学习笔记"],"tag":["计算机网络","HTTP","面试题"],"description":"HTTP 2.0 的出现，相比于 HTTP 1.x ，大幅度的提升了 web 性能。在与 HTTP/1.1 完全语义兼容的基础上，进一步减少了网络延迟。 Firefox 和 Chrome 早已宣布不支持任何不经过 TLS 加密的 HTTP/2 协议。 多路复用 多路复用允许同时通过单一的 HTTP/2 连接发起多重请求-响应消息。 众所周知，在 HTT...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/http2.0.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"HTTP 2.0"}],["meta",{"property":"og:description","content":"HTTP 2.0 的出现，相比于 HTTP 1.x ，大幅度的提升了 web 性能。在与 HTTP/1.1 完全语义兼容的基础上，进一步减少了网络延迟。 Firefox 和 Chrome 早已宣布不支持任何不经过 TLS 加密的 HTTP/2 协议。 多路复用 多路复用允许同时通过单一的 HTTP/2 连接发起多重请求-响应消息。 众所周知，在 HTT..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-17T14:39:26.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:tag","content":"HTTP"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:published_time","content":"2022-05-27T10:00:41.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-17T14:39:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP 2.0\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-27T10:00:41.000Z\\",\\"dateModified\\":\\"2024-08-17T14:39:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"多路复用","slug":"多路复用","link":"#多路复用","children":[]},{"level":2,"title":"二进制分帧","slug":"二进制分帧","link":"#二进制分帧","children":[]},{"level":2,"title":"首部压缩","slug":"首部压缩","link":"#首部压缩","children":[]},{"level":2,"title":"服务端推送","slug":"服务端推送","link":"#服务端推送","children":[]}],"git":{"createdTime":1653648648000,"updatedTime":1723905566000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":4}]},"readingTime":{"minutes":2.49,"words":748},"filePathRelative":"学习笔记/http2.0.md","localizedDate":"2022年5月27日","excerpt":"<p><code>HTTP 2.0</code> 的出现，相比于 <code>HTTP 1.x</code> ，大幅度的提升了 <code>web</code> 性能。在与 HTTP/1.1 完全语义兼容的基础上，进一步减少了网络延迟。</p>\\n<p><code>Firefox</code> 和 <code>Chrome</code> 早已宣布不支持任何不经过 <code>TLS</code> 加密的 <code>HTTP/2</code> 协议。</p>\\n<h2>多路复用</h2>\\n<p>多路复用允许同时通过单一的 <code>HTTP/2</code> 连接发起多重请求-响应消息。</p>","autoDesc":true}');export{l as comp,g as data};
