import{_ as d,X as n,Y as l,Z as o,$ as e,a1 as t,a2 as c,C as i}from"./framework-43a12551.js";const r={},_=c("<li><code>docker</code> 方式部署 <code>jenkins</code>，若需要使用 <code>blueocean</code> 请务必在启动容器时带上 <code>-v /var/run/docker.sock:/var/run/docker.sock</code> 命令，否则将会导致找不到 <code>docker</code> 进程。</li><li>由于使用的是 <code>gitee</code>，<code>blueocean</code> 方式下需要通过 <code>ssh</code> 模式连接仓库，涉及到 <code>ssh</code> 公钥和私钥生成的问题。在 <code>jenkins</code> 中配置 <code>ssh</code> 的私钥时切记！要将私钥文件中的<strong>所有内容</strong>（包括开始的第一行和最后一行）复制进去。</li>",2),a=o("code",null,"docker",-1),h=o("code",null,"jenkins",-1),u=o("code",null,"jenkins",-1),k=o("code",null,"jenkins",-1),p=o("code",null,"publish over ssh",-1),b=o("code",null,"blueocean",-1),f=o("code",null,"GUI",-1),m=o("code",null,"ssh",-1),v={href:"https://www.jenkins.io/doc/pipeline/steps/publish-over-ssh/#publish-over-ssh",target:"_blank",rel:"noopener noreferrer"},j=o("code",null,"Jenkinsfile",-1),g=c("<li>在系统配置中配置 <code>ssh</code> 时，要知道如何访问到宿主机，换句话说就是要知道宿主机的地址。我们可以通过通过 <code>ifconfig</code> 找到 <code>docker0</code> 这张网卡的 ip 地址，通过 ip 地址就可以访问到宿主机啦。（在 <code>docker</code> 网络模式是默认 bridge 模式下是可行的，其他模式还需要探索）</li><li><code>publish over ssh</code> 插件中的 <code>sourceFiles</code> 配置是基于 <code>workspace</code> 目录下的，而推送到的主机因此如果需要将目录下的所有文件推过去，要使用 <code>**</code>。</li>",2);function x(w,B){const s=i("ExternalLinkIcon");return n(),l("div",null,[o("ul",null,[_,o("li",null,[e("由于使用 "),a,e(" 方式部署 "),h,e("，本身 "),u,e(" 和实际运行环境（宿主机）是相互隔离的，因此打包好的文件要想办法回传到宿主机并运行起来。这里采用了 "),k,e(" 的一个插件 "),p,e("。由于 "),b,e(" 仍然不够完善的原因，在 "),f,e(" 选择 "),m,e(" 时没有可以配置的选项，因此我们需要查看"),o("a",v,[e("这个文档"),t(s)]),e("，通过自行编辑 "),j,e(" 文件来进行配置。")]),g])])}const V=d(r,[["render",x],["__file","docker-jenkins-blueocean-problems.html.vue"]]);export{V as default};
