const n=JSON.parse(`{"key":"v-5aad684e","path":"/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/JavaScript%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.html","title":"JavaScript 代码规范","lang":"zh-CN","frontmatter":{"title":"JavaScript 代码规范","date":"2021-11-03T09:58:40.000Z","lastUpdated":true,"category":["开发规范","JavaScript"],"description":"一种写 JavaScript 更合理的代码风格。 命名规范 避免单字母的名字。用你的命名来描述功能。 eslint: id-length // bad function q() { // ... } // good function query() { // ... } 在命名对象、函数和实例时使用驼峰命名法（camelCase）。 eslint: camelcase // bad const OBJEcttsssss = {} const this_is_my_object = {} function c() {} // good const thisIsMyObject = {} function thisIsMyFunction() {} 缩略词和缩写都必须是全部大写或者全部小写。 为什么？因为名字是为了可读性，不是为了满足计算机算法。 // bad import SmsContainer from './containers/SmsContainer' // bad const HttpRequests = [ // ... ] // good import SMSContainer from './containers/SMSContainer' // good const HTTPRequests = [ // ... ] // also good const httpRequests = [ // ... ] // best import TextMessageContainer from './containers/TextMessageContainer' // best const requests = [ // ... ]","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/JavaScript%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"JavaScript 代码规范"}],["meta",{"property":"og:description","content":"一种写 JavaScript 更合理的代码风格。 命名规范 避免单字母的名字。用你的命名来描述功能。 eslint: id-length // bad function q() { // ... } // good function query() { // ... } 在命名对象、函数和实例时使用驼峰命名法（camelCase）。 eslint: camelcase // bad const OBJEcttsssss = {} const this_is_my_object = {} function c() {} // good const thisIsMyObject = {} function thisIsMyFunction() {} 缩略词和缩写都必须是全部大写或者全部小写。 为什么？因为名字是为了可读性，不是为了满足计算机算法。 // bad import SmsContainer from './containers/SmsContainer' // bad const HttpRequests = [ // ... ] // good import SMSContainer from './containers/SMSContainer' // good const HTTPRequests = [ // ... ] // also good const httpRequests = [ // ... ] // best import TextMessageContainer from './containers/TextMessageContainer' // best const requests = [ // ... ]"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-17T16:52:03.000Z"}],["meta",{"property":"article:published_time","content":"2021-11-03T09:58:40.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-17T16:52:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 代码规范\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-03T09:58:40.000Z\\",\\"dateModified\\":\\"2023-03-17T16:52:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"命名规范","slug":"命名规范","link":"#命名规范","children":[]},{"level":2,"title":"引用与变量","slug":"引用与变量","link":"#引用与变量","children":[]},{"level":2,"title":"对象","slug":"对象","link":"#对象","children":[]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":2,"title":"解构","slug":"解构","link":"#解构","children":[]},{"level":2,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"箭头函数","slug":"箭头函数","link":"#箭头函数","children":[]},{"level":2,"title":"模块（ES Module）","slug":"模块-es-module","link":"#模块-es-module","children":[]},{"level":2,"title":"属性","slug":"属性","link":"#属性","children":[]},{"level":2,"title":"比较运算符和等号","slug":"比较运算符和等号","link":"#比较运算符和等号","children":[]},{"level":2,"title":"控制语句","slug":"控制语句","link":"#控制语句","children":[]},{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":2,"title":"空白","slug":"空白","link":"#空白","children":[]},{"level":2,"title":"分号","slug":"分号","link":"#分号","children":[]}],"git":{"createdTime":1679071923000,"updatedTime":1679071923000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":1}]},"readingTime":{"minutes":14.38,"words":4315},"filePathRelative":"开发规范/JavaScript代码规范.md","localizedDate":"2021年11月3日","excerpt":"<p><em>一种写 JavaScript 更合理的代码风格。</em></p>\\n<h2> 命名规范</h2>\\n<ul>\\n<li>\\n<p>避免单字母的名字。用你的命名来描述功能。 eslint: <a href=\\"https://eslint.org/docs/rules/id-length\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>id-length</code></a></p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// bad</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">q</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// good</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">query</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>在命名对象、函数和实例时使用驼峰命名法（camelCase）。 eslint: <a href=\\"https://eslint.org/docs/rules/camelcase.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>camelcase</code></a></p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// bad</span>\\n<span class=\\"token keyword\\">const</span> OBJEcttsssss <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">const</span> this_is_my_object <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">c</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// good</span>\\n<span class=\\"token keyword\\">const</span> thisIsMyObject <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">thisIsMyFunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>缩略词和缩写都必须是全部大写或者全部小写。</p>\\n<blockquote>\\n<p>为什么？因为名字是为了可读性，不是为了满足计算机算法。</p>\\n</blockquote>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// bad</span>\\n<span class=\\"token keyword\\">import</span> SmsContainer <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'./containers/SmsContainer'</span>\\n\\n<span class=\\"token comment\\">// bad</span>\\n<span class=\\"token keyword\\">const</span> HttpRequests <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>\\n  <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">]</span>\\n\\n<span class=\\"token comment\\">// good</span>\\n<span class=\\"token keyword\\">import</span> SMSContainer <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'./containers/SMSContainer'</span>\\n\\n<span class=\\"token comment\\">// good</span>\\n<span class=\\"token keyword\\">const</span> HTTPRequests <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>\\n  <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">]</span>\\n\\n<span class=\\"token comment\\">// also good</span>\\n<span class=\\"token keyword\\">const</span> httpRequests <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>\\n  <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">]</span>\\n\\n<span class=\\"token comment\\">// best</span>\\n<span class=\\"token keyword\\">import</span> TextMessageContainer <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'./containers/TextMessageContainer'</span>\\n\\n<span class=\\"token comment\\">// best</span>\\n<span class=\\"token keyword\\">const</span> requests <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>\\n  <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">]</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>","autoDesc":true}`);export{n as data};
