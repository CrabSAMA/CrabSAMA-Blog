const e=JSON.parse('{"key":"v-3985be92","path":"/Node.js/iteration-example.html","title":"迭代示例","lang":"zh-CN","frontmatter":{"title":"迭代示例","date":"2020-07-10T03:44:23.000Z","lastUpdated":true,"category":["Node.js"],"description":"确立需求 第一次迭代（基本功能） 快速迭代是一种不错的开发方式，在第一次迭代时先实现服务器的基本功能 分析需求，得出设计方案 根据设计方案，进行代码实现 测试，分析问题，为下一次迭代寻找需求 第二次迭代（性能） 在第一次迭代之后，已经拥有了一个简单的、可工作的版本，满足了功能需求。一般第二次迭代需要从性能的角度出发，看看有什么改进余地。 分析需求，得出设计方案 根据设计方案，进行代码实现 第三次迭代（稳定性） 第二次迭代之后，服务器本身的功能和性能已经得到了初步满足。接下来我们要从稳定性的角度重新审视一下代码，看看还需要做些什么。 第四次迭代（代码部署，项目结构） 在解决了服务器本身的功能、性能和可靠性问题后，最后要考虑的是代码部署的问题，以及服务器控制的问题 设计程序部署目录 构建项目结构 编写控制脚本 后续迭代 在服务器程序正式上线后，将会从可改进的点出发，将上述问题放大审视，并逐步完善需求与修复bug","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/Node.js/iteration-example.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"迭代示例"}],["meta",{"property":"og:description","content":"确立需求 第一次迭代（基本功能） 快速迭代是一种不错的开发方式，在第一次迭代时先实现服务器的基本功能 分析需求，得出设计方案 根据设计方案，进行代码实现 测试，分析问题，为下一次迭代寻找需求 第二次迭代（性能） 在第一次迭代之后，已经拥有了一个简单的、可工作的版本，满足了功能需求。一般第二次迭代需要从性能的角度出发，看看有什么改进余地。 分析需求，得出设计方案 根据设计方案，进行代码实现 第三次迭代（稳定性） 第二次迭代之后，服务器本身的功能和性能已经得到了初步满足。接下来我们要从稳定性的角度重新审视一下代码，看看还需要做些什么。 第四次迭代（代码部署，项目结构） 在解决了服务器本身的功能、性能和可靠性问题后，最后要考虑的是代码部署的问题，以及服务器控制的问题 设计程序部署目录 构建项目结构 编写控制脚本 后续迭代 在服务器程序正式上线后，将会从可改进的点出发，将上述问题放大审视，并逐步完善需求与修复bug"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-17T16:52:03.000Z"}],["meta",{"property":"article:published_time","content":"2020-07-10T03:44:23.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-17T16:52:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"迭代示例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-07-10T03:44:23.000Z\\",\\"dateModified\\":\\"2023-03-17T16:52:03.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1679071923000,"updatedTime":1679071923000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":1}]},"readingTime":{"minutes":1.64,"words":493},"filePathRelative":"Node.js/iteration-example.md","localizedDate":"2020年7月10日","excerpt":"<ol>\\n<li>\\n<p>确立需求</p>\\n</li>\\n<li>\\n<p>第一次迭代（基本功能）\\n快速迭代是一种不错的开发方式，在第一次迭代时先实现服务器的基本功能</p>\\n<ol>\\n<li>分析需求，得出设计方案</li>\\n<li>根据设计方案，进行代码实现</li>\\n<li>测试，分析问题，为下一次迭代寻找需求</li>\\n</ol>\\n</li>\\n<li>\\n<p>第二次迭代（性能）\\n在第一次迭代之后，已经拥有了一个简单的、可工作的版本，满足了功能需求。一般第二次迭代需要从性能的角度出发，看看有什么改进余地。</p>\\n<ol>\\n<li>分析需求，得出设计方案</li>\\n<li>根据设计方案，进行代码实现</li>\\n</ol>\\n</li>\\n<li>\\n<p>第三次迭代（稳定性）\\n第二次迭代之后，服务器本身的功能和性能已经得到了初步满足。接下来我们要从稳定性的角度重新审视一下代码，看看还需要做些什么。</p>\\n</li>\\n<li>\\n<p>第四次迭代（代码部署，项目结构）\\n在解决了服务器本身的功能、性能和可靠性问题后，最后要考虑的是代码部署的问题，以及服务器控制的问题</p>\\n<ol>\\n<li>设计程序部署目录</li>\\n<li>构建项目结构</li>\\n<li>编写控制脚本</li>\\n</ol>\\n</li>\\n<li>\\n<p>后续迭代\\n在服务器程序正式上线后，将会从可改进的点出发，将上述问题放大审视，并逐步完善需求与修复bug</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
