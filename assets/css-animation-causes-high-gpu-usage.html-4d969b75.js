import{_ as t,W as o,X as c,Y as s,Z as n,a0 as e,a1 as i,C as p}from"./framework-474f8844.js";const r="/assets/image-20221202141652806-12ab6fe5.png",l={},d=i('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><figure><img src="'+r+`" alt="image-20221202141652806" tabindex="0" loading="lazy"><figcaption>image-20221202141652806</figcaption></figure><p>有同学反映「权限申请」按钮的动画效果会导致 GPU 占用高的问题，在我的 m1 macbook pro 13 上表现为占用 20~25%，但是那位同学说在他电脑上占用率高达 130%，因此想搞明白为什么 animation 会导致 GPU 占用如此高。</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token atrule">@keyframes flowlight</span> <span class="token punctuation">{</span>
  <span class="token comment">// 0% {</span>
  <span class="token comment">//   background-position: 0 0;</span>
  <span class="token comment">// }</span>
  <span class="token selector">100%</span> <span class="token punctuation">{</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token operator">-</span>400% 0<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 按钮的类名</span>
<span class="token selector">.permission-url</span> <span class="token punctuation">{</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>
    <span class="token operator">-</span>89deg<span class="token punctuation">,</span>
    #fcab9b<span class="token punctuation">,</span>
    #f1d3af<span class="token punctuation">,</span>
    #afc9f1<span class="token punctuation">,</span>
    #bb9cfc<span class="token punctuation">,</span>
    #fcab9b
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">background-size</span><span class="token punctuation">:</span> 400%<span class="token punctuation">;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> flowlight 3.5s linear infinite<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><h3 id="高性能动画" tabindex="-1"><a class="header-anchor" href="#高性能动画" aria-hidden="true">#</a> 高性能动画</h3>`,6),u=s("code",null,"css animation background gpu",-1),h={href:"https://web.dev/animations-guide/#triggers",target:"_blank",rel:"noopener noreferrer"},g=s("h3",{id:"重绘和回流",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#重绘和回流","aria-hidden":"true"},"#"),n(" 重绘和回流")],-1),m=s("p",null,"在最初学习前端的时候，我们就会了解到涉及 DOM 的两种行为：重绘（repaint）和回流（reflow）。回流总会引发重绘，而重绘不一定导致回流，因此很明显重绘的开销是比回流少的。就是这一个「少」字，我们往往认为尽力避免回流即可，重绘的开销一般可以忽略不计。但事实真的如此吗？",-1),b={href:"https://csstriggers.com/",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"background-position",-1),v=i('<blockquote><h2 id="background-position" tabindex="-1"><a class="header-anchor" href="#background-position" aria-hidden="true">#</a> background-position</h2><p>Changing <code>background-position</code> does not trigger any geometry changes, which is good. But since it is a visual property, it will cause <strong>painting</strong> to occur. Painting is typically a super expensive operation, so you should be cautious.</p><p>Once any pixels have been painted the page will be <strong>composited</strong> together.</p></blockquote><p>意思是这个属性不会触发回流，但是由于是一个视觉属性，所以会触发重绘，<strong>重绘也是一项昂贵的操作</strong>，所以我们应该注意。</p><p>这还是我第一次知道，重绘其实也是一项高开销的操作，而动画会定期改变属性，导致不断触发重绘，最终就会表现为 GPU 占用高。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><p>TODO...</p>',5);function f(_,x){const a=p("ExternalLinkIcon");return o(),c("div",null,[d,s("p",null,[n("拿着 "),u,n(" 的关键词去 google 上搜会有很多结果，在其中我看到了一个如何实现高性能 CSS 动画的文章（"),s("a",h,[n("链接"),e(a)]),n("）。在里面提到了要避免属性变更导致的重绘和回流，因此问题的思路就转变到我们动画变更的属性上了。")]),g,m,s("p",null,[n("要了解重绘和回流，我们首先要知道具体哪些 css 属性的变动会引发重绘和回流。有一个网站里面列出了常见的属性触发后的行为（"),s("a",b,[n("链接"),e(a)]),n("），由于代码里面用到了 "),k,n(" 属性，我们就直接看看这个属性会触发什么：")]),v])}const w=t(l,[["render",f],["__file","css-animation-causes-high-gpu-usage.html.vue"]]);export{w as default};
