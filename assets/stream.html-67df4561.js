const n=JSON.parse(`{"key":"v-19bce346","path":"/Node.js/stream.html","title":"Stream数据流","lang":"zh-CN","frontmatter":{"title":"Stream数据流","date":"2020-07-09T01:21:04.000Z","lastUpdated":true,"category":["Node.js"],"description":"官方文档：http://nodejs.org/api/stream.html 当内存中无法一次装下需要处理的数据时，或者一边读取一边处理更加高效时，我们就需要用到数据流。NodeJS中通过各种Stream来提供对数据流的操作。 以文件拷贝为例，我们可以为数据来源创建一个只读数据流： var rs = fs.createReadStream(pathname); rs.on('data', function (chunk) { doSomething(chunk); }); rs.on('end', function () { cleanUp(); });","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/Node.js/stream.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"Stream数据流"}],["meta",{"property":"og:description","content":"官方文档：http://nodejs.org/api/stream.html 当内存中无法一次装下需要处理的数据时，或者一边读取一边处理更加高效时，我们就需要用到数据流。NodeJS中通过各种Stream来提供对数据流的操作。 以文件拷贝为例，我们可以为数据来源创建一个只读数据流： var rs = fs.createReadStream(pathname); rs.on('data', function (chunk) { doSomething(chunk); }); rs.on('end', function () { cleanUp(); });"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-17T16:52:03.000Z"}],["meta",{"property":"article:published_time","content":"2020-07-09T01:21:04.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-17T16:52:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Stream数据流\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-07-09T01:21:04.000Z\\",\\"dateModified\\":\\"2023-03-17T16:52:03.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1679071923000,"updatedTime":1679071923000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":1}]},"readingTime":{"minutes":1.89,"words":568},"filePathRelative":"Node.js/stream.md","localizedDate":"2020年7月9日","excerpt":"<p><strong>官方文档：</strong><a href=\\"http://nodejs.org/api/stream.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">http://nodejs.org/api/stream.html</a>\\n当内存中无法一次装下需要处理的数据时，或者一边读取一边处理更加高效时，我们就需要用到数据流。<code>NodeJS</code>中通过各种<code>Stream</code>来提供对数据流的操作。</p>\\n<p>以文件拷贝为例，我们可以为数据来源创建一个只读数据流：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> rs <span class=\\"token operator\\">=</span> fs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createReadStream</span><span class=\\"token punctuation\\">(</span>pathname<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\nrs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'data'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">chunk</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">doSomething</span><span class=\\"token punctuation\\">(</span>chunk<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\nrs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'end'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">cleanUp</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
