import{_ as e,c as i,i as a,o as t}from"./app-Cj_mfYJ5.js";const n={};function o(p,s){return t(),i("div",null,s[0]||(s[0]=[a(`<h1 id="package-json-exports-字段" tabindex="-1"><a class="header-anchor" href="#package-json-exports-字段"><span>package.json exports 字段</span></a></h1><p><a href="https://es6.ruanyifeng.com/#docs/module-loader#package-json-%E7%9A%84-exports-%E5%AD%97%E6%AE%B5" target="_blank" rel="noopener noreferrer">阮一峰ES6链接</a></p><p>我们平时经常看到一种引入方式：<code>import UnoCSS from &#39;unocss/vite&#39;</code>，这种带斜杠的引入其实就是 <code>exports</code> 字段发挥的作用。</p><p>我们如果不配置 <code>exports</code> 字段的话，直接斜杠进入到的是包下面的路径，比如我们平时也会这样引入：<code>import bar from &#39;foo/index.js&#39;</code>。</p><p><code>exports</code> 字段的作用就是帮助我们使用别名的方式指定特殊的引入地址，在我们需要导出一些子模块时十分有用。</p><p>比如在最近部门有一个新业务线的需求，它要求把原先的一些敏感词去掉，因此我直接在原有包的基础上剔除了一些引用，通过 rollup 打包出来一个新的入口文件，通过 <code>exports</code> 字段定义一个新的导出，这样用户就可以一次性将原来的引入定义修改成新的引入地址，这就是 <code>exports</code> 字段的作用。</p><h2 id="exports-with-typescript" tabindex="-1"><a class="header-anchor" href="#exports-with-typescript"><span>exports with typescript</span></a></h2><p>在直接使用了 <code>exports</code> 之后，我们会发现 typescript 会报类型找不到的异常：</p><blockquote><p>There are types at &#39;/Users/crab/Project/xxx/node_modules/some-package/dist/types/src/index.d.ts&#39;, but this result could not be resolved when respecting package.json &quot;exports&quot;. The &#39;xxx&#39; library may need to update its package.json or typings.ts(7016)</p></blockquote><p>字面意思来说，就是 typescript 无法找到对应的类型定义文件，但其实我已经在 <code>package.json</code> 下的 <code>types</code> 字段中输入了。</p><p>后面我发现，这个是在 typescript 4.7+ 后才实现的新特性，我们需要在 <code>exports</code> 对象下面针对不同的导出也定义不同的 <code>types</code>，这样 typescript 才能找到对应的定义文件。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;exports&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;import&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./dist/esm/index.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;require&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./dist/cjs/index.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;default&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./dist/cjs/index.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;types&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./dist/types/src/index.d.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;./foo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;import&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./dist/esm/foo.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;require&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./dist/cjs/foo.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;default&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./dist/cjs/foo.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;types&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./dist/types/src/foo-entry.d.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2024-08-28-更新" tabindex="-1"><a class="header-anchor" href="#_2024-08-28-更新"><span>2024-08-28 更新</span></a></h3><p>组内同事反馈引入会报错误：</p><blockquote><p>Cannot find module &#39;package&#39; or its corresponding type declarations.<br> There are types at &#39;/Users/xxx/Project/xxx/node_modules/package/dist/types/src/entry.d.ts&#39;, but this result could not be resolved under your current &#39;moduleResolution&#39; setting. Consider updating to &#39;node16&#39;, &#39;nodenext&#39;, or &#39;bundler&#39;.</p></blockquote><p>字面意思来说，其实 typescript 已经找到了你的类型定义文件，但由于项目 tsconfig 中的 <code>moduleResolution</code> 字段限制了无法读取这个类型文件，建议我们更新成后面的几种类型。在 <code>moduleResolution</code> 设为 <code>Node</code> 的时候会报这个错误。</p><p><a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-0-beta/#moduleresolution-bundler" target="_blank" rel="noopener noreferrer">https://devblogs.microsoft.com/typescript/announcing-typescript-5-0-beta/#moduleresolution-bundler</a></p><p>需要注意的是，<code>bunlder</code> 这个类型需要 typescript &gt; 5.0 才能生效，而设置为 <code>node16</code> 或者 <code>nodenext</code> 也有弊端，就是无法通过省略文件类型名来引入对应的模块，这是非常反人类的，因此在不升级 typescript 版本的情况下，可以先使用 <code>@ts-ignore</code> 来暂时禁用引入的报错使其编译通过。</p><h3 id="隐式的-any-类型错误" tabindex="-1"><a class="header-anchor" href="#隐式的-any-类型错误"><span>隐式的 any 类型错误</span></a></h3><p>在导出 js 文件的时候遇到了错误：</p><blockquote><p>Could not find a declaration file for module &#39;xxx/dist/theme/ant-design.js&#39;. &#39;/Users/xxx/Project/xxx/node_modules/package/dist/theme/ant-design.js&#39; implicitly has an &#39;any&#39; type. If the &#39;xxx&#39; package actually exposes this module, try adding a new declaration (.d.ts) file containing <code>declare module &#39;package/dist/theme/ant-design.js&#39;;</code>ts-plugin(7016)</p></blockquote><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> theme</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;package/dist/theme/ant-design.ts&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;exports&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;./dist/theme/ant-design.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;default&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./dist/theme/ant-design.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;types&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./dist/types/src/theme/ant-design.d.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>错误的大概意思是引入的 js 文件没找到类型定义，因此具有隐式的 <code>any</code> 类型。但可以看到上面 <code>exports</code> 语句中我已经指定了对应的 <code>d.ts</code> 类型文件了，所以问题应该是 typescript 没有找到类型定义文件或者识别不出来。</p><p>在尝试解决问题的过程中，我发现调整 <code>moduleResolution</code> 会有不同的情况，当 <code>moduleResolution</code> 设为 <code>node16</code> 或者 <code>nodenext</code> 的时候，引入 js 文件是没有问题的，而当 <code>moduleResolution</code> 设为 <code>bundler</code> 的时候就会报错。但上面说到如果设置成前者，会引入更多的问题，因此我们的 <code>moduleResolution</code> 属性是不能变的。因此我们再去深入了解 <code>moduleResolution</code> 这个属性做了什么事情。（<a href="https://github.com/microsoft/TypeScript/pull/51669" target="_blank" rel="noopener noreferrer">pr link</a>）</p><p>查找网上的资料，发现大家提供了许多在包不支持或未更新的情况下也能使用 <code>bundler</code> 的方法（<a href="https://zenn.dev/drop_table_user/articles/710c34c9f7c4b0" target="_blank" rel="noopener noreferrer">链接</a>），虽然我不是这种情况，但是这给我提供了思路。这篇文章中提到我们可以设置 <code>resolvePackageJsonExports</code> 为 <code>false</code>，禁止 typescript 去读取 <code>package.json</code> 中的 <code>exports</code> 字段。我回头一看我的 <code>tsconfig.json</code> 文件，不知道什么时候我将 <code>resolvePackageJsonExports</code> 设为 <code>false</code> 了，这和我的预期是不符的。在将这一行去掉了之后，引入 js 文件的代码一切正常。</p><p>因此后续大家在遇到此类的问题的时候，可以按照以下的步骤去排查：</p><ol><li><code>Ctrl + Shift + P</code> (Windows) / <code>Command + Shift + P</code> (macos)，<code>Reload Window</code>，先将 VSCode 重载查看是否 ts server 卡顿</li><li>检查 typescript 版本</li><li>检查 <code>tsconfig.json</code> 中 <code>allowJS</code> 属性是否为 <code>true</code></li><li>检查 <code>tsconfig.json</code> 中 <code>moduleResolution</code> 属性是否为 <code>bundler</code></li><li>检查 <code>tsconfig.json</code> 中 <code>resolvePackageJsonExports</code> 属性是否为 <code>false</code></li></ol><p>如果上述步骤排查完成还是不能解决，请到 stackoverflow 或者 typescript github 库下方提 issue，他们会更专业地帮助你解决问题！</p><p>TODO 还有个很奇怪的点，我把文件扩展名由 js 改成 ts 后，又能正常导入导出了。我猜测是不是 ts 文件会自动触发类型推断，而 js 不会，因此出现了行为上的差异？</p><h2 id="exports-with-webpack4" tabindex="-1"><a class="header-anchor" href="#exports-with-webpack4"><span>exports with webpack4</span></a></h2><p>组内仍有部分老项目用的还是 webpack4，很遗憾的是，在搜相关的 issue 时，发现官方提到 webpack4 并不会支持 <code>exports</code> 字段。（<a href="https://github.com/webpack/webpack/issues/9509" target="_blank" rel="noopener noreferrer">issue链接</a>）</p><p>因此要么将 webpack 版本升级到 5 以上，或者更换为 Vite，否则并不能直接通过 <code>exports</code> 字段实现具名引入。解决方法也是有的，<code>exports</code> 字段的目的是让打包器找到对应的文件，那我们直接通过指定路径引入指定的文件，也可以实现引入的效果，但是就不是特别优雅了。我个人觉得还可以结合 webpack 里面的 <code>alias</code> 属性去使用，相对来说会看起来比较舒服一点。</p><h2 id="exports-with-other-files" tabindex="-1"><a class="header-anchor" href="#exports-with-other-files"><span>exports with other files</span></a></h2><p><code>exports</code> 这个属性只要使用了，就等于显式地告诉打包器我这个包只有标出来的东西被导出了，其余的内容直接引入是会报错的，因此在使用了 <code>exports</code> 属性后，就没办法通过绝对路径或相对路径的方式引入包下面的其余内容了。</p><p>当然也是有解决办法的：</p><p><a href="https://juejin.cn/post/7212436135287504954#heading-4" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7212436135287504954#heading-4</a></p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;exports&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 原本的内容...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;./*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;./*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;./*.d.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在最后面加入一个通配符 <code>exports</code>，将其余的东西都导出即可。但个人还是建议按需导出，这样编写的 npm 包会更加规范。</p>`,39)]))}const r=e(n,[["render",o]]),d=JSON.parse(`{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/package-json-exports.html","title":"package.json exports 字段","lang":"zh-CN","frontmatter":{"title":"package.json exports 字段","date":"2024-09-03T07:02:34.000Z","category":["学习笔记"],"tag":["前端工程化","npm"],"description":"package.json exports 字段 阮一峰ES6链接 我们平时经常看到一种引入方式：import UnoCSS from 'unocss/vite'，这种带斜杠的引入其实就是 exports 字段发挥的作用。 我们如果不配置 exports 字段的话，直接斜杠进入到的是包下面的路径，比如我们平时也会这样引入：import bar from ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"package.json exports 字段\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-03T07:02:34.000Z\\",\\"dateModified\\":\\"2024-10-29T10:05:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"],["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/package-json-exports.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"package.json exports 字段"}],["meta",{"property":"og:description","content":"package.json exports 字段 阮一峰ES6链接 我们平时经常看到一种引入方式：import UnoCSS from 'unocss/vite'，这种带斜杠的引入其实就是 exports 字段发挥的作用。 我们如果不配置 exports 字段的话，直接斜杠进入到的是包下面的路径，比如我们平时也会这样引入：import bar from ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-29T10:05:03.000Z"}],["meta",{"property":"article:tag","content":"npm"}],["meta",{"property":"article:tag","content":"前端工程化"}],["meta",{"property":"article:published_time","content":"2024-09-03T07:02:34.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-29T10:05:03.000Z"}]]},"git":{"createdTime":1727594324000,"updatedTime":1730196303000,"contributors":[{"name":"CrabSAMA","username":"CrabSAMA","email":"71915282@qq.com","commits":2,"url":"https://github.com/CrabSAMA"}]},"readingTime":{"minutes":5.58,"words":1673},"filePathRelative":"学习笔记/package-json-exports.md","excerpt":"\\n<p><a href=\\"https://es6.ruanyifeng.com/#docs/module-loader#package-json-%E7%9A%84-exports-%E5%AD%97%E6%AE%B5\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">阮一峰ES6链接</a></p>\\n<p>我们平时经常看到一种引入方式：<code>import UnoCSS from 'unocss/vite'</code>，这种带斜杠的引入其实就是 <code>exports</code> 字段发挥的作用。</p>\\n<p>我们如果不配置 <code>exports</code> 字段的话，直接斜杠进入到的是包下面的路径，比如我们平时也会这样引入：<code>import bar from 'foo/index.js'</code>。</p>","autoDesc":true}`);export{r as comp,d as data};
