import{_ as o,c,i as d,o as r}from"./app-DOF6gB1w.js";const n={};function t(s,e){return r(),c("div",null,e[0]||(e[0]=[d('<ul><li><code>docker</code> 方式部署 <code>jenkins</code>，若需要使用 <code>blueocean</code> 请务必在启动容器时带上 <code>-v /var/run/docker.sock:/var/run/docker.sock</code> 命令，否则将会导致找不到 <code>docker</code> 进程。</li><li>由于使用的是 <code>gitee</code>，<code>blueocean</code> 方式下需要通过 <code>ssh</code> 模式连接仓库，涉及到 <code>ssh</code> 公钥和私钥生成的问题。在 <code>jenkins</code> 中配置 <code>ssh</code> 的私钥时切记！要将私钥文件中的<strong>所有内容</strong>（包括开始的第一行和最后一行）复制进去。</li><li>由于使用 <code>docker</code> 方式部署 <code>jenkins</code>，本身 <code>jenkins</code> 和实际运行环境（宿主机）是相互隔离的，因此打包好的文件要想办法回传到宿主机并运行起来。这里采用了 <code>jenkins</code> 的一个插件 <code>publish over ssh</code>。由于 <code>blueocean</code> 仍然不够完善的原因，在 <code>GUI</code> 选择 <code>ssh</code> 时没有可以配置的选项，因此我们需要查看<a href="https://www.jenkins.io/doc/pipeline/steps/publish-over-ssh/#publish-over-ssh" target="_blank" rel="noopener noreferrer">这个文档</a>，通过自行编辑 <code>Jenkinsfile</code> 文件来进行配置。</li><li>在系统配置中配置 <code>ssh</code> 时，要知道如何访问到宿主机，换句话说就是要知道宿主机的地址。我们可以通过通过 <code>ifconfig</code> 找到 <code>docker0</code> 这张网卡的 ip 地址，通过 ip 地址就可以访问到宿主机啦。（在 <code>docker</code> 网络模式是默认 bridge 模式下是可行的，其他模式还需要探索）</li><li><code>publish over ssh</code> 插件中的 <code>sourceFiles</code> 配置是基于 <code>workspace</code> 目录下的，而推送到的主机因此如果需要将目录下的所有文件推过去，要使用 <code>**</code>。</li></ul>',1)]))}const a=o(n,[["render",t]]),l=JSON.parse('{"path":"/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/docker-jenkins-blueocean-problems.html","title":"docker 方式部署的 jenkins 使用 blueocean 方式持续部署并打包回传宿主机遇到的坑一览","lang":"zh-CN","frontmatter":{"title":"docker 方式部署的 jenkins 使用 blueocean 方式持续部署并打包回传宿主机遇到的坑一览","date":"2022-05-10T11:30:32.000Z","category":["项目总结"],"tag":["Docker","Jenkins","踩坑"],"description":"docker 方式部署 jenkins，若需要使用 blueocean 请务必在启动容器时带上 -v /var/run/docker.sock:/var/run/docker.sock 命令，否则将会导致找不到 docker 进程。 由于使用的是 gitee，blueocean 方式下需要通过 ssh 模式连接仓库，涉及到 ssh 公钥和私钥生成的问题...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"docker 方式部署的 jenkins 使用 blueocean 方式持续部署并打包回传宿主机遇到的坑一览\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-10T11:30:32.000Z\\",\\"dateModified\\":\\"2024-09-29T07:33:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"],["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/docker-jenkins-blueocean-problems.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"docker 方式部署的 jenkins 使用 blueocean 方式持续部署并打包回传宿主机遇到的坑一览"}],["meta",{"property":"og:description","content":"docker 方式部署 jenkins，若需要使用 blueocean 请务必在启动容器时带上 -v /var/run/docker.sock:/var/run/docker.sock 命令，否则将会导致找不到 docker 进程。 由于使用的是 gitee，blueocean 方式下需要通过 ssh 模式连接仓库，涉及到 ssh 公钥和私钥生成的问题..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-29T07:33:27.000Z"}],["meta",{"property":"article:tag","content":"踩坑"}],["meta",{"property":"article:tag","content":"Jenkins"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2022-05-10T11:30:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-29T07:33:27.000Z"}]]},"git":{"createdTime":1652183994000,"updatedTime":1727595207000,"contributors":[{"name":"CrabSAMA","username":"CrabSAMA","email":"71915282@qq.com","commits":8,"url":"https://github.com/CrabSAMA"}]},"readingTime":{"minutes":1.45,"words":436},"filePathRelative":"项目总结/docker-jenkins-blueocean-problems.md","excerpt":"<ul>\\n<li><code>docker</code> 方式部署 <code>jenkins</code>，若需要使用 <code>blueocean</code> 请务必在启动容器时带上 <code>-v /var/run/docker.sock:/var/run/docker.sock</code> 命令，否则将会导致找不到 <code>docker</code> 进程。</li>\\n<li>由于使用的是 <code>gitee</code>，<code>blueocean</code> 方式下需要通过 <code>ssh</code> 模式连接仓库，涉及到 <code>ssh</code> 公钥和私钥生成的问题。在 <code>jenkins</code> 中配置 <code>ssh</code> 的私钥时切记！要将私钥文件中的<strong>所有内容</strong>（包括开始的第一行和最后一行）复制进去。</li>\\n<li>由于使用 <code>docker</code> 方式部署 <code>jenkins</code>，本身 <code>jenkins</code> 和实际运行环境（宿主机）是相互隔离的，因此打包好的文件要想办法回传到宿主机并运行起来。这里采用了 <code>jenkins</code> 的一个插件 <code>publish over ssh</code>。由于 <code>blueocean</code> 仍然不够完善的原因，在 <code>GUI</code> 选择 <code>ssh</code> 时没有可以配置的选项，因此我们需要查看<a href=\\"https://www.jenkins.io/doc/pipeline/steps/publish-over-ssh/#publish-over-ssh\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">这个文档</a>，通过自行编辑 <code>Jenkinsfile</code> 文件来进行配置。</li>\\n<li>在系统配置中配置 <code>ssh</code> 时，要知道如何访问到宿主机，换句话说就是要知道宿主机的地址。我们可以通过通过 <code>ifconfig</code> 找到 <code>docker0</code> 这张网卡的 ip 地址，通过 ip 地址就可以访问到宿主机啦。（在 <code>docker</code> 网络模式是默认 bridge 模式下是可行的，其他模式还需要探索）</li>\\n<li><code>publish over ssh</code> 插件中的 <code>sourceFiles</code> 配置是基于 <code>workspace</code> 目录下的，而推送到的主机因此如果需要将目录下的所有文件推过去，要使用 <code>**</code>。</li>\\n</ul>","autoDesc":true}');export{a as comp,l as data};
