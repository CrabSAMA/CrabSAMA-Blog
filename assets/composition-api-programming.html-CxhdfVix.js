import{_ as o,c as e,i,o as p}from"./app-BS7W8Gul.js";const a={};function r(n,t){return p(),e("div",null,t[0]||(t[0]=[i("<blockquote><p>组合式 API (Composition API) 是一系列 API 的集合，使我们可以使用函数而不是声明选项的方式书写 Vue 组件。</p></blockquote><p>在刚接触 Vue3 的时候，由于了解到 Vue3 最大的变化就是提供了全新的 composition api，因此在初上手的时候，所有组件清一色用的都是 <code>&lt;script setup&gt;</code> + coposition api 编写，想着多用新特性总没错。在经历了一段时间的使用后，才逐渐有了一些自己的理解。</p><p>在我看来，组合式 API 不是 Vue3 的必须品，它有些时候更像一种编码思维，在该用到的地方使用会给你提升十分多的效率，但如果是为了用而用，在大多数简单的场景下，可能选项式 API 会显得更简单无脑一些，因为它给你列好了框架，手把手教你该把代码放在哪里。官方的原话是：</p><blockquote><p>组合式 API 让你可以像编写普通的 JavaScript 那样来编写组件代码。这意味着<strong>你能够，并且应该在写组合式 API 的代码时也运用上所有普通 JavaScript 代码组织的最佳实践</strong>。如果你可以编写组织良好的 JavaScript，你也应该有能力编写组织良好的组合式 API 代码。</p></blockquote><p>我们平时经常说 Vue 比 React 简单，React 提倡 All in JS 的理念，高度自由的情况下同时也对开发者的 JS 能力提出了要求，这有点像组合式 API 和 选项式 API 的取舍了。</p><p>在我看来，选项式 API 和 组合式 API 没有绝对的好坏，即便你是选项式 API 的忠实拥趸，我的意思并不是要强迫大家都去用组合式 API，但组合式 API 编程的思想是可以学习的。有了逻辑封装的思想后，即使你用 provide / inject 一样可以写出同样效果的代码，只是说你用组合式 API 后代码的组合会显得更加明显罢了，因为组合式 API 需要明确的 import，用 provide / inject 可没有 command + 右键点击直接跳转的能力。</p>",6)]))}const m=o(a,[["render",r],["__file","composition-api-programming.html.vue"]]),s=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/composition-api-programming.html","title":"Composition API 编程思想","lang":"zh-CN","frontmatter":{"title":"Composition API 编程思想","date":"2023-02-07T06:46:40.000Z","star":true,"category":["学习笔记"],"tag":["前端工程化","Vue"],"description":"组合式 API (Composition API) 是一系列 API 的集合，使我们可以使用函数而不是声明选项的方式书写 Vue 组件。 在刚接触 Vue3 的时候，由于了解到 Vue3 最大的变化就是提供了全新的 composition api，因此在初上手的时候，所有组件清一色用的都是 <script setup> + coposition api...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/composition-api-programming.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"Composition API 编程思想"}],["meta",{"property":"og:description","content":"组合式 API (Composition API) 是一系列 API 的集合，使我们可以使用函数而不是声明选项的方式书写 Vue 组件。 在刚接触 Vue3 的时候，由于了解到 Vue3 最大的变化就是提供了全新的 composition api，因此在初上手的时候，所有组件清一色用的都是 <script setup> + coposition api..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-17T14:42:51.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"前端工程化"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:published_time","content":"2023-02-07T06:46:40.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-17T14:42:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Composition API 编程思想\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-07T06:46:40.000Z\\",\\"dateModified\\":\\"2024-08-17T14:42:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[],"git":{"createdTime":1679047229000,"updatedTime":1723905771000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":4}]},"readingTime":{"minutes":1.93,"words":580},"filePathRelative":"学习笔记/composition-api-programming.md","localizedDate":"2023年2月7日","excerpt":"<blockquote>\\n<p>组合式 API (Composition API) 是一系列 API 的集合，使我们可以使用函数而不是声明选项的方式书写 Vue 组件。</p>\\n</blockquote>\\n<p>在刚接触 Vue3 的时候，由于了解到 Vue3 最大的变化就是提供了全新的 composition api，因此在初上手的时候，所有组件清一色用的都是 <code>&lt;script setup&gt;</code> + coposition api 编写，想着多用新特性总没错。在经历了一段时间的使用后，才逐渐有了一些自己的理解。</p>\\n<p>在我看来，组合式 API 不是 Vue3 的必须品，它有些时候更像一种编码思维，在该用到的地方使用会给你提升十分多的效率，但如果是为了用而用，在大多数简单的场景下，可能选项式 API 会显得更简单无脑一些，因为它给你列好了框架，手把手教你该把代码放在哪里。官方的原话是：</p>","autoDesc":true}');export{m as comp,s as data};
