import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DMXpJ-m3.js";const p={},e=t(`<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br /&gt;&#39;</span><span class="token punctuation">)</span>

      <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br /&gt;&#39;</span><span class="token punctuation">)</span>

      <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br /&gt;&#39;</span><span class="token punctuation">)</span>

      <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br /&gt;&#39;</span><span class="token punctuation">)</span>

      <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>
      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;br /&gt;&#39;</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的输出结果为（      ）</p><hr><p>这里涉及到数据类型转换</p><ul><li>没有内容就是 undefined,这个就是 false</li><li>0 就是 false,1 是 true</li><li>null 跟 undefined 一样,都是 false</li><li>字符串里面有内容的话才是 true,没有内容就是 false</li><li>NaN 是一种数值类型,已经是 false 了,只是为了让程序继续往下面走</li></ul><p>其他解析:<br> 数值只要不是 0,都是<strong>true</strong><br> 对象 object 永远都是<strong>true</strong></p>`,6),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","boolean-type-changed.html.vue"]]),d=JSON.parse(`{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/boolean-type-changed.html","title":"boolean类型转换","lang":"zh-CN","frontmatter":{"title":"boolean类型转换","category":["学习笔记"],"tag":["JavaScript","笔面试"],"description":"上述代码的输出结果为（ ） 这里涉及到数据类型转换 没有内容就是 undefined,这个就是 false 0 就是 false,1 是 true null 跟 undefined 一样,都是 false 字符串里面有内容的话才是 true,没有内容就是 false NaN 是一种数值类型,已经是 false 了,只是为了让程序继续往下面走 其他解析:...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/boolean-type-changed.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"boolean类型转换"}],["meta",{"property":"og:description","content":"上述代码的输出结果为（ ） 这里涉及到数据类型转换 没有内容就是 undefined,这个就是 false 0 就是 false,1 是 true null 跟 undefined 一样,都是 false 字符串里面有内容的话才是 true,没有内容就是 false NaN 是一种数值类型,已经是 false 了,只是为了让程序继续往下面走 其他解析:..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-01T10:22:41.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:tag","content":"笔面试"}],["meta",{"property":"article:modified_time","content":"2024-08-01T10:22:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"boolean类型转换\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-01T10:22:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[],"git":{"createdTime":1722507761000,"updatedTime":1722507761000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":1}]},"readingTime":{"minutes":0.63,"words":189},"filePathRelative":"学习笔记/boolean-type-changed.md","localizedDate":"2024年8月1日","excerpt":"<div class=\\"language-html\\" data-ext=\\"html\\" data-title=\\"html\\"><pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>html</span><span class=\\"token punctuation\\">&gt;</span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>body</span><span class=\\"token punctuation\\">&gt;</span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text/javascript<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n      <span class=\\"token keyword\\">var</span> test <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Boolean</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span>test<span class=\\"token punctuation\\">)</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'&lt;br /&gt;'</span><span class=\\"token punctuation\\">)</span>\\n\\n      <span class=\\"token keyword\\">var</span> test <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Boolean</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span>test<span class=\\"token punctuation\\">)</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'&lt;br /&gt;'</span><span class=\\"token punctuation\\">)</span>\\n\\n      <span class=\\"token keyword\\">var</span> test <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Boolean</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span>test<span class=\\"token punctuation\\">)</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'&lt;br /&gt;'</span><span class=\\"token punctuation\\">)</span>\\n\\n      <span class=\\"token keyword\\">var</span> test <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Boolean</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span>test<span class=\\"token punctuation\\">)</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'&lt;br /&gt;'</span><span class=\\"token punctuation\\">)</span>\\n\\n      <span class=\\"token keyword\\">var</span> test <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Boolean</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">NaN</span><span class=\\"token punctuation\\">)</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span>test<span class=\\"token punctuation\\">)</span>\\n      document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'&lt;br /&gt;'</span><span class=\\"token punctuation\\">)</span>\\n    </span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">&gt;</span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>body</span><span class=\\"token punctuation\\">&gt;</span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>html</span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre></div>","autoDesc":true}`);export{r as comp,d as data};
