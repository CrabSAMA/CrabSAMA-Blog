import{_ as i,c as e,i as a,o as t}from"./app-BZ5zTE17.js";const n={};function l(r,s){return t(),e("div",null,s[0]||(s[0]=[a(`<h1 id="react-严格模式" tabindex="-1"><a class="header-anchor" href="#react-严格模式"><span>React 严格模式</span></a></h1><p>在刚开始使用 react 开发应用时，会发现 react 有一个奇怪的现象，就是 useEffect 等 api 会在开发环境执行两次。我们一般习惯在将 useEffect 类比成 Vue 里面的 mounted 生命周期函数，在里面进行一些初始化操作，例如接口请求等。此时就会发现，在开发环境中，接口会被调用两次。在参考了官方文档和询问了 gpt 后，才知道这是 react 的严格模式导致的。</p><h2 id="官方文档" tabindex="-1"><a class="header-anchor" href="#官方文档"><span>官方文档</span></a></h2><p><a href="https://zh-hans.react.dev/reference/react/StrictMode#fixing-bugs-found-by-double-rendering-in-development" target="_blank" rel="noopener noreferrer">https://zh-hans.react.dev/reference/react/StrictMode#fixing-bugs-found-by-double-rendering-in-development</a></p><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" data-title="tsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>react 中这种情况会打印两个 1，是因为在开发环境中开启了严格模式</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" data-title="tsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ReactDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createRoot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;root&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">React.StrictMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">React.StrictMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gpt-回答" tabindex="-1"><a class="header-anchor" href="#gpt-回答"><span>GPT 回答</span></a></h2><p>在 React 组件中，出现打印两次 <code>console.log(1)</code> 的情况，通常是因为 React 的严格模式（Strict Mode）导致的。React 的严格模式会在开发环境中对某些生命周期方法进行额外的调用，以帮助开发者发现潜在的问题。</p><p>具体来说，React 的严格模式会在开发环境中对以下方法进行额外的调用：</p><ol><li><code>constructor</code></li><li><code>render</code></li><li><code>shouldComponentUpdate</code></li><li><code>getDerivedStateFromProps</code></li><li><code>getSnapshotBeforeUpdate</code></li><li>以及函数组件的主体部分</li></ol><p>严格模式会在初次渲染时调用这些方法两次，以确保这些方法是纯函数（即不产生副作用）。这意味着在严格模式下，函数组件的主体部分（包括你在其中的 <code>console.log(1)</code>）会被调用两次。</p><p>你可以通过检查你的应用是否在严格模式下运行来验证这一点。严格模式通常是通过在应用的根组件中使用 <code>&lt;React.StrictMode&gt;</code> 包裹组件来启用的。例如：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> React</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;react&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ReactDOM</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;react-dom&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> App</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./App&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ReactDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">React.StrictMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">React.StrictMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;root&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你移除 <code>&lt;React.StrictMode&gt;</code>，你会发现 <code>console.log(1)</code> 只会被调用一次：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> React</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;react&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ReactDOM</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;react-dom&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> App</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./App&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ReactDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;root&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，严格模式只在开发环境中生效，在生产环境中不会有任何影响。因此，在生产环境中，<code>console.log(1)</code> 只会被调用一次。严格模式的目的是帮助你在开发过程中发现潜在的问题和不纯的副作用。</p><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><p>除了 useEffect 这个 api，在 react 中有一系列的场景都会在开发环境下的严格模式中执行两次：</p><ul><li>组件函数体（仅限顶层逻辑，不包括事件处理程序内的代码）</li><li>传递给 <a href="https://zh-hans.react.dev/reference/react/useState" target="_blank" rel="noopener noreferrer"><code>useState</code></a>、<a href="https://zh-hans.react.dev/reference/react/useState#setstate" target="_blank" rel="noopener noreferrer"><code>set</code> 函数</a>、<a href="https://zh-hans.react.dev/reference/react/useMemo" target="_blank" rel="noopener noreferrer"><code>useMemo</code></a> 或 <a href="https://zh-hans.react.dev/reference/react/useReducer" target="_blank" rel="noopener noreferrer"><code>useReducer</code></a> 的函数。</li><li>部分类组件的方法，例如 <a href="https://zh-hans.react.dev/reference/react/Component#constructor" target="_blank" rel="noopener noreferrer"><code>constructor</code></a>、<a href="https://zh-hans.react.dev/reference/react/Component#render" target="_blank" rel="noopener noreferrer"><code>render</code></a>、<a href="https://zh-hans.react.dev/reference/react/Component#shouldcomponentupdate" target="_blank" rel="noopener noreferrer"><code>shouldComponentUpdate</code></a> 等（<a href="https://reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects" target="_blank" rel="noopener noreferrer">请参阅完整列表</a>）。</li></ul><p>因此在遇到此类问题的时候，可以先往这个方向思考，同时对函数进行改造，改造为没有副作用的纯函数。</p>`,22)]))}const p=i(n,[["render",l],["__file","react-strict-mode.html.vue"]]),d=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react-strict-mode.html","title":"React严格模式","lang":"zh-CN","frontmatter":{"title":"React严格模式","date":"2024-08-01T08:41:55.000Z","category":["学习笔记"],"tag":["React"],"description":"React 严格模式 在刚开始使用 react 开发应用时，会发现 react 有一个奇怪的现象，就是 useEffect 等 api 会在开发环境执行两次。我们一般习惯在将 useEffect 类比成 Vue 里面的 mounted 生命周期函数，在里面进行一些初始化操作，例如接口请求等。此时就会发现，在开发环境中，接口会被调用两次。在参考了官方文档...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/react-strict-mode.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"React严格模式"}],["meta",{"property":"og:description","content":"React 严格模式 在刚开始使用 react 开发应用时，会发现 react 有一个奇怪的现象，就是 useEffect 等 api 会在开发环境执行两次。我们一般习惯在将 useEffect 类比成 Vue 里面的 mounted 生命周期函数，在里面进行一些初始化操作，例如接口请求等。此时就会发现，在开发环境中，接口会被调用两次。在参考了官方文档..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-29T07:33:27.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:published_time","content":"2024-08-01T08:41:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-29T07:33:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React严格模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-01T08:41:55.000Z\\",\\"dateModified\\":\\"2024-09-29T07:33:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"官方文档","slug":"官方文档","link":"#官方文档","children":[]},{"level":2,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":2,"title":"GPT 回答","slug":"gpt-回答","link":"#gpt-回答","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}],"git":{"createdTime":1724313559000,"updatedTime":1727595207000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":2}]},"readingTime":{"minutes":2.62,"words":785},"filePathRelative":"学习笔记/react-strict-mode.md","localizedDate":"2024年8月1日","excerpt":"\\n<p>在刚开始使用 react 开发应用时，会发现 react 有一个奇怪的现象，就是 useEffect 等 api 会在开发环境执行两次。我们一般习惯在将 useEffect 类比成 Vue 里面的 mounted 生命周期函数，在里面进行一些初始化操作，例如接口请求等。此时就会发现，在开发环境中，接口会被调用两次。在参考了官方文档和询问了 gpt 后，才知道这是 react 的严格模式导致的。</p>\\n<h2>官方文档</h2>\\n<p><a href=\\"https://zh-hans.react.dev/reference/react/StrictMode#fixing-bugs-found-by-double-rendering-in-development\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://zh-hans.react.dev/reference/react/StrictMode#fixing-bugs-found-by-double-rendering-in-development</a></p>","autoDesc":true}');export{p as comp,d as data};
