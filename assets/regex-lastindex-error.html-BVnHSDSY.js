import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as p,c as l,a as e,b as n,d as a,e as t}from"./app-DMXpJ-m3.js";const r={},i=t(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 用于匹配是否被 i18n 块包裹</span>
<span class="token keyword">const</span> i18nKeyPattern <span class="token operator">=</span>
  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:i18n(?:-\\w+)?[ (\\n]\\s*(?:key)?path=|v-t=[&#39;&quot;\`{]|(?:this\\.|\\$|i18n\\.|[^\\w\\d])(?:t|tc|te)\\()\\s*[&#39;&quot;\`](.*?)[&#39;&quot;\`]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;$t(&#39;当有效期结束时间到了，是否直接下线？&#39;)&quot;</span>

<span class="token comment">// Array(2) [&quot;$t(&#39;当有效期结束时间到了，是否直接下线？&#39;&quot;, &quot;当有效期结束时间到了，是否直接下线？&quot;]</span>
i18nKeyPattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token comment">// null</span>
i18nKeyPattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

<span class="token comment">// true</span>
i18nKeyPattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token comment">// false</span>
i18nKeyPattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用正则表达式判断时，会发现调用 <code>exec</code> 方法和 <code>test</code> 方法，每一次的调用结果并不一样。</p><h2 id="原因" tabindex="-1"><a class="header-anchor" href="#原因"><span>原因</span></a></h2><p>在 MDN 文档上，我们可以看到一个点：</p>`,5),d=e("p",null,[e("code",null,"exec()"),n("：")],-1),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"global",-1),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"sticky",-1),g=e("code",null,"/foo/g",-1),b=e("code",null,"/foo/y",-1),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"RegExp",-1),f=e("em",null,"有状态",-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"lastIndex",-1),E=e("code",null,"exec()",-1),z=e("p",null,[e("code",null,"test()"),n("：")],-1),S={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test",target:"_blank",rel:"noopener noreferrer"},A=e("code",null,"test()",-1),N={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex",target:"_blank",rel:"noopener noreferrer"},C=e("code",null,"lastIndex",-1),w=e("code",null,"test()",-1),J={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec",target:"_blank",rel:"noopener noreferrer"},j=e("code",null,"exec()",-1),O=e("code",null,"lastIndex 属性值",-1),P=t(`<p>关键点其实在于，如果使用正则表达式时设置了全局标识，同时复用<strong>同一个正则表达式对象</strong>对多个字符串进行匹配时，就会出现这个问题。关键点在于 <code>lastIndex</code> 属性其实是正则表达式对象里面的一个属性。</p><h2 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法"><span>解决方法</span></a></h2><ol><li><p>使用 <code>String.prototype.match()</code> 或 <code>String.prototype.matchAll()</code> 方法代替</p></li><li><p>重写一个方法，在每次匹配完成后手动地将 <code>lastIndex</code> 属性重置为 0</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 正则无记忆方法</span>
RegExp<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">TestNoRecord</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">return</span> ret
<span class="token punctuation">}</span>
RegExp<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">ExecNoRecord</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">return</span> ret
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,3);function q(G,I){const s=c("ExternalLinkIcon");return p(),l("div",null,[i,e("blockquote",null,[d,e("p",null,[e("a",u,[n("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec"),a(s)])]),e("p",null,[n("在设置了 "),e("a",k,[m,a(s)]),n(" 或 "),e("a",h,[v,a(s)]),n(" 标志位的情况下（如 "),g,n(" 或 "),b,n("），JavaScript "),e("a",_,[x,a(s)]),n(" 对象是"),f,n("的。它们会将上次成功匹配后的位置记录在 "),e("a",y,[R,a(s)]),n(" 属性中。使用此特性，"),E,n(" 可用来对单个字符串中的多次匹配结果进行逐条的遍历（包括捕获到的匹配）")]),z,e("p",null,[e("a",S,[n("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test"),a(s)])]),e("p",null,[n("如果正则表达式设置了全局标志，"),A,n(" 的执行会改变正则表达式 "),e("a",N,[C,a(s)]),n("属性。连续的执行"),w,n("方法，后续的执行将会从 lastIndex 处开始匹配字符串，("),e("a",J,[j,a(s)]),n(" 同样改变正则本身的 "),O,n(").")])]),P])}const T=o(r,[["render",q],["__file","regex-lastindex-error.html.vue"]]),B=JSON.parse(`{"path":"/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/regex-lastindex-error.html","title":"正则表达式运行多次结果不一样","lang":"zh-CN","frontmatter":{"title":"正则表达式运行多次结果不一样","date":"2023-10-19T06:18:20.000Z","category":["解决方案"],"tag":["正则表达式","JavaScript"],"description":"背景 在使用正则表达式判断时，会发现调用 exec 方法和 test 方法，每一次的调用结果并不一样。 原因 在 MDN 文档上，我们可以看到一个点： exec()： https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec ...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/regex-lastindex-error.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"正则表达式运行多次结果不一样"}],["meta",{"property":"og:description","content":"背景 在使用正则表达式判断时，会发现调用 exec 方法和 test 方法，每一次的调用结果并不一样。 原因 在 MDN 文档上，我们可以看到一个点： exec()： https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-05T09:14:26.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"正则表达式"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2023-10-19T06:18:20.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-05T09:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则表达式运行多次结果不一样\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-19T06:18:20.000Z\\",\\"dateModified\\":\\"2024-08-05T09:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"原因","slug":"原因","link":"#原因","children":[]},{"level":2,"title":"解决方法","slug":"解决方法","link":"#解决方法","children":[]}],"git":{"createdTime":1722507761000,"updatedTime":1722849266000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":3}]},"readingTime":{"minutes":1.76,"words":528},"filePathRelative":"解决方案/regex-lastindex-error.md","localizedDate":"2023年10月19日","excerpt":"<h2>背景</h2>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token comment\\">// 用于匹配是否被 i18n 块包裹</span>\\n<span class=\\"token keyword\\">const</span> i18nKeyPattern <span class=\\"token operator\\">=</span>\\n  <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">(?:i18n(?:-\\\\w+)?[ (\\\\n]\\\\s*(?:key)?path=|v-t=['\\"\`{]|(?:this\\\\.|\\\\$|i18n\\\\.|[^\\\\w\\\\d])(?:t|tc|te)\\\\()\\\\s*['\\"\`](.*?)['\\"\`]</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">gm</span></span>\\n<span class=\\"token keyword\\">const</span> str <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"$t('当有效期结束时间到了，是否直接下线？')\\"</span>\\n\\n<span class=\\"token comment\\">// Array(2) [\\"$t('当有效期结束时间到了，是否直接下线？'\\", \\"当有效期结束时间到了，是否直接下线？\\"]</span>\\ni18nKeyPattern<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exec</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// null</span>\\ni18nKeyPattern<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exec</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">// true</span>\\ni18nKeyPattern<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// false</span>\\ni18nKeyPattern<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{T as comp,B as data};
