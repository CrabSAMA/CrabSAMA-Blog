import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as s,i as t}from"./app-DrSuNM76.js";const n={},a=t(`<blockquote><p>先上一个 github 地址 <a href="https://github.com/unjs/unplugin" target="_blank" rel="noopener noreferrer">https://github.com/unjs/unplugin</a></p></blockquote><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>前端工具链生态是日新月异，很多人 <code>webpack</code> 都还没玩熟悉呢，新的 <code>vite</code> 都要出到 3.0 了，再说 <code>vite</code> 是基于 <code>rollup</code> 和 <code>esbuild</code> 的吧，这些个工具都各有优劣，都是要学习的东西。但在我看来，这些工具都有一个共同的特点：都是<strong>打包工具</strong>。打包工具需要做的事情就很简单，接收输入的文件，输出成我们想要的东西，这其中还包含了可以通过不同的插件实现对输入文件的处理，以实现混淆、注入等功能；同时打包工具大多都提供了许多<strong>钩子</strong>（<code>hook</code>），贯穿整个打包流程，也方便了我们对打包过程的关注和额外处理。百变不离其宗，<code>webpack</code> 有 <code>loader</code> 和 <code>plugin</code>，<code>vite</code> 扩展了设计出色的 <code>Rollup</code> 接口，还带了一些 <code>vite</code> 独特的配置项，因此有人就有了写一次代码，适配多个 <code>bundler</code> 的想法，<code>unplugin</code> 就是这样一个存在。</p><h2 id="unplugin" tabindex="-1"><a class="header-anchor" href="#unplugin"><span><code>unplugin</code></span></a></h2><p>由于 <code>contributors</code> 大多是 <code>vite</code> 团队出身，因此 <code>unplugin</code> 也是继承了 <code>rollup</code> 的 <code>plugin api</code>作为基础，通过在它提供的 <code>hook</code> 上实现具体的代码逻辑，<code>unplugin</code> 会帮你做一层转换以适配各个 <code>bundler</code>，本质上我理解还是一个<strong>适配器模式</strong>的思想。</p><p>来个官方的 README 中的表格，具体支持的 <code>hook</code> 如下。</p><table><thead><tr><th>Hook</th><th>Rollup</th><th>Vite</th><th>Webpack 4</th><th>Webpack 5</th><th>esbuild</th></tr></thead><tbody><tr><td><a href="https://rollupjs.org/guide/en/#buildstart" target="_blank" rel="noopener noreferrer"><code>buildStart</code></a></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td><a href="https://rollupjs.org/guide/en/#buildend" target="_blank" rel="noopener noreferrer"><code>buildEnd</code></a></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td><code>transformInclude</code>1</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td><a href="https://rollupjs.org/guide/en/#transformers" target="_blank" rel="noopener noreferrer"><code>transform</code></a></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅ 3</td></tr><tr><td><a href="https://rollupjs.org/guide/en/#enforce" target="_blank" rel="noopener noreferrer"><code>enforce</code></a></td><td>❌ 2</td><td>✅</td><td>✅</td><td>✅</td><td>❌ 2</td></tr><tr><td><a href="https://rollupjs.org/guide/en/#resolveid" target="_blank" rel="noopener noreferrer"><code>resolveId</code></a></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td><a href="https://rollupjs.org/guide/en/#load" target="_blank" rel="noopener noreferrer"><code>load</code></a></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅ 3</td></tr><tr><td><a href="https://rollupjs.org/guide/en/#watchchange" target="_blank" rel="noopener noreferrer"><code>watchChange</code></a></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr></tbody></table><p>基于这么一个框架，方便了许多人去写 <code>bundler</code> 的二次开发，有许多新的插件基于 <code>unplugin</code> 实现，我觉得这是一个十分方便的东西，并且也没有特别复杂，所以可以来看看它的具体实现。</p><h2 id="具体实现" tabindex="-1"><a class="header-anchor" href="#具体实现"><span>具体实现</span></a></h2><p><code>unplugin</code> 提供了一个 <code>createUnplugin</code> 的工厂函数，这个工厂函数接收一个入参为 <code>options</code> 的方法：</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createUnplugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserOptions</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}&gt;(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  factory</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UnpluginFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UnpluginInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">    get</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> esbuild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getEsbuildPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">factory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">    get</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> rollup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getRollupPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">factory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">    get</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> vite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getVitePlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">factory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">    get</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> webpack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getWebpackPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">factory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">    get</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> raw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> factory</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们以熟悉的 <code>vite</code> 为例，定位到 <code>getVitePlugin</code> 函数内，发现这个函数实现的功能很简单，就只是将 <code>factory</code> 函数返回的东西传给 <code>toRollupPlugin</code>，而 <code>toRollupPlugin</code> 也仅仅是将 <code>transform</code> 这个 <code>hook</code> 调用了一遍，同时合并了一些配置，这其实也很容易理解，因为本质上 <code>vite</code> 是对 <code>rollup</code> 的上层封装，而正好 <code>unplugin</code> 也是基于 <code>rollup</code> 的 <code>api</code> 往外提供公共的 <code>hook</code>，因此这其中不用做什么转换，直接调用就好了。</p><p>那这样说的话，感觉 <code>webpack</code> 处理会比较复杂，可以接下来看看 <code>webpack</code> 的处理方案。</p>`,13),d=[a];function l(r,p){return s(),i("div",null,d)}const c=e(n,[["render",l],["__file","unplugin.html.vue"]]),k=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/unplugin.html","title":"聊聊unplugin","lang":"zh-CN","frontmatter":{"title":"聊聊unplugin","date":"2022-08-03T02:38:40.000Z","category":["学习笔记"],"tag":["前端工程化","rollup","vite","webpack"],"description":"先上一个 github 地址 https://github.com/unjs/unplugin 前言 前端工具链生态是日新月异，很多人 webpack 都还没玩熟悉呢，新的 vite 都要出到 3.0 了，再说 vite 是基于 rollup 和 esbuild 的吧，这些个工具都各有优劣，都是要学习的东西。但在我看来，这些工具都有一个共同的特点：都是...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/unplugin.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"聊聊unplugin"}],["meta",{"property":"og:description","content":"先上一个 github 地址 https://github.com/unjs/unplugin 前言 前端工具链生态是日新月异，很多人 webpack 都还没玩熟悉呢，新的 vite 都要出到 3.0 了，再说 vite 是基于 rollup 和 esbuild 的吧，这些个工具都各有优劣，都是要学习的东西。但在我看来，这些工具都有一个共同的特点：都是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-05T09:14:26.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"前端工程化"}],["meta",{"property":"article:tag","content":"rollup"}],["meta",{"property":"article:tag","content":"vite"}],["meta",{"property":"article:tag","content":"webpack"}],["meta",{"property":"article:published_time","content":"2022-08-03T02:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-05T09:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"聊聊unplugin\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-03T02:38:40.000Z\\",\\"dateModified\\":\\"2024-08-05T09:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"unplugin","slug":"unplugin","link":"#unplugin","children":[]},{"level":2,"title":"具体实现","slug":"具体实现","link":"#具体实现","children":[]}],"git":{"createdTime":1679047229000,"updatedTime":1722849266000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":3}]},"readingTime":{"minutes":2.45,"words":735},"filePathRelative":"学习笔记/unplugin.md","localizedDate":"2022年8月3日","excerpt":"<blockquote>\\n<p>先上一个 github 地址 <a href=\\"https://github.com/unjs/unplugin\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/unjs/unplugin</a></p>\\n</blockquote>\\n<h2>前言</h2>\\n<p>前端工具链生态是日新月异，很多人 <code>webpack</code> 都还没玩熟悉呢，新的 <code>vite</code> 都要出到 3.0 了，再说 <code>vite</code> 是基于 <code>rollup</code> 和 <code>esbuild</code> 的吧，这些个工具都各有优劣，都是要学习的东西。但在我看来，这些工具都有一个共同的特点：都是<strong>打包工具</strong>。打包工具需要做的事情就很简单，接收输入的文件，输出成我们想要的东西，这其中还包含了可以通过不同的插件实现对输入文件的处理，以实现混淆、注入等功能；同时打包工具大多都提供了许多<strong>钩子</strong>（<code>hook</code>），贯穿整个打包流程，也方便了我们对打包过程的关注和额外处理。百变不离其宗，<code>webpack</code> 有 <code>loader</code> 和 <code>plugin</code>，<code>vite</code> 扩展了设计出色的 <code>Rollup</code> 接口，还带了一些 <code>vite</code> 独特的配置项，因此有人就有了写一次代码，适配多个 <code>bundler</code> 的想法，<code>unplugin</code> 就是这样一个存在。</p>","autoDesc":true}');export{c as comp,k as data};
