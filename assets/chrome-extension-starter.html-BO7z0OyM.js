import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as i,a as n,b as s,d as e,e as o}from"./app-CzTMLA3i.js";const l={},u=n("p",null,"照惯例，先上篇参考文章：",-1),d={href:"https://juejin.cn/post/7115201075803586574",target:"_blank",rel:"noopener noreferrer"},r=n("p",null,"这是一个作者写的系列文章，帮助了我很多，在此感谢~",-1),k=o(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>项目中新需求开发，往往会有接口的新增，然后我们一般要手动去 <code>UAC</code> 手动录资源，这个过程比较繁琐而且容易遗漏，再加上 <code>UAC</code> 越更新是越不好用了，因此我手动写了一个 <code>cli</code> 来处理这个事情，但发现 <code>cli</code> 还是不够智能和好用，最后想到的就是 <code>chrome extension</code>，可以取 <code>cookie</code>、发请求、获取 <code>DOM</code>，最重要的是它也在浏览器，会比较地一体化。</p><h2 id="起步" tabindex="-1"><a class="header-anchor" href="#起步"><span>起步</span></a></h2><p>在查阅了文章后，了解到拓展其实本质上也是一个 <code>js</code> 应用，提供了用户界面、状态管理、生命周期和 <code>chrome</code> 的一些 <code>api</code>。</p><p>首先要了解的是 <code>manifest.json</code>，这是拓展的一个描述文件，<code>chrome </code>通过读取该文件的内容来实现我们拓展的功能与展示。具体配置这里不赘述了，直接上一个比较简洁的版本：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;manifest_version&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;UAC Extensions&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;自动识别 knife4j 接口文档，添加到 uac 资源中&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;icons&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;16&quot;</span><span class="token operator">:</span> <span class="token string">&quot;image/icon.png&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;48&quot;</span><span class="token operator">:</span> <span class="token string">&quot;image/icon.png&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;128&quot;</span><span class="token operator">:</span> <span class="token string">&quot;image/icon.png&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;browser_action&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;default_icon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;image/icon.png&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;default_popup&quot;</span><span class="token operator">:</span> <span class="token string">&quot;popup.html&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;default_title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;🤖&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面只包含基础的配置项，指定了图标的指向，还有一个 <code>html</code> 文件。这里这个 <code>html</code> 文件其实就是点击拓展弹窗的页面，因此我们的目录结构可以这样组织：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>├── image
│   └── icon<span class="token punctuation">.</span>png
├── js
│   ├── main<span class="token punctuation">.</span>js
├── manifest<span class="token punctuation">.</span>json
├── popup<span class="token punctuation">.</span>html
└── styles
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>tips:</strong> 更改 <code>popup.html</code> 和其引入的 <code>js</code> 代码后无需重新打包，只需要点击右上角插件icon再次开启关闭即可。（其他文件会有例外哦）</p><h2 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶"><span>进阶</span></a></h2><p>因为我的技术栈是 <code>Vue</code> ，很自然地我就想用 <code>Vue</code> 来写这个应用。那接下来我要引入 <code>Vue</code> 和 <code>ant-design-vue</code>，这里面有两种方法：一种就是像平时一样，通过 <code>webpack</code> 或者 <code>vite</code> 将应用打包，另一种就是直接编写原生 <code>js</code> 代码，通过 <code>CDN</code> 直接引入对应的文件。这里因为是刚起步，选择了较为简单的 <code>CDN</code> 引入。虽然是说简单，但是这其中也遇到了不少坑，这里我们来记录一下。</p><h3 id="不支持行内-script" tabindex="-1"><a class="header-anchor" href="#不支持行内-script"><span>不支持行内 <code>script</code></span></a></h3><p>由于拓展的限制，拓展是不支持直接在 <code>html</code> 里面写行内 <code>script</code> 的，因此我们都需要将 <code>js</code> 代码写到一个独立的文件中，然后在 <code>html</code> 中通过 <code>script</code> 标签引入。</p><h3 id="引入-vue" tabindex="-1"><a class="header-anchor" href="#引入-vue"><span>引入 <code>Vue</code></span></a></h3><p>直接引入 <code>js</code> 会报这个错误：<code>Note that &#39;script-src&#39; was not explicitly set, so &#39;default-src&#39; is used as a fallback.</code>意思是你要声明引入的文件路径，因此我们需要在 <code>manifest.json</code> 里面添加这一行：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;content_security_policy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;script-src &#39;self&#39; &#39;unsafe-eval&#39;; object-src &#39;self&#39;;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>感觉是 <code>Vue</code> 有用到一些渲染的 <code>api</code>，被谷歌认为不安全，因此直接引入 <code>Vue</code> 使用后会报一个错误：<code>Uncaught EvalError: Refused to evaluate a string as JavaScript because ‘unsafe-eval’ is not an allow</code>。同样的，上面那一行可以解决这个问题，但是我更改后没有重新引入拓展，所以导致不生效。</p><p>需要注意的是：修改了 <code>manifest.json</code>，不是马上生效的，要删除拓展并重新引入后才会生效。</p><h3 id="状态持久化" tabindex="-1"><a class="header-anchor" href="#状态持久化"><span>状态持久化</span></a></h3><p>在 <code>Vue</code> 中声明了一些 <code>data</code> 并通过操作使数据变更了，但是拓展一开一关，哎发现数据没掉了，证明其实每次打开和关闭都等于销毁了整个 <code>html</code>，那很自然地我们会想到要将数据持久化，这样就涉及到下面的两个概念了：</p><p><strong>生命周期：</strong> 拓展弹出的界面的完整周期只有它展示在界面的那段时间(有点废话)，也就是说，拓展在关闭重新打开后，它的函数也跟着重新刷新，页面也重新渲染，这也就是重新打开后数字变回了0以及控制台自动消失的原因，对于这点你也可以类比我们的<code>chrome</code>浏览器。当浏览器关闭时，控制台也会随之消失。那有没有即使插件关闭了，数据不丢失的方法？有的，<code>background.js</code>。</p><p><strong><code>background.js</code>:</strong> 你可以理解为会一直常驻的后台<code>JS</code>或后台页面，它的生命周期与拓展的<code>default_popup</code>（即拓展弹出页面）不同，只有当<strong>浏览器彻底关闭</strong>时，它的生命周期才会结束，我们可以利用该特性完成我们的需求。</p><p>在 <code>manifest.json</code> 中写入这一行：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;background&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;js/background.js&quot;</span><span class="token punctuation">]</span> <span class="token comment">//注意引用路径</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>background.js</code> 中写：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为我们用的是 <code>Vue</code> ，在 <code>mounted</code> 生命周期中做处理：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> bg <span class="token operator">=</span> chrome<span class="token punctuation">.</span>extension<span class="token punctuation">.</span><span class="token function">getBackgroundPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bg<span class="token punctuation">.</span>value <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>formState <span class="token operator">=</span> bg<span class="token punctuation">.</span>value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过 <code>chrome.extension.getBackgroundPage()</code> 获取到 <code>bg</code> 对象，下面就是 <code>background.js</code> 中的所有属性，直接操作即可。</p><h3 id="获取页面-dom" tabindex="-1"><a class="header-anchor" href="#获取页面-dom"><span>获取页面 <code>DOM</code></span></a></h3><p>拓展弹出页面是一个独立的实例，是没办法直接访问到页面中的数据的，因此我们需要去了解一下拓展与页面间的<strong>通讯机制</strong>。</p><p>在这里我们还需要了解一个概念：<code>content-script</code>。这个是直接插入到页面中的代码，可以在这里面对页面进行很多操作。</p><p>首先需要在 <code>manifest.json</code> 中添加下面的内容：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;content_scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;matches&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;&lt;all_urls&gt;&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;js&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;js/content.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;run_at&quot;</span><span class="token operator">:</span> <span class="token string">&quot;document_end&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面需要解释的其实就只有 <code>matches</code> 和 <code>run_at</code> 两个属性，前者指代在什么页面中才会插入，后者指的是插入的时机，因为我们现在的需求是要获取 <code>DOM</code>，因此我们要在页面加载完成后插入，也就是 <code>document_end</code> 这个时机插入。</p><p>到现在我们会有三个 <code>js</code> 文件了，分别是 <code>popup.js</code> ——拓展弹窗页面的逻辑；<code>background.js</code>——拓展后台生命周期的逻辑；<code>content.js</code>——插入到页面中的逻辑。这三者之间就通过 <code>chrome</code> 提供的消息 <code>api</code> 进行通信。</p><p>接下来我们来说通讯机制，这里其实分成几种情况：</p><ul><li><p><code>popup</code> 与 <code>background</code></p><p><code>popup</code> -&gt; <code>background</code>：上面已经说过这种情况了，我们直接通过 <code>chrome.extension.getBackgroundPage()</code> 获取到相应对象就可以进行操作啦~</p><p><code>background</code> -&gt; <code>popup</code>：一般比较少这种情况，因此本文先省略。</p><blockquote><p><strong>tips</strong>:注意，V3版本中<code>getBackgroundPage</code>方法不再适用，笔者在尝试中发现返回了<code>undefined</code>。相互通信建议使用<code>chrome.runtime.sendMessage</code> &amp; <code>chrome.runtime.sendMessage</code>。笔者因为一直使用V2版本，结果今天尝试使用V3实践时遇到了很多坑点，且V2版本在2023年即将弃用，建议多看看官方文档。</p></blockquote></li><li><p><code>popup</code> 与 <code>content</code></p><p><code>popup</code> -&gt; <code>content</code>：这就是这一段的重点，我们需要在 <code>popup</code> 中获取到 <code>DOM</code>，因此需要 <code>popup</code> 向 <code>content</code> 发送一个消息，告诉 <code>content</code> 去找对应的 <code>DOM</code>。</p><p>下面直接上代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// popup.js</span>
<span class="token comment">// 因为 chrome 有很多个标签页，因此我们需要找到真正需要通信的 tab</span>
chrome<span class="token punctuation">.</span>tabs<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">active</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">currentWindow</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tabs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 找到之后，通过 sendMessage 发送消息</span>
  chrome<span class="token punctuation">.</span>tabs<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>tabs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">&#39;getData&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 接收返回的消息</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;收到来自后台的回复：&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// content.js</span>
<span class="token comment">// 注册一个 listener 来接受消息</span>
chrome<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>onMessage<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> sendResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">===</span> <span class="token string">&#39;getData&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> sender<span class="token punctuation">)</span> <span class="token comment">//request即为收到的消息，sender为发送源所在的页面，</span>
    <span class="token comment">// 这下面就是心心念念的 DOM 操作啦</span>
    <span class="token keyword">const</span> nameList <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>
      document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.knife4j-api-title&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span>
    <span class="token keyword">const</span> keyList <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>
      document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.knife4j-api-summary-path&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span>
    <span class="token keyword">const</span> selectList <span class="token operator">=</span> nameList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> val<span class="token punctuation">,</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> index<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 注意，通信只能传字符串，因此需要 stringify 后再传输</span>
    <span class="token function">sendResponse</span><span class="token punctuation">(</span>
      <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        nameList<span class="token punctuation">,</span>
        keyList<span class="token punctuation">,</span>
        selectList<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token comment">//sendResponse为收到消息后的回调函数</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全部完成之后就可以去浏览器查看结果啦~</p></li><li><p><code>background</code> 与 <code>content</code></p><p>本质上和上面的操作差不多，通过这两个 <code>API</code> 实现：<code>chrome.runtime.sendMessage</code> 和 <code>chrome.runtime.onMessage.addListener</code>。</p></li></ul><h3 id="获取页面-cookie" tabindex="-1"><a class="header-anchor" href="#获取页面-cookie"><span>获取页面 <code>cookie</code></span></a></h3><p><code>cookie</code> 是一个敏感属性，因此我们需要在 <code>manifest.json</code> 中声明，告诉 <code>chrome</code> 我需要获取，不然直接获取到的 <code>cookie</code> 对象就是 <code>undefined</code>。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;permissions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;storage&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cookies&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里声明了我要获取页面中的 <code>storage</code> 和 <code>cookie</code> 。</p>`,42),m=n("code",null,"api",-1),v={href:"http://www.kkh86.com/it/chrome-extension-doc/extensions/cookies.html",target:"_blank",rel:"noopener noreferrer"},g=o(`<p>然后可以通过 <code>chrome.cookie.getAll</code> 来获取，具体代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 这里的对象是筛选条件，具体可以参考谷歌官方的 api 文档</span>
chrome<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;_hll_identifier_stg&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cookie</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里拿到的 cookie 是一个数组，因为我调的是 getAll</span>
    <span class="token keyword">const</span> found <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> val<span class="token punctuation">.</span>domain<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;.domain.com&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> uacCookie <span class="token operator">=</span> found<span class="token punctuation">.</span>value
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以提醒一下，<code>chrome</code> 提供的这些 <code>api</code> 基本都是通过回调的方式拿到结果的，默认的 <code>this</code> 指向不是 <code>Vue</code> 实例本身，因此在回调函数中如果想要获取 <code>Vue</code> 的 <code>this</code>，需要先在外层拿到并存起来，再在回调函数使用哟。</p><h3 id="接口请求" tabindex="-1"><a class="header-anchor" href="#接口请求"><span>接口请求</span></a></h3><p>同理，接口请求也是一个危险的操作，因此我们也需要在 <code>manifest.json</code> 中声明：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;permissions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;*://*/&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里直接使用通配符，告诉 <code>chrome</code> 我可以访问任何地址。</p><p>在声明了之后，可以通过原生的 <code>XMLHttpRequest</code> 来请求，也可以引入 <code>axios</code> 来进行网络请求，接下来就看开发者自由发挥啦~</p>`,8);function b(h,j){const a=p("ExternalLinkIcon");return c(),i("div",null,[n("blockquote",null,[u,n("p",null,[n("a",d,[s("关于chrome拓展开发的实践与思考(一) - 掘金 (juejin.cn)"),e(a)])]),r]),k,n("p",null,[s("可以了解一下相关的 "),m,s(" 再进行下一步操作~"),n("a",v,[s("chrome.cookies - Google Chrome 扩展程序开发文档（非官方中文版） (kkh86.com)"),e(a)])]),g])}const y=t(l,[["render",b],["__file","chrome-extension-starter.html.vue"]]),x=JSON.parse('{"path":"/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE/chrome-extension-starter.html","title":"来写一个 chrome extension","lang":"zh-CN","frontmatter":{"title":"来写一个 chrome extension","date":"2022-08-12T09:58:40.000Z","category":["实际项目","经验","前端开发"],"tag":["扩展程序"],"description":"照惯例，先上篇参考文章： 关于chrome拓展开发的实践与思考(一) - 掘金 (juejin.cn) 这是一个作者写的系列文章，帮助了我很多，在此感谢~ 背景 项目中新需求开发，往往会有接口的新增，然后我们一般要手动去 UAC 手动录资源，这个过程比较繁琐而且容易遗漏，再加上 UAC 越更新是越不好用了，因此我手动写了一个 cli 来处理这个事情，但...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE/chrome-extension-starter.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"来写一个 chrome extension"}],["meta",{"property":"og:description","content":"照惯例，先上篇参考文章： 关于chrome拓展开发的实践与思考(一) - 掘金 (juejin.cn) 这是一个作者写的系列文章，帮助了我很多，在此感谢~ 背景 项目中新需求开发，往往会有接口的新增，然后我们一般要手动去 UAC 手动录资源，这个过程比较繁琐而且容易遗漏，再加上 UAC 越更新是越不好用了，因此我手动写了一个 cli 来处理这个事情，但..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-18T04:29:56.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"扩展程序"}],["meta",{"property":"article:published_time","content":"2022-08-12T09:58:40.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-18T04:29:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"来写一个 chrome extension\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-12T09:58:40.000Z\\",\\"dateModified\\":\\"2023-03-18T04:29:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"起步","slug":"起步","link":"#起步","children":[]},{"level":2,"title":"进阶","slug":"进阶","link":"#进阶","children":[{"level":3,"title":"不支持行内 script","slug":"不支持行内-script","link":"#不支持行内-script","children":[]},{"level":3,"title":"引入 Vue","slug":"引入-vue","link":"#引入-vue","children":[]},{"level":3,"title":"状态持久化","slug":"状态持久化","link":"#状态持久化","children":[]},{"level":3,"title":"获取页面 DOM","slug":"获取页面-dom","link":"#获取页面-dom","children":[]},{"level":3,"title":"获取页面 cookie","slug":"获取页面-cookie","link":"#获取页面-cookie","children":[]},{"level":3,"title":"接口请求","slug":"接口请求","link":"#接口请求","children":[]}]}],"git":{"createdTime":1679071923000,"updatedTime":1679113796000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":2}]},"readingTime":{"minutes":7.92,"words":2377},"filePathRelative":"实际项目/chrome-extension-starter.md","localizedDate":"2022年8月12日","excerpt":"<blockquote>\\n<p>照惯例，先上篇参考文章：</p>\\n<p><a href=\\"https://juejin.cn/post/7115201075803586574\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">关于chrome拓展开发的实践与思考(一) - 掘金 (juejin.cn)</a></p>\\n<p>这是一个作者写的系列文章，帮助了我很多，在此感谢~</p>\\n</blockquote>\\n<h2>背景</h2>\\n<p>项目中新需求开发，往往会有接口的新增，然后我们一般要手动去 <code>UAC</code> 手动录资源，这个过程比较繁琐而且容易遗漏，再加上 <code>UAC</code> 越更新是越不好用了，因此我手动写了一个 <code>cli</code> 来处理这个事情，但发现 <code>cli</code> 还是不够智能和好用，最后想到的就是 <code>chrome extension</code>，可以取 <code>cookie</code>、发请求、获取 <code>DOM</code>，最重要的是它也在浏览器，会比较地一体化。</p>","autoDesc":true}');export{y as comp,x as data};
