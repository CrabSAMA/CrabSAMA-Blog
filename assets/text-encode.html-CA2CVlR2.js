import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,e as s}from"./app-CzTMLA3i.js";const t={},o=s(`<p>使用<code>NodeJS</code>编写前端工具时，操作得最多的是文本文件，因此也就涉及到了文件编码的处理问题。我们常用的文本编码有<code>UTF8</code>和<code>GBK</code>两种，并且<code>UTF8</code>文件还可能带有<code>BOM</code>。在读取不同编码的文本文件时，需要将文件内容转换为<code>JS</code>使用的<code>UTF8</code>编码字符串后才能正常处理。</p><h2 id="bom的移除" tabindex="-1"><a class="header-anchor" href="#bom的移除"><span>BOM的移除</span></a></h2><p><code>BOM</code>用于标记一个文本文件使用<code>Unicode</code>编码，其本身是一个<code>Unicode</code>字符<code>（&quot;\\\\uFEFF&quot;）</code>，位于文本文件头部。在不同的<code>Unicode</code>编码下，<code>BOM</code>字符对应的二进制字节如下：</p><table><thead><tr><th>Bytes</th><th>Encoding</th></tr></thead><tbody><tr><td>FE FF</td><td>UTF16BE</td></tr><tr><td>FF FF</td><td>UTF16LE</td></tr><tr><td>EF BB BF</td><td>UTF8</td></tr></tbody></table><p>因此，我们可以根据文本文件头几个字节等于啥来判断文件是否包含<code>BOM</code>，以及使用哪种<code>Unicode</code>编码。但是，BOM<code>字符</code>虽然起到了标记文件编码的作用，其本身却不属于文件内容的一部分，如果读取文本文件时不去掉<code>BOM</code>，在某些使用场景下就会有问题。例如我们把几个<code>JS</code>文件合并成一个文件后，如果文件中间含有<code>BOM</code>字符，就会导致浏览器<code>JS</code>语法错误。因此，使用<code>NodeJS</code>读取文本文件时，一般需要去掉<code>BOM</code>。例如，以下代码实现了识别和去除<code>UTF8 BOM</code>的功能。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">readText</span><span class="token punctuation">(</span><span class="token parameter">pathname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> bin <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>bin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0xEF</span> <span class="token operator">&amp;&amp;</span> bin<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0xBB</span> <span class="token operator">&amp;&amp;</span> bin<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0xBF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bin <span class="token operator">=</span> bin<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> bin<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gbk转utf8" tabindex="-1"><a class="header-anchor" href="#gbk转utf8"><span>GBK转UTF8</span></a></h2><p><code>NodeJS</code>支持在读取文本文件时，或者在<code>Buffer</code>转换为字符串时指定文本编码，但遗憾的是，<code>GBK</code>编码不在<code>NodeJS</code>自身支持范围内。因此，一般我们借助<code>iconv-lite</code>这个三方包来转换编码。使用<code>NPM</code>下载该包后，我们可以按下边方式编写一个读取<code>GBK</code>文本文件的函数。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> iconv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;iconv-lite&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">readGBKText</span><span class="token punctuation">(</span><span class="token parameter">pathname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> bin <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> iconv<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>bin<span class="token punctuation">,</span> <span class="token string">&#39;gbk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),c=[o];function p(d,i){return a(),e("div",null,c)}const u=n(t,[["render",p],["__file","text-encode.html.vue"]]),k=JSON.parse('{"path":"/Node.js/text-encode.html","title":"文本编码","lang":"zh-CN","frontmatter":{"title":"文本编码","date":"2020-07-09T02:15:04.000Z","category":["node.js"],"tag":["node.js"],"description":"使用NodeJS编写前端工具时，操作得最多的是文本文件，因此也就涉及到了文件编码的处理问题。我们常用的文本编码有UTF8和GBK两种，并且UTF8文件还可能带有BOM。在读取不同编码的文本文件时，需要将文件内容转换为JS使用的UTF8编码字符串后才能正常处理。 BOM的移除 BOM用于标记一个文本文件使用Unicode编码，其本身是一个Unicode字...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/Node.js/text-encode.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"文本编码"}],["meta",{"property":"og:description","content":"使用NodeJS编写前端工具时，操作得最多的是文本文件，因此也就涉及到了文件编码的处理问题。我们常用的文本编码有UTF8和GBK两种，并且UTF8文件还可能带有BOM。在读取不同编码的文本文件时，需要将文件内容转换为JS使用的UTF8编码字符串后才能正常处理。 BOM的移除 BOM用于标记一个文本文件使用Unicode编码，其本身是一个Unicode字..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-18T04:29:56.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"node.js"}],["meta",{"property":"article:published_time","content":"2020-07-09T02:15:04.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-18T04:29:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文本编码\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-07-09T02:15:04.000Z\\",\\"dateModified\\":\\"2023-03-18T04:29:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"BOM的移除","slug":"bom的移除","link":"#bom的移除","children":[]},{"level":2,"title":"GBK转UTF8","slug":"gbk转utf8","link":"#gbk转utf8","children":[]}],"git":{"createdTime":1679071923000,"updatedTime":1679113796000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":2}]},"readingTime":{"minutes":1.71,"words":512},"filePathRelative":"Node.js/text-encode.md","localizedDate":"2020年7月9日","excerpt":"<p>使用<code>NodeJS</code>编写前端工具时，操作得最多的是文本文件，因此也就涉及到了文件编码的处理问题。我们常用的文本编码有<code>UTF8</code>和<code>GBK</code>两种，并且<code>UTF8</code>文件还可能带有<code>BOM</code>。在读取不同编码的文本文件时，需要将文件内容转换为<code>JS</code>使用的<code>UTF8</code>编码字符串后才能正常处理。</p>\\n<h2>BOM的移除</h2>\\n<p><code>BOM</code>用于标记一个文本文件使用<code>Unicode</code>编码，其本身是一个<code>Unicode</code>字符<code>（\\"\\\\\\\\uFEFF\\"）</code>，位于文本文件头部。在不同的<code>Unicode</code>编码下，<code>BOM</code>字符对应的二进制字节如下：</p>","autoDesc":true}');export{u as comp,k as data};
