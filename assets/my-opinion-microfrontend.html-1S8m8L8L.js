import{_ as t,c as o,i as r,o as i}from"./app-C8CmrpRJ.js";const n={};function p(a,e){return i(),o("div",null,e[0]||(e[0]=[r('<blockquote><p><a href="https://sorrycc.com/micro-f2e-feeling/" target="_blank" rel="noopener noreferrer">https://sorrycc.com/micro-f2e-feeling/</a></p></blockquote><p>微前端这个概念在前端开发这个方向里面已经不是新鲜事情了，前几年沸沸扬扬，基本每个前端开发都会将「了解微前端开发」写到自己的简历上，各种微前端方案也是层出不穷：</p><ul><li><p>最初的 single-spa，到基于 single-spa 实现的 qiankun，将 js 沙盒和 css 隔离都做到了开箱即用；</p></li><li><p>再到基于 webComponent 实现的 micro-app，基于 webComponent + iframe 实现的 wujie；</p></li><li><p>另外还有直接使用 iframe 作为微前端方案（谁说 iframe 不是微前端呢，天生的上下文隔离就是它最大的优势），基于 webpack5 的 module federation 模块联邦，等等。</p></li></ul><p>方案是真的一个比一个多，每一个后来者都在前人的肩膀上添砖加瓦，解决问题。</p><p>微前端的好处我们了解很多了，没有好处肯定也不会上这套新方案，那微前端也带来了一些额外问题：</p><ol><li>性能变差。内网应用一般不太在意性能，但是也架不住微前端串行加载和多重 JavaScript 代码执行。由于加了这套框架，有些性能优化的手段也做不了，比如 SSR 不能做，子应用自身的请求 preload 也没什么成效（因为要等父应用加载完成子应用才能加载，不存在 preload 的时机了）。</li><li>问题复杂化。有一些问题其实并不复杂，比如父子应用的数据通讯、页面加载、埋点，很多问题在 SPA 上已经有最佳实践。但是一旦加上微前端，有了父子应用，就变得复杂了。比如父子应用的依赖复用问题、父子应用的通讯问题、沙箱相关的问题、样式隔离导致组件弹窗挂载位置不正确等问题。另外还有日常的研发成本和答疑成本。</li><li>技术耦合和门槛（这个词是照抄的，暂时我也没想到更好的词）。举个例子，前端大家都知道用 Vite 体验会比 webpack 更好，但是微前端早期的 UMD 引入方式限制了 Vite 的使用，再或者如果你用到了模块联邦你就必须用到 webpack，这些都是你引入了微前端方案后不得不舍弃的新技术。</li></ol><p>回到最开始，我们为什么要使用微前端？</p><p>一般来说都是因为以下的几个点：</p><ol><li>不同业务的技术栈不同，支持多框架多版本混用</li><li>融合 Pro Code 和 Low Code，即用在低代码平台内</li><li>统一导航头，下方内容不同业务分离拆分部署</li></ol><p>上面的问题微前端都能解，但做技术人员经常会遇到的问题是：为了解决问题 A，引入了方案 B，然后方案 B 又引入了问题 C 和 D。聪明的同学会权衡问题 A 和 问题 C + D 的成本与收益，同时去看问题 A 是否有其他的解法。这个时候我们就面临着两个选择，放弃解决问题 A，那问题 A 就是技术债；解决了问题 C + D，可能又有问题 E、F、G。这就是程序员的生命周期，<strong>高级程序员和初级程序员的价值在于能更早地看到问题 C 和 D，从而更早地做出决策，减低试错成本</strong>。</p><p>回到上面的那些问题，微前端能解，那微前端是唯一解吗？在平时工作中可以多问几个为什么。可能在支持多框架这个方向，它是唯一解，但有些 case 并不是，就比如统一导航头，我们也能通过 JavaScript + MPA 的方案来解，在以前没有微前端的时候很多业务网站跑得也没问题。不是所有情况都直接无脑上微前端。</p><p>微前端是一种解法，它应该是最后的选择，而不应该是默认配置。</p>',12)]))}const c=t(n,[["render",p],["__file","my-opinion-microfrontend.html.vue"]]),m=JSON.parse('{"path":"/%E6%97%A5%E5%BF%97%E9%9A%8F%E7%AC%94/my-opinion-microfrontend.html","title":"微前端应该是最后的选择","lang":"zh-CN","frontmatter":{"title":"微前端应该是最后的选择","date":"2024-12-10T08:55:19.000Z","category":["日志随笔"],"tag":["微前端"],"description":"https://sorrycc.com/micro-f2e-feeling/ 微前端这个概念在前端开发这个方向里面已经不是新鲜事情了，前几年沸沸扬扬，基本每个前端开发都会将「了解微前端开发」写到自己的简历上，各种微前端方案也是层出不穷： 最初的 single-spa，到基于 single-spa 实现的 qiankun，将 js 沙盒和 css 隔离都...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E6%97%A5%E5%BF%97%E9%9A%8F%E7%AC%94/my-opinion-microfrontend.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"微前端应该是最后的选择"}],["meta",{"property":"og:description","content":"https://sorrycc.com/micro-f2e-feeling/ 微前端这个概念在前端开发这个方向里面已经不是新鲜事情了，前几年沸沸扬扬，基本每个前端开发都会将「了解微前端开发」写到自己的简历上，各种微前端方案也是层出不穷： 最初的 single-spa，到基于 single-spa 实现的 qiankun，将 js 沙盒和 css 隔离都..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-15T07:46:21.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"微前端"}],["meta",{"property":"article:published_time","content":"2024-12-10T08:55:19.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-15T07:46:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"微前端应该是最后的选择\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-10T08:55:19.000Z\\",\\"dateModified\\":\\"2024-12-15T07:46:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[],"git":{"createdTime":1734248781000,"updatedTime":1734248781000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":1}]},"readingTime":{"minutes":3.52,"words":1056},"filePathRelative":"日志随笔/my-opinion-microfrontend.md","localizedDate":"2024年12月10日","excerpt":"<blockquote>\\n<p><a href=\\"https://sorrycc.com/micro-f2e-feeling/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://sorrycc.com/micro-f2e-feeling/</a></p>\\n</blockquote>\\n<p>微前端这个概念在前端开发这个方向里面已经不是新鲜事情了，前几年沸沸扬扬，基本每个前端开发都会将「了解微前端开发」写到自己的简历上，各种微前端方案也是层出不穷：</p>\\n<ul>\\n<li>\\n<p>最初的 single-spa，到基于 single-spa 实现的 qiankun，将 js 沙盒和 css 隔离都做到了开箱即用；</p>\\n</li>\\n<li>\\n<p>再到基于 webComponent 实现的 micro-app，基于 webComponent + iframe 实现的 wujie；</p>\\n</li>\\n<li>\\n<p>另外还有直接使用 iframe 作为微前端方案（谁说 iframe 不是微前端呢，天生的上下文隔离就是它最大的优势），基于 webpack5 的 module federation 模块联邦，等等。</p>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,m as data};
