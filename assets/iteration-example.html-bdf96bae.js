import{_ as l,X as i,Y as o,a2 as t}from"./framework-43a12551.js";const e={},n=t("<ol><li><p>确立需求</p></li><li><p>第一次迭代（基本功能） 快速迭代是一种不错的开发方式，在第一次迭代时先实现服务器的基本功能</p><ol><li>分析需求，得出设计方案</li><li>根据设计方案，进行代码实现</li><li>测试，分析问题，为下一次迭代寻找需求</li></ol></li><li><p>第二次迭代（性能） 在第一次迭代之后，已经拥有了一个简单的、可工作的版本，满足了功能需求。一般第二次迭代需要从性能的角度出发，看看有什么改进余地。</p><ol><li>分析需求，得出设计方案</li><li>根据设计方案，进行代码实现</li></ol></li><li><p>第三次迭代（稳定性） 第二次迭代之后，服务器本身的功能和性能已经得到了初步满足。接下来我们要从稳定性的角度重新审视一下代码，看看还需要做些什么。</p></li><li><p>第四次迭代（代码部署，项目结构） 在解决了服务器本身的功能、性能和可靠性问题后，最后要考虑的是代码部署的问题，以及服务器控制的问题</p><ol><li>设计程序部署目录</li><li>构建项目结构</li><li>编写控制脚本</li></ol></li><li><p>后续迭代 在服务器程序正式上线后，将会从可改进的点出发，将上述问题放大审视，并逐步完善需求与修复bug</p></li></ol><hr><ul><li><strong>要先设计再实现。</strong> 在开发一个程序前首先要有一个全局的设计，不一定要很周全，但要足够能写出一些代码。</li><li><strong>要实现后再设计。</strong> 在写了一些代码，有了一些具体的东西后，一定会发现一些之前忽略掉的细节。这时再反过来改进之前的设计，为第二轮迭代做准备。</li></ul>",3),r=[n];function p(s,a){return i(),o("div",null,r)}const _=l(e,[["render",p],["__file","iteration-example.html.vue"]]);export{_ as default};
