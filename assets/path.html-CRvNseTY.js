import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as s,c as p,a as t,b as e,d as r,e as i}from"./app-CzTMLA3i.js";const c={},l=t("strong",null,"官方文档：",-1),d={href:"http://nodejs.org/api/path.html",target:"_blank",rel:"noopener noreferrer"},h=t("br",null,null,-1),m=t("code",null,"NodeJS",-1),u=t("code",null,"path",-1),g=t("code",null,"API",-1),_=i(`<h2 id="path-normalize" tabindex="-1"><a class="header-anchor" href="#path-normalize"><span><code>path.normalize</code></span></a></h2><p>将传入的路径转换为标准路径，具体讲的话，除了解析路径中的.与..外，还能去掉多余的斜杠。如果有程序需要使用路径作为某些数据的索引，但又允许用户随意输入路径时，就需要使用该方法保证路径的唯一性。</p><p>**坑出没注意：**标准化之后的路径里的斜杠在Windows系统下是\\，而在Linux系统下是/。如果想保证任何系统下都使用/作为路径分隔符的话，需要用<code>.replace(/\\\\\\\\/g, &#39;/&#39;)</code>再替换一下标准路径。</p><h2 id="path-join" tabindex="-1"><a class="header-anchor" href="#path-join"><span><code>path.join</code></span></a></h2><p>将传入的多个路径拼接为标准路径。该方法可避免手工拼接路径字符串的繁琐，并且能在不同系统下正确使用相应的路径分隔符。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;foo/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baz/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &quot;foo/bar&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="path-extname" tabindex="-1"><a class="header-anchor" href="#path-extname"><span><code>path.extname</code></span></a></h2><p>当我们需要根据不同文件扩展名做不同操作时，该方法就显得很好用。以下是一个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&#39;foo/bar.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &quot;.js&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9);function b(j,k){const a=o("ExternalLinkIcon");return s(),p("div",null,[t("p",null,[l,t("a",d,[e("http://nodejs.org/api/path.html"),r(a)]),h,e(" 操作文件时难免不与文件路径打交道。"),m,e("提供了"),u,e("内置模块来简化路径相关操作，并提升代码可读性。以下分别介绍几个常用的"),g,e("。")]),_])}const x=n(c,[["render",b],["__file","path.html.vue"]]),A=JSON.parse('{"path":"/Node.js/path.html","title":"Path路径","lang":"zh-CN","frontmatter":{"title":"Path路径","date":"2020-07-09T01:28:55.000Z","category":["node.js"],"tag":["node.js"],"description":"官方文档：http://nodejs.org/api/path.html 操作文件时难免不与文件路径打交道。NodeJS提供了path内置模块来简化路径相关操作，并提升代码可读性。以下分别介绍几个常用的API。 path.normalize 将传入的路径转换为标准路径，具体讲的话，除了解析路径中的.与..外，还能去掉多余的斜杠。如果有程序需要使用路径作...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/Node.js/path.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"Path路径"}],["meta",{"property":"og:description","content":"官方文档：http://nodejs.org/api/path.html 操作文件时难免不与文件路径打交道。NodeJS提供了path内置模块来简化路径相关操作，并提升代码可读性。以下分别介绍几个常用的API。 path.normalize 将传入的路径转换为标准路径，具体讲的话，除了解析路径中的.与..外，还能去掉多余的斜杠。如果有程序需要使用路径作..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-18T04:29:56.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"node.js"}],["meta",{"property":"article:published_time","content":"2020-07-09T01:28:55.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-18T04:29:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Path路径\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-07-09T01:28:55.000Z\\",\\"dateModified\\":\\"2023-03-18T04:29:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"path.normalize","slug":"path-normalize","link":"#path-normalize","children":[]},{"level":2,"title":"path.join","slug":"path-join","link":"#path-join","children":[]},{"level":2,"title":"path.extname","slug":"path-extname","link":"#path-extname","children":[]}],"git":{"createdTime":1679071923000,"updatedTime":1679113796000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":2}]},"readingTime":{"minutes":1.13,"words":339},"filePathRelative":"Node.js/path.md","localizedDate":"2020年7月9日","excerpt":"<p><strong>官方文档：</strong><a href=\\"http://nodejs.org/api/path.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">http://nodejs.org/api/path.html</a><br>\\n操作文件时难免不与文件路径打交道。<code>NodeJS</code>提供了<code>path</code>内置模块来简化路径相关操作，并提升代码可读性。以下分别介绍几个常用的<code>API</code>。</p>\\n<h2><code>path.normalize</code></h2>\\n<p>将传入的路径转换为标准路径，具体讲的话，除了解析路径中的.与..外，还能去掉多余的斜杠。如果有程序需要使用路径作为某些数据的索引，但又允许用户随意输入路径时，就需要使用该方法保证路径的唯一性。</p>","autoDesc":true}');export{x as comp,A as data};
