import{_ as o,c as t,i as c,o as d}from"./app-DLkxNUaG.js";const i="/CrabSAMA-Blog/assets/image-20220510193846273-BkPjOGQG.png",s="/CrabSAMA-Blog/assets/image-20220510193903560-MlwBZNe0.png",a={};function r(n,e){return d(),t("div",null,e[0]||(e[0]=[c('<h2 id="前提" tabindex="-1"><a class="header-anchor" href="#前提"><span>前提</span></a></h2><p>前端使用 <code>Vue</code> 搭建，后端使用 <code>springboot</code> + <code>spring security</code>，各自分离部署，这是前提。</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>在一天中午，某位测试同学丢过来一个缺陷，<strong>说这边登出后重新访问注册、找回密码等接口会报错，但是第二次就访问成功了</strong>。这个还是挺出奇的，毕竟没有遇到过相关的问题，马上上系统查看问题。</p><p>首先自己根据测试同学给出来的复现步骤（登录-登出-调用注册、找回密码等接口）执行了一遍，打开F12，看到了一个奇怪的报错——<code>302</code>？！</p><figure><img src="'+i+'" alt="image-20220510193846273" tabindex="0" loading="lazy"><figcaption>image-20220510193846273</figcaption></figure><p>好家伙，第一次见到访问接口会报 <code>302</code> 的，真是惊奇……首先考虑到这个是后端问题，先让后端小伙伴去找一下日志，但是并没有发现什么问题。因为这个接口是设定了不被 <code>security</code> 拦截的，所以首先会考虑到是不是 <code>security</code> 配置出了问题，但是经过排查好像也没什么异常的样子，所以对于前端来说，我先从 <code>http request</code> 这方面去找问题。</p><figure><img src="'+s+'" alt="image-20220510193903560" tabindex="0" loading="lazy"><figcaption>image-20220510193903560</figcaption></figure><p>这是我发现的第一处异常，为什么对于非登录接口来说，会在响应头带上 <code>Set-Cookie</code> 字段？这不是应该登录成功后做的事情嘛。查看了请求头，发现在调用了登出接口之后，<strong>第一次请求</strong>还是会带上 <code>JSESSIONID</code>（后端登录成功后回传的 <code>sessionId</code>）的 <code>cookie</code> 访问接口，但是第二次请求就会带上 <code>302</code> <code>Set</code> 的 <code>Cookie</code>，然后访问成功。真是令人迷惑的地方。还有一处异常就是，查看了重定向所用的 <code>Location</code> 字段，发现重定向到了后端的根地址。</p><p>既然遇到问题了，首先我们就要面向百度编程，在百度搜索了关键字 <code>spring security 302</code> 之后，发现这个重定向好像是一个普遍的问题，但是和我们这次遇到的问题不一样。直到我看到了一篇 <code>Stack Overflow</code> 的文章后，说 <code>security</code> 的配置中有一个 <strong><code>invalid-session-redirect</code></strong> 的属性会导致重定向（因为 <code>302</code> 状态码的意思就是临时重定向），突然就想到这个好像与我们这次的问题有关。因为一般这个属性是用在后端验证 <code>session</code> 时发现传值不正确或者 <code>session</code> 不存在的时候实现重定向，在以前前后端不分家的时候，后端兼顾前端渲染的场景下就十分实用。但是在如今前后端分离的情况下，一般是由前端根据后端返回的值来进行路由跳转，所以这个就比较少用到了（在 <code>vue</code> history 模式下应该还是可以用的）。在后端去除了这一行配置后，发现问题已经解决了。</p><h2 id="复盘" tabindex="-1"><a class="header-anchor" href="#复盘"><span>复盘</span></a></h2><p>在解决了问题后，我进行了一次复盘，总结了一下这次问题出现的原因：在前端第一次登录成功时，后端建立一个 <code>session</code>，并返回对应的 <code>sessionID</code> 给前端，以 <code>Set-Cookie</code> 的方式存放。在登出时，后端会将对应的 <code>session</code> 清除，但是前端的 <code>Cookie</code> 还没有失效，因此在访问对应域下的接口时，还是会带上 <code>sessionID</code>。好嘛，后端这下根据收到的 <code>sessionID</code>，找不到对应的 <code>session</code>，因此就触发了 <code>invalid-session-redirect</code> 的配置，命令跳转到设定的路径，因此导致触发了 <code>302</code> 重定向。要解决问题，一是去除重定向；二是保留重定向，但是在登出的时候也将 <code>sessionID</code> 清除掉，保证下次请求不会带上不存在的 <code>sessionID</code>。但是这里又引申出一个问题：<strong>为什么对于不拦截的接口，也会去验证对应的</strong> <strong><code>sessionID</code></strong> **呢？**这个问题我个人猜测是 <code>security</code> 的机制，因为我也没有系统学习过后端，只是我的一些拙见。在本次项目中，我们使用了第一种方法，但这不代表第二种方法是不可行的，我们尝试过，由于后端设定的 <code>Cookie</code> 属性中有 <code>HttpOnly</code>，因此前端是无法消除 <code>Cookie</code> 的，必须要后端来清除，而后端清除 <code>Cookie</code>，一般使用 <code>SetMaxAge</code> 为 0 来实现，不知道这样可不可以呢？我们还没有尝试过，也是值得了解的一个点。</p><blockquote><p>2021-01-15 10:40:35更新：使用 <code>node.js</code> + <code>egg.js</code> 测试过，登出时 <code>SetMaxAge</code> 为 0 可以实现清除 <code>cookie</code> 的需求</p></blockquote><p>经历过这次的问题，使得我一个前端会以后端的思维去想问题，对 <code>session</code> 与 <code>cookie</code> 有了进一步的了解，也是一次难忘的踩坑经历。</p>',14)]))}const l=o(a,[["render",r],["__file","api-302.html.vue"]]),g=JSON.parse('{"path":"/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/api-302.html","title":"记录一次访问接口 302 问题","lang":"zh-CN","frontmatter":{"title":"记录一次访问接口 302 问题","date":"2022-05-10T11:42:19.000Z","category":["解决方案"],"tag":["HTTP","踩坑"],"description":"前提 前端使用 Vue 搭建，后端使用 springboot + spring security，各自分离部署，这是前提。 问题 在一天中午，某位测试同学丢过来一个缺陷，说这边登出后重新访问注册、找回密码等接口会报错，但是第二次就访问成功了。这个还是挺出奇的，毕竟没有遇到过相关的问题，马上上系统查看问题。 首先自己根据测试同学给出来的复现步骤（登录-登...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/api-302.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"记录一次访问接口 302 问题"}],["meta",{"property":"og:description","content":"前提 前端使用 Vue 搭建，后端使用 springboot + spring security，各自分离部署，这是前提。 问题 在一天中午，某位测试同学丢过来一个缺陷，说这边登出后重新访问注册、找回密码等接口会报错，但是第二次就访问成功了。这个还是挺出奇的，毕竟没有遇到过相关的问题，马上上系统查看问题。 首先自己根据测试同学给出来的复现步骤（登录-登..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-17T14:39:40.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"HTTP"}],["meta",{"property":"article:tag","content":"踩坑"}],["meta",{"property":"article:published_time","content":"2022-05-10T11:42:19.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-17T14:39:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"记录一次访问接口 302 问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-10T11:42:19.000Z\\",\\"dateModified\\":\\"2024-08-17T14:39:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"前提","slug":"前提","link":"#前提","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"复盘","slug":"复盘","link":"#复盘","children":[]}],"git":{"createdTime":1652183994000,"updatedTime":1723905580000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":4}]},"readingTime":{"minutes":4.12,"words":1237},"filePathRelative":"解决方案/api-302.md","localizedDate":"2022年5月10日","excerpt":"<h2>前提</h2>\\n<p>前端使用 <code>Vue</code> 搭建，后端使用 <code>springboot</code> + <code>spring security</code>，各自分离部署，这是前提。</p>\\n<h2>问题</h2>\\n<p>在一天中午，某位测试同学丢过来一个缺陷，<strong>说这边登出后重新访问注册、找回密码等接口会报错，但是第二次就访问成功了</strong>。这个还是挺出奇的，毕竟没有遇到过相关的问题，马上上系统查看问题。</p>\\n<p>首先自己根据测试同学给出来的复现步骤（登录-登出-调用注册、找回密码等接口）执行了一遍，打开F12，看到了一个奇怪的报错——<code>302</code>？！</p>","autoDesc":true}');export{l as comp,g as data};
