const t=JSON.parse('{"key":"v-3b14e52a","path":"/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E5%9B%A2%E9%98%9F%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96.html","title":"团队代码格式化","lang":"zh-CN","frontmatter":{"title":"团队代码格式化","date":"2021-11-03T09:58:40.000Z","category":["前端开发","前端工程化"],"tag":["前端工程化","开发规范"],"description":"husky：工程化的根基，可以在进行 git 操作的时候，对 git 提供的一系列钩子进行拦截并执行相应的操作。例如对代码进行校验等。 commitlint：代码的提交规范检验。可以对代码的 commit 内容进行校验，确保团队中的 commit 保持规范化，方便团队协作和快速定位问题。 Lint-staged：前端文件过滤工具。代码的格式化工具肯定会涉及到文件系统，一般工具会先读取文件，格式化操作后重新写入。这个工具可以将 git 代码暂存区文件过滤出来，仅仅对被 committed 的文件进行处理。 eslint：代码校验工具。eslint 不多介绍了，规范代码格式的工具，保证代码不出现一些低级错误。 prettier：代码格式化工具。eslint 仅对代码中有问题的地方进行修改，不改动代码风格。而 prettier 是一款代码格式化工具，可以保证团队的代码风格一致。 stylelint：代码校验工具。eslint 是 js 代码的格式规范工具，那 stylelint 则是 css 代码的格式规范工具，引入 stylelint 可以规范 css 代码的格式。","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E5%9B%A2%E9%98%9F%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"团队代码格式化"}],["meta",{"property":"og:description","content":"husky：工程化的根基，可以在进行 git 操作的时候，对 git 提供的一系列钩子进行拦截并执行相应的操作。例如对代码进行校验等。 commitlint：代码的提交规范检验。可以对代码的 commit 内容进行校验，确保团队中的 commit 保持规范化，方便团队协作和快速定位问题。 Lint-staged：前端文件过滤工具。代码的格式化工具肯定会涉及到文件系统，一般工具会先读取文件，格式化操作后重新写入。这个工具可以将 git 代码暂存区文件过滤出来，仅仅对被 committed 的文件进行处理。 eslint：代码校验工具。eslint 不多介绍了，规范代码格式的工具，保证代码不出现一些低级错误。 prettier：代码格式化工具。eslint 仅对代码中有问题的地方进行修改，不改动代码风格。而 prettier 是一款代码格式化工具，可以保证团队的代码风格一致。 stylelint：代码校验工具。eslint 是 js 代码的格式规范工具，那 stylelint 则是 css 代码的格式规范工具，引入 stylelint 可以规范 css 代码的格式。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-18T04:29:56.000Z"}],["meta",{"property":"article:tag","content":"前端工程化"}],["meta",{"property":"article:tag","content":"开发规范"}],["meta",{"property":"article:published_time","content":"2021-11-03T09:58:40.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-18T04:29:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"团队代码格式化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-03T09:58:40.000Z\\",\\"dateModified\\":\\"2023-03-18T04:29:56.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1679071923000,"updatedTime":1679113796000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":2}]},"readingTime":{"minutes":2.68,"words":803},"filePathRelative":"开发规范/团队代码格式化.md","localizedDate":"2021年11月3日","excerpt":"<ul>\\n<li>husky：工程化的根基，可以在进行 git 操作的时候，对 git 提供的一系列钩子进行<strong>拦截并执行</strong>相应的操作。例如对代码进行校验等。</li>\\n<li>commitlint：代码的提交规范检验。可以对代码的 <strong>commit 内容进行校验</strong>，确保团队中的 commit 保持规范化，方便团队协作和快速定位问题。</li>\\n<li>Lint-staged：前端文件过滤工具。代码的格式化工具肯定会涉及到文件系统，一般工具会先读取文件，格式化操作后重新写入。这个工具可以将 git 代码暂存区文件过滤出来，仅仅对<strong>被</strong> <strong>committed 的文件</strong>进行处理。</li>\\n<li>eslint：代码校验工具。eslint 不多介绍了，规范代码格式的工具，保证代码不出现一些低级错误。</li>\\n<li>prettier：代码格式化工具。eslint 仅对代码中有问题的地方进行修改，不改动代码风格。而 prettier 是一款代码格式化工具，可以保证团队的<strong>代码风格</strong>一致。</li>\\n<li>stylelint：代码校验工具。eslint 是 js 代码的格式规范工具，那 stylelint 则是 css 代码的格式规范工具，引入 stylelint 可以规范 css 代码的格式。</li>\\n</ul>","autoDesc":true}');export{t as data};
