import{_ as n,c as o,i as t,o as i}from"./app-D_KI22A-.js";const r={};function c(a,e){return i(),o("div",null,e[0]||(e[0]=[t('<h1 id="发布一个-npm-包" tabindex="-1"><a class="header-anchor" href="#发布一个-npm-包"><span>发布一个 npm 包</span></a></h1><ol><li><code>npm init</code></li><li>编写代码</li><li>使用 <code>npm link</code> 功能先在本地测试包代码是否正常可引入、可运行</li><li>是否为 bin 包（可执行文件包） <ol><li>是，则需要在 <code>package.json</code> 中添加 <code>bin</code> 字段，并指向可执行文件的路径</li><li>否，则无需额外操作</li></ol></li><li>在 npm 上注册自己的账号 <a href="https://www.npmjs.com/signup" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/signup</a></li><li>许多同学都有用国内的镜像源或者公司内部源，这些源是无法发布 npm 包的，因此我们可以使用 <code>nrm</code> 这个库来管理我们的 npm registry，在发布 npm 包之前我们需要切换 npm registry 为 <a href="https://registry.npmjs.org/" target="_blank" rel="noopener noreferrer">https://registry.npmjs.org/</a></li><li><code>npm login</code>，输入自己的用户名和密码，登录时可能需要二次验证码，输入即可。登录成功后调用 <code>npm whoami</code> 有自己的用户名输出即证明登录成功</li><li>建议的流程是通过 <code>commit-and-tag-version</code> 这个包来管理版本，这个包可以帮助我们生成 CHANGELOG 和 commit log，同时生成 git tag 方便直接定位到某个版本。 <ol><li><code>commit-and-tag-version --release-as major</code> 下一个版本是主版本时使用（1.0.0 -&gt; 2.0.0）</li><li><code>commit-and-tag-version --release-as minor</code> 下一个版本是次版本时使用（1.0.0 -&gt; 1.1.0）</li><li><code>commit-and-tag-version --release-as patch</code> 下一个版本是小版本时使用（1.0.0 -&gt; 1.0.1）</li><li><code>commit-and-tag-version --prerelease rc</code> 下一个版本是预发布版本（rc）时使用（1.0.0 -&gt; 1.0.1.rc.1）</li><li>个人建议在每次版本发布之前，先发 rc 版本自测，通过测试后再发布正式版本，防止发布正式版本后出现不可用的情况还需要重新发版修复。<strong>我们应该保证我们的每个正式版本包都是可用的</strong>。</li></ol></li><li>在更新完版本号后，我们可以使用 <code>npm publish</code> 命令进行包发布操作，<code>npm publish --tag</code> 用于指定当前要发布包的 tag，例如我们上面提到的发 rc 包，就可以使用 <code>npm publish --tag rc</code> 命令。注意，直接调用命令之前，建议先调用一次 dry-run，也就是<strong>预运行</strong>一次，检查我们的操作是否有问题，方法也很简单，在命令后面加上 <code>--dry-run</code> 即可，即 <code>npm publish --dry-run</code>。在运行 dry-run 时，会看到运行完命令后 npm 会做什么事情，我们只需要检查操作是否正确符合预期，没问题的话最终执行实际的发布命令即可。</li></ol>',2)]))}const p=n(r,[["render",c],["__file","npm-publish.html.vue"]]),m=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/npm-publish.html","title":"发布一个 npm 包","lang":"zh-CN","frontmatter":{"title":"发布一个 npm 包","date":"2024-10-31T08:04:55.000Z","category":["学习笔记"],"tag":["npm"],"description":"发布一个 npm 包 npm init 编写代码 使用 npm link 功能先在本地测试包代码是否正常可引入、可运行 是否为 bin 包（可执行文件包） 是，则需要在 package.json 中添加 bin 字段，并指向可执行文件的路径 否，则无需额外操作 在 npm 上注册自己的账号 https://www.npmjs.com/signup 许多...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/npm-publish.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"发布一个 npm 包"}],["meta",{"property":"og:description","content":"发布一个 npm 包 npm init 编写代码 使用 npm link 功能先在本地测试包代码是否正常可引入、可运行 是否为 bin 包（可执行文件包） 是，则需要在 package.json 中添加 bin 字段，并指向可执行文件的路径 否，则无需额外操作 在 npm 上注册自己的账号 https://www.npmjs.com/signup 许多..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-31T08:06:28.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"npm"}],["meta",{"property":"article:published_time","content":"2024-10-31T08:04:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-31T08:06:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"发布一个 npm 包\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-31T08:04:55.000Z\\",\\"dateModified\\":\\"2024-10-31T08:06:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[],"git":{"createdTime":1730361988000,"updatedTime":1730361988000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":1}]},"readingTime":{"minutes":2.17,"words":651},"filePathRelative":"学习笔记/npm-publish.md","localizedDate":"2024年10月31日","excerpt":"\\n<ol>\\n<li><code>npm init</code></li>\\n<li>编写代码</li>\\n<li>使用 <code>npm link</code> 功能先在本地测试包代码是否正常可引入、可运行</li>\\n<li>是否为 bin 包（可执行文件包）\\n<ol>\\n<li>是，则需要在 <code>package.json</code> 中添加 <code>bin</code> 字段，并指向可执行文件的路径</li>\\n<li>否，则无需额外操作</li>\\n</ol>\\n</li>\\n<li>在 npm 上注册自己的账号 <a href=\\"https://www.npmjs.com/signup\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.npmjs.com/signup</a></li>\\n<li>许多同学都有用国内的镜像源或者公司内部源，这些源是无法发布 npm 包的，因此我们可以使用 <code>nrm</code> 这个库来管理我们的 npm registry，在发布 npm 包之前我们需要切换 npm registry 为 <a href=\\"https://registry.npmjs.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://registry.npmjs.org/</a></li>\\n<li><code>npm login</code>，输入自己的用户名和密码，登录时可能需要二次验证码，输入即可。登录成功后调用 <code>npm whoami</code> 有自己的用户名输出即证明登录成功</li>\\n<li>建议的流程是通过 <code>commit-and-tag-version</code> 这个包来管理版本，这个包可以帮助我们生成 CHANGELOG 和 commit log，同时生成 git tag 方便直接定位到某个版本。\\n<ol>\\n<li><code>commit-and-tag-version --release-as major</code> 下一个版本是主版本时使用（1.0.0 -&gt; 2.0.0）</li>\\n<li><code>commit-and-tag-version --release-as minor</code> 下一个版本是次版本时使用（1.0.0 -&gt; 1.1.0）</li>\\n<li><code>commit-and-tag-version --release-as patch</code> 下一个版本是小版本时使用（1.0.0 -&gt; 1.0.1）</li>\\n<li><code>commit-and-tag-version --prerelease rc</code> 下一个版本是预发布版本（rc）时使用（1.0.0 -&gt; 1.0.1.rc.1）</li>\\n<li>个人建议在每次版本发布之前，先发 rc 版本自测，通过测试后再发布正式版本，防止发布正式版本后出现不可用的情况还需要重新发版修复。<strong>我们应该保证我们的每个正式版本包都是可用的</strong>。</li>\\n</ol>\\n</li>\\n<li>在更新完版本号后，我们可以使用 <code>npm publish</code> 命令进行包发布操作，<code>npm publish --tag</code> 用于指定当前要发布包的 tag，例如我们上面提到的发 rc 包，就可以使用 <code>npm publish --tag rc</code> 命令。注意，直接调用命令之前，建议先调用一次 dry-run，也就是<strong>预运行</strong>一次，检查我们的操作是否有问题，方法也很简单，在命令后面加上 <code>--dry-run</code> 即可，即 <code>npm publish --dry-run</code>。在运行 dry-run 时，会看到运行完命令后 npm 会做什么事情，我们只需要检查操作是否正确符合预期，没问题的话最终执行实际的发布命令即可。</li>\\n</ol>","autoDesc":true}');export{p as comp,m as data};
