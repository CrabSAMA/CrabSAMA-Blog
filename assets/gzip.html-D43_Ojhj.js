import{_ as s,c as a,i as e,o as n}from"./app-C-tK9rPn.js";const l={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<p>有两种 gzip 压缩的方式：</p><ol><li>打包的时候通过 <code>webpack</code> 配置生成对应的 <code>.gz</code> 文件，浏览器请求 <code>xx.js/css</code> 等文件时，服务器返回对应的 <code>xxx.js.gz</code> 文件；</li><li>浏览器请求 <code>xx.js</code> 文件时，服务器对 <code>xx.js</code> 文件进行 <code>gzip</code> 压缩后传输给浏览器。</li></ol><h2 id="webpack-打包生成-gz-文件" tabindex="-1"><a class="header-anchor" href="#webpack-打包生成-gz-文件"><span><code>webpack</code> 打包生成 <code>gz</code> 文件</span></a></h2><ul><li>安装插件（<code>compression-webpack-plugin</code>）：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compression-webpack-plugin</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --save-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>vue.config.js</code> 文件进行 webpack 配置：</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> CompressionPlugin</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;compression-webpack-plugin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CompressionPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      algorithm</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;gzip&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用gzip压缩</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">js</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">html</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">css</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 匹配文件名</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      filename</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;[path].gz[query]&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 压缩后的文件名(保持原文件名，后缀加.gz)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      minRatio</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 压缩率小于1才会压缩</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      threshold</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10240</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 对超过10k的数据压缩</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      deleteOriginalAssets</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 是否删除未压缩的源文件，谨慎设置，如果希望提供非gzip的资源，可不设置或者设置为false（比如删除打包后的gz后还可以加载到原始资源文件）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里对<code>js</code>、<code>html</code>、<code>css</code>文件进行了压缩处理，并没有进行图片压缩，因为<strong>图片压缩并不能实际减少文件大小</strong>，反而会导致打包后生成很多同大小的gz文件，得不偿失。</p><ul><li>当然了，上文提到过，浏览器请求 <code>xx.js/css</code> 等文件时，服务器返回对应的 <code>xxx.js.gz</code> 文件，所以还需要在服务器配置一个属性，以期望它能正常返回我们需要的 <code>gz</code> 文件。</li></ul><p>这里拿 <code>nginx</code> 举例（<code>nginx.conf</code>文件）：</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# 静态加载本地的 gz 文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	gzip_static </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>gzip</code> 压缩比率在5-6倍，<code>nginx</code> 配置了静态 <code>gz</code> 加载后，浏览器也返回的是 <code>gz</code> 文件，这样就会请求小文件而不会导致请求卡线程，并且，因为保留了源文件，所以当我们删除 <code>gz</code> 后，浏览器会自动去请求原始文件，而不会导致界面出现任何问题。</p><h2 id="服务器在线-gzip-压缩" tabindex="-1"><a class="header-anchor" href="#服务器在线-gzip-压缩"><span>服务器在线 <code>gzip</code> 压缩</span></a></h2><p>前端不用进行任何配置，也不用 <code>webpack</code> 生成 <code>gz</code> 文件，服务器进行处理，拿 <code>nginx</code> 举例：</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 开启gzip</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  gzip </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 设置缓冲区大小</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  gzip_buffers </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 16k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  #压缩级别官网建议是6</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  gzip_comp_level </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  #压缩的类型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  gzip_types </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">text/plain application/javascript text/css application/xml text/javascript application;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应头中会携带 <code>gzip</code> 压缩配置，每次请求 <code>xx.js</code> 文件，服务器都会进行实时压缩。</p><h2 id="比较" tabindex="-1"><a class="header-anchor" href="#比较"><span>比较</span></a></h2><p>两种方案的优缺点：</p><ol><li><code>webpack</code> 打包，然后直接使用<strong>静态</strong>的 <code>gz</code>，缺点就是<strong>打包后文件体积太大</strong>，但是<strong>不耗服务器性能</strong>；</li><li>使用 <code>nginx</code> <strong>在线</strong> <code>gzip</code>，缺点就是<strong>耗性能</strong>，需要实时压缩，但是 <strong><code>vue</code> 打包后的文件体积小</strong>。</li></ol><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><p>我想在有<code>gz</code>文件的时候进行静态压缩，不存在 <code>gz</code> 文件的时候进行在线压缩而不是加载源文件，要怎么做呢？</p><p>简单，两种配置都写上即可。</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">gzip </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">gzip_static </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">gzip_comp_level </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">gzip_types </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">text/plain text/html text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，<code>gzip_static</code>的优先级高，会先加载静态 <code>gz</code> 文件，当同目录下不存在此文件的时候，会执行在线压缩的命令。</p><p>有些小伙伴就会纳闷，既然都开启的情况下，我们怎么区分使用了静态加载还是在线压缩呢？</p><p>响应头的 <code>Content-Edcoding:gzip</code> 表示 <code>gzip</code> 压缩已经生效，而 <code>Etag</code> 中<strong>只有简单字符</strong>表示<strong>静态资源加载</strong>，而前面<strong>带 <code>W/</code></strong> 表示启动了<strong>在线压缩</strong>。</p>`,26)]))}const k=s(l,[["render",t],["__file","gzip.html.vue"]]),d=JSON.parse('{"path":"/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/gzip.html","title":"开启 gzip","lang":"zh-CN","frontmatter":{"title":"开启 gzip","date":"2022-05-27T09:22:57.000Z","category":["解决方案"],"tag":["HTTP"],"description":"有两种 gzip 压缩的方式： 打包的时候通过 webpack 配置生成对应的 .gz 文件，浏览器请求 xx.js/css 等文件时，服务器返回对应的 xxx.js.gz 文件； 浏览器请求 xx.js 文件时，服务器对 xx.js 文件进行 gzip 压缩后传输给浏览器。 webpack 打包生成 gz 文件 安装插件（compression-we...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/gzip.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"开启 gzip"}],["meta",{"property":"og:description","content":"有两种 gzip 压缩的方式： 打包的时候通过 webpack 配置生成对应的 .gz 文件，浏览器请求 xx.js/css 等文件时，服务器返回对应的 xxx.js.gz 文件； 浏览器请求 xx.js 文件时，服务器对 xx.js 文件进行 gzip 压缩后传输给浏览器。 webpack 打包生成 gz 文件 安装插件（compression-we..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-05T09:14:26.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"HTTP"}],["meta",{"property":"article:published_time","content":"2022-05-27T09:22:57.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-05T09:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"开启 gzip\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-27T09:22:57.000Z\\",\\"dateModified\\":\\"2024-08-05T09:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"webpack 打包生成 gz 文件","slug":"webpack-打包生成-gz-文件","link":"#webpack-打包生成-gz-文件","children":[]},{"level":2,"title":"服务器在线 gzip 压缩","slug":"服务器在线-gzip-压缩","link":"#服务器在线-gzip-压缩","children":[]},{"level":2,"title":"比较","slug":"比较","link":"#比较","children":[]},{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]}],"git":{"createdTime":1653648648000,"updatedTime":1722849266000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":3}]},"readingTime":{"minutes":3,"words":900},"filePathRelative":"解决方案/gzip.md","localizedDate":"2022年5月27日","excerpt":"<p>有两种 gzip 压缩的方式：</p>\\n<ol>\\n<li>打包的时候通过 <code>webpack</code> 配置生成对应的 <code>.gz</code> 文件，浏览器请求 <code>xx.js/css</code> 等文件时，服务器返回对应的 <code>xxx.js.gz</code> 文件；</li>\\n<li>浏览器请求 <code>xx.js</code> 文件时，服务器对 <code>xx.js</code> 文件进行 <code>gzip</code> 压缩后传输给浏览器。</li>\\n</ol>\\n<h2><code>webpack</code> 打包生成 <code>gz</code> 文件</h2>","autoDesc":true}');export{k as comp,d as data};
