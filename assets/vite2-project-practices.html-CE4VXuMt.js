import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as i,a as s,b as n,d as e,e as t}from"./app-CzTMLA3i.js";const l="/CrabSAMA-Blog/assets/image-20210312111118287-WfgdxF4X.png",u="/CrabSAMA-Blog/assets/image-20210312112302999-bWZ5EXSq.png",r="/CrabSAMA-Blog/assets/QQ20210312-143200-HD-l7od3sNF.gif",d={},k=s("p",null,[s("code",null,"Vite1"),n("仅仅试用过，"),s("code",null,"Vite2"),n("已经更新了，全新插件架构，丝滑的开发体验，和"),s("code",null,"Vue3"),n("的完美结合。 出于对尤大的信任与新技术的追求，在做毕设的我尝试着把项目移植到 Vite2 上。")],-1),v={href:"https://cn.vitejs.dev/",target:"_blank",rel:"noopener noreferrer"},m=t(`<h2 id="目标" tabindex="-1"><a class="header-anchor" href="#目标"><span>目标</span></a></h2><ul><li>项目能移植到 Vite2 上正常运行，并且不存在影响运行的 bug</li><li>测试现有引入框架能否正常运行，不能正常运行有没有替代方案</li><li>分析 Vite2 的变化，如果项目使用 Vite2 有什么注意事项</li></ul><h2 id="从零开始搭建一个-vite2-项目" tabindex="-1"><a class="header-anchor" href="#从零开始搭建一个-vite2-项目"><span>从零开始搭建一个 Vite2 项目</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> init @vitejs/app
<span class="token builtin class-name">cd</span> project
<span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就这一行，简单粗暴，执行完后会让你选择对应的模板，Vite2 支持不同的框架，本文选择 Vue 即可。</p><p>一般通过脚手架初始化的 Vite 项目会在 <code>package.json</code>中添加 Vite 相关的 script，如果没有自己配置一下即可。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 启动开发服务器</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 为生产环境构建产物</span>
    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite preview&quot;</span> <span class="token comment">// 本地预览生产构建产物</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以指定额外的命令行选项，如 <code>--port</code> 或 <code>--https</code>。运行 <code>npx vite --help</code> 获得完整的命令行选项列表。</p><h2 id="移植现有项目-本文重点" tabindex="-1"><a class="header-anchor" href="#移植现有项目-本文重点"><span>移植现有项目（本文重点）</span></a></h2>`,9),g={href:"https://www.vue-js.com/topic/6035bc2996b2cb0032c389de",target:"_blank",rel:"noopener noreferrer"},h=t('<p>由于官方现在还没给出完整的移植教程，我选用的方法是：</p><ol><li>新建一个 Vite2 + Vue 项目</li><li>将现有项目代码迁移到该项目中</li><li>根据报错一步一步进行调整</li></ol><figure><img src="'+l+`" alt="image-20210312111118287" tabindex="0" loading="lazy"><figcaption>image-20210312111118287</figcaption></figure><p style="text-align:center;">左：VueCli4 项目 右：Vite2 + Vue 项目</p><h3 id="迁移项目代码" tabindex="-1"><a class="header-anchor" href="#迁移项目代码"><span>迁移项目代码</span></a></h3><p>根据对两个项目的结构进行对比，可以发现的是我们需要将 <code>src</code>, <code>public</code> ,<code>package.json</code>, <code>.config.js</code> 这些目录与文件进行迁移。</p><ul><li>src：直接复制粘贴即可</li><li>public：将里面的 <code>index.html</code> 复制到 Vite 项目的根目录，其余复制粘贴即可</li><li>package.json：复制粘贴所有的 <code>dependencies</code>，<code>devDependencies</code>中除去 <code>webpack</code>,<code>vuecli</code>相关的依赖，其余复制粘贴即可（包括你需要用到的预处理器等）</li><li>vue.config.js：这个是大头，需要注意，下面单独开一个小标题进行描述。</li></ul><h4 id="package-json" tabindex="-1"><a class="header-anchor" href="#package-json"><span><code>package.json</code></span></a></h4><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service serve&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service serve&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service build&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>↓</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;preview&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite preview&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vue-config-js-vite-config-js" tabindex="-1"><a class="header-anchor" href="#vue-config-js-vite-config-js"><span><code>vue.config.js</code> -&gt; vite.config.js</span></a></h4><p>新建完项目后我们会得到一个清爽的配置文件：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-vue&#39;</span>

<span class="token comment">// https://vitejs.dev/config/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在让我们来开个分屏，对比一下 <code>vue.config.js</code>与<code>vite.config.js</code>的区别。</p><figure><img src="`+u+`" alt="image-20210312112302999" tabindex="0" loading="lazy"><figcaption>image-20210312112302999</figcaption></figure><p>很多是不是？看着就让人头大。但我们一步一步来，这个也不会太难。</p><ol><li><p>需要明确的是，<code>vue.config.js</code>与<code>vite.config.js</code>一样，可以使用 <code>require</code> 引用 <code>path</code> 等模块。</p></li><li><p>首先，上方的依赖我们可以按需迁移过来，但与 <code>webpack</code> 相关的依赖、代码就不需要了。</p></li><li><p>把目光转移到导出的配置对象上，这里有几个一一对应的选项可以进行迁移：</p><ul><li>publicPath -&gt; base</li><li>assetsDir -&gt; build.assetsDir</li><li>outputDir -&gt; build.outDir</li><li>css.loaderOptions -&gt; css.preprocessorOptions（本项目用的 antd-vue，因此使用的是 less）</li><li>css.loaderOptions.less.lessOptions -&gt;css.preprocessorOptions.less</li></ul><p>上面就是我项目里面需要迁移的配置项，其余的大家可以自行配置，比如 devServer 的端口号等等配置。</p><p>还是那句话，与 <code>webpack</code> 相关的，比如 <code>configWebpack</code>, <code>chainWebpack</code> 就不需要迁移了。</p></li><li><p>别名通过 <code>resolve.alias</code> 进行配置即可</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;@&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;*&#39;</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>由于我的项目并不是十分大型的项目，所以在完成上述操作后基本上已经将配置文件迁移好了。（我觉得应该也没有人会将大型项目移植到一个并不成熟的新框架上吧😹）</p><h3 id="调整代码" tabindex="-1"><a class="header-anchor" href="#调整代码"><span>调整代码</span></a></h3><p>由于 <code>Vite2</code> 使用了原生 ES Module 的方法来服务源码，在项目中有几个大点需要改动：</p><h4 id="不能在代码中使用-require-和-module-export" tabindex="-1"><a class="header-anchor" href="#不能在代码中使用-require-和-module-export"><span>不能在代码中使用 <code>require</code> 和 <code>module.export</code></span></a></h4><p>由于脱离了 <code>webpack</code> 环境，<code>Vite2</code> 将代码直接托管至浏览器，因此我们不能在代码中使用 nodejs 的 <code>require</code> 和 <code>module.export</code> 来进行模块的导出导入了。取而代之的是，将代码中有用到的地方改成原生 ES Module 方式。</p><ul><li><code>require(&#39;module&#39;)</code> -&gt; <code>import * from &#39;module&#39;</code></li><li><code>module.export</code> -&gt; <code>export { xx }, export default xx</code></li></ul><h4 id="尽可能地在-import-时将文件后缀补全" tabindex="-1"><a class="header-anchor" href="#尽可能地在-import-时将文件后缀补全"><span>尽可能地在 import 时将文件后缀补全</span></a></h4><p>感觉之前是 <code>webpack</code> 对后缀进行了补全，才让我们可以使用 <code>import someComponent from &#39;@/views/someComponent&#39;</code> 这种格式引入 <code>@/views/someComponent/index.vue</code>的文件。但在 Vite 中似乎没有了这种处理，因此我们在引用 <code>.vue</code> 文件时，后缀名不能省略。一般 <code>Vite</code> 报找不到文件的错误，可以首要考虑这个问题。</p><h4 id="path等-nodejs-原生模块不能使用" tabindex="-1"><a class="header-anchor" href="#path等-nodejs-原生模块不能使用"><span><code>path</code>等 nodejs 原生模块不能使用</span></a></h4>`,27),b=s("code",null,"webpack",-1),f=s("code",null,"const path = require('path')",-1),y=s("code",null,"path",-1),_=s("code",null,'Module "path" has been externalized for browser compatibility and cannot be accessed in client code.',-1),w=s("code",null,"path",-1),q={href:"https://www.npmjs.com/package/path-browserify",target:"_blank",rel:"noopener noreferrer"},x=s("code",null,"path-browserify",-1),j=s("code",null,"path",-1),V=s("code",null,"import path from 'path-browserify'",-1),C=t('<h3 id="完成" tabindex="-1"><a class="header-anchor" href="#完成"><span>完成</span></a></h3><p>在修改完上述问题后，可以重启一下 <code>Vite</code> 的服务器，看看效果，一般不会出现特别大的问题。这也是 <code>Vite2</code> 做得比较好的地方，方便用户可以比较轻松地迁移~</p><p style="text-align:center;"><img src="'+r+`"></p><p>来看一下运行效果，相较于 <code>VueCli</code>，确实现在是秒开，HMR也十分快！</p><h2 id="踩坑点" tabindex="-1"><a class="header-anchor" href="#踩坑点"><span>踩坑点</span></a></h2><h3 id="错误提示有待提升" tabindex="-1"><a class="header-anchor" href="#错误提示有待提升"><span>错误提示有待提升</span></a></h3><p>相比于 <code>VueCli</code>，<code>Vite</code>的错误提示并不是十分友好，有些时候页面也不报错，控制台也不报错。这种情况可以针对上面提到的点，在代码中打断点调试一下。有可能在一些 utils 中使用了某些不支持的语法，但得益于 js “强大的”的错误兜底机制，错误并没有被捕获到，可以在一些有疑问的地方加个 try-catch 块看看。</p><h3 id="webpack-分包打包" tabindex="-1"><a class="header-anchor" href="#webpack-分包打包"><span>Webpack 分包打包</span></a></h3><p>配置 <code>build.rollupOptions.output.manualChunks</code> 属性即可。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  build<span class="token operator">:</span> <span class="token punctuation">{</span>
    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
      output<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">manualChunks</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;echarts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&#39;echarts&#39;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;ant-design-vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&#39;ant-design-vue&#39;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&#39;vendor&#39;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="htmltemplateplugin-移植" tabindex="-1"><a class="header-anchor" href="#htmltemplateplugin-移植"><span>HtmlTemplatePlugin 移植</span></a></h3>`,11),E=s("code",null,"vite-plugin-html-template",-1),A={href:"https://www.npmjs.com/package/vite-plugin-html-template",target:"_blank",rel:"noopener noreferrer"},T=t(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">htmlTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      data<span class="token operator">:</span> <span class="token punctuation">{</span>
        title<span class="token operator">:</span> <span class="token string">&#39;云台&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M={href:"https://ejs.bootcss.com/#docs",target:"_blank",rel:"noopener noreferrer"},S=t(`<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width,initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/favicon.ico<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>&lt;%= title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span>
        <span class="token punctuation">&gt;</span></span>We&#39;re sorry but &lt;%= title %&gt; doesn&#39;t work properly without JavaScript enabled. Please
        enable it to continue.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span>
      <span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件库按需引入-替代babel-plugin-import" tabindex="-1"><a class="header-anchor" href="#组件库按需引入-替代babel-plugin-import"><span>组件库按需引入（替代<code>babel-plugin-import</code>）</span></a></h3>`,2),P=s("code",null,"unplugin-vue-components",-1),O={href:"https://www.npmjs.com/package/unplugin-vue-components",target:"_blank",rel:"noopener noreferrer"},D=t(`<p>以 <code>ant-design-vue</code> 为例，配置如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> Components <span class="token keyword">from</span> <span class="token string">&#39;unplugin-vue-components/vite&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AntDesignVueResolver <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;unplugin-vue-components/resolvers&#39;</span>

<span class="token comment">// your plugin installation</span>
<span class="token function">Components</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  resolvers<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">AntDesignVueResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后如果没有其他需求，即可享受开箱即用的按需引入方式，插件会帮忙进行自动转化。</p><h4 id="如果你有配置主题的需求" tabindex="-1"><a class="header-anchor" href="#如果你有配置主题的需求"><span>如果你有配置主题的需求</span></a></h4><p>你会发现使用这个插件之后，配置的主题是失效的。我们需要在配置中添加以下属性，使引入的样式文件是 <code>less</code> 文件，实现主题配置。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// your plugin installation</span>
<span class="token function">Components</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  resolvers<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">AntDesignVueResolver</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 引入 less 样式文件 而不是编译后的 css</span>
      importStyle<span class="token operator">:</span> <span class="token string">&#39;less&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="require-context批量引入" tabindex="-1"><a class="header-anchor" href="#require-context批量引入"><span><code>require.context</code>批量引入</span></a></h3>`,7),B=s("code",null,"node",-1),R=s("code",null,"require.context",-1),z=s("code",null,"Vite",-1),N=s("code",null,"import.meta.glob",-1),F={href:"https://cn.vitejs.dev/guide/features.html#glob-import",target:"_blank",rel:"noopener noreferrer"},U=t(`<p>这里有一个题外话，如果项目中有使用 <code>typescript</code> 的话，会发现 <code>import.meta.glob</code> 会报 <code>import 上找不到 meta 属性</code>，解决方法也很简单，在 <code>tsconfig.json</code> 文件中的 <code>types</code> 属性中插入 <code>&quot;vite/client&quot;</code> 这一项即可。</p><p>下面是一个批量引入某个文件夹中所有 Vue 组件的例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// require.context 写法</span>
<span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>

<span class="token keyword">const</span> components <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

context<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token function">context</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>default
  components<span class="token punctuation">[</span>key<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;.vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> component
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> components
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// import.meta.glob 写法</span>
<span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">globEager</span><span class="token punctuation">(</span><span class="token string">&#39;./*.vue&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> components <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  components<span class="token punctuation">[</span>key<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;.vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>default
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> components
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="require引入静态文件" tabindex="-1"><a class="header-anchor" href="#require引入静态文件"><span><code>require</code>引入静态文件</span></a></h3>`,5),W=s("code",null,"require",-1),I=s("code",null,"node",-1),Z=s("code",null,"require",-1),J=s("code",null,"Vite",-1),H={href:"https://cn.vitejs.dev/guide/assets.html",target:"_blank",rel:"noopener noreferrer"},X=t(`<p>这里举一个引入 js 文件的例子，其他情况可以参考文档：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// require 写法</span>
<span class="token keyword">let</span> MyIconFont <span class="token operator">=</span> <span class="token function">createFromIconfontCN</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// scriptUrl: &#39;//at.alicdn.com/t/font_2827954_m2dc4k98x4b.js&#39;</span>
  scriptUrl<span class="token operator">:</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;/public/iconfont.js&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// Vite import 写法</span>
<span class="token keyword">import</span> iconfontJs <span class="token keyword">from</span> <span class="token string">&#39;@/assets/iconfont.js?url&#39;</span>
<span class="token keyword">let</span> MyIconFont <span class="token operator">=</span> <span class="token function">createFromIconfontCN</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  scriptUrl<span class="token operator">:</span> iconfontJs
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tailwindcss-样式优先级低" tabindex="-1"><a class="header-anchor" href="#tailwindcss-样式优先级低"><span><code>tailwindcss</code> 样式优先级低</span></a></h3><p>虽然感觉不是 <code>Vite</code> 的问题，但是 <code>Webpack</code> 下正常，<code>Vite</code> 中 <code>tailwindcss</code> 样式优先级就低于组件库的样式了，权当是 <code>Vite</code> 中的一个坑处理吧~</p>`,5),L=s("strong",null,"高于3.0",-1),Q=s("code",null,"tailwindcss",-1),Y=s("code",null,"tailwindcss.config.js",-1),$=s("code",null,"important: '#app'",-1),G=s("code",null,"tailwindcss",-1),K=s("code",null,"#app",-1),nn=s("code",null,"tailwindcss",-1),sn={href:"https://tailwindcss.com/docs/configuration#important",target:"_blank",rel:"noopener noreferrer"},an=t(`<h3 id="使用按需引入时一直报-find-new-dependency" tabindex="-1"><a class="header-anchor" href="#使用按需引入时一直报-find-new-dependency"><span>使用按需引入时一直报 <code>find new dependency</code></span></a></h3><p>安装 <code>vite-plugin-optimize-persist</code> 和 <code>vite-plugin-package-config</code> 两个插件，并引入：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> OptimizationPersist <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-optimize-persist&#39;</span>
<span class="token keyword">import</span> PkgConfig <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-package-config&#39;</span>

<span class="token comment">// your plugin installation</span>
<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token function">PkgConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">OptimizationPersist</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个插件实现的功能是在每次找到新的依赖时，将其添加到 <code>Vite</code> 配置中的 <code>optimizeDeps.include</code> 属性，以保证第二次访问时 <code>Vite</code> 不会再重新编译为 <code>ES Module</code>。</p><blockquote><p>2022年04月13日更新：</p><p>在 <code>Vite</code> 更新到 <code>2.9.1</code> 后，上述问题解决，可以不用引入这两个插件了，作者仓库也标注归档了。</p><p>在第一次启动项目或删除 <code>node_modules</code> 时，会对依赖进行预构建；在进入新页面时按需引入了新组件，也会对依赖进行预构建，构建完成后将会自动刷新页面，属于正常现象。</p></blockquote><h3 id="分包后打包-preview-报错" tabindex="-1"><a class="header-anchor" href="#分包后打包-preview-报错"><span>分包后打包，preview 报错</span></a></h3><p><code>vite preview</code> 时报错：<code>Uncaught TypeError: Cannot read properties of undefined (reading &#39;prototype&#39;)</code></p><p>经查看后怀疑是 <code>ant-design-vue</code> 版本的问题，更新了 <code>ant-design-vue</code> 到最新版本后，出现新的错误：<code>Cannot access &#39;isFunction&#39; before initialization</code></p><p>因为 <code>isFunction</code> 是 <code>@vue/core</code> 中内置的方法，猜测是<strong>分包</strong>导致的问题，后续尝试将 <code>vite.config.ts</code> 中的 <code>build</code> 选项中分包相关的配置清空，这个问题告一段落。</p><h3 id="引用的包中-esm-与-commonjs-语法混用-报错" tabindex="-1"><a class="header-anchor" href="#引用的包中-esm-与-commonjs-语法混用-报错"><span>引用的包中 <code>esm</code> 与 <code>commonjs</code> 语法混用，报错</span></a></h3><p>由于系统使用了我自己开发的一个 <code>npm</code> 包，里面有部分代码是直接引用第三方组件的，其中还有 <code>commonjs</code> 的 <code>require</code> 语法，因此进入系统时就会报错：<code>ReferenceError: require is not defined</code>。</p><p>查询资料后得知 <code>rollup</code> 有个 <code>@rollup/plugin-commonjs</code> 的插件，可以解决这个问题，只需要在 <code>vite.config.ts</code> 中设置 <code>build.commonjsOptions.transformMixedEsModules: true</code> 即可，但是在这样设置后我这边依旧会报错：<code>Uncaught ReferenceError: exports is not defined</code>。</p><p>最后由于这个包是我自己开发的，我在这个包的 <code>rollup</code> 打包配置中引入了 <code>@rollup/plugin-commonjs</code> 并配置 <code>transformMixedEsModules: true</code>，将打包出来的 <code>require</code> 转成 <code>esm</code> 的 <code>import</code> 用法，然后去除上面的 <code>build.commonjsOptions.transformMixedEsModules: true</code> ，报错解除，可以正常进入页面了。</p><h3 id="资源用-cdn-引入-报错-uncaught-typeerror-failed-to-resolve-module-specifier-echarts-relative-references-must-start-with-either-or" tabindex="-1"><a class="header-anchor" href="#资源用-cdn-引入-报错-uncaught-typeerror-failed-to-resolve-module-specifier-echarts-relative-references-must-start-with-either-or"><span>资源用 <code>cdn</code> 引入，报错 <code>Uncaught TypeError: Failed to resolve module specifier “echarts”. Relative references must start with either “/”, “./”, or “…/”.</code></span></a></h3><p>仍未解决，TODO~</p><h3 id="打包时出现-warning-charset-must-be-the-first-rule-in-the-file-警告" tabindex="-1"><a class="header-anchor" href="#打包时出现-warning-charset-must-be-the-first-rule-in-the-file-警告"><span>打包时出现 <code>warning: &quot;@charset&quot; must be the first rule in the file</code> 警告</span></a></h3><p>要么就在 <code>vite.config.ts</code> 中加入 <code>postcssPlugin: &#39;internal:charset-removal’</code>，但是 <code>vite</code> 将不再去获取 <code>postcss.config.js</code> 中的配置，会丢失 <code>tailwindcss</code>，这个具体要研究 <code>postcss.config.js</code> 怎么配置才能达到效果。</p><p>更新：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// postcss.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">postcssPlugin</span><span class="token operator">:</span> <span class="token string">&#39;internal:charset-removal&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">AtRule</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">charset</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">atRule</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>atRule<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;charset&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            atRule<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;tailwindcss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;autoprefixer&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function en(tn,on){const a=p("ExternalLinkIcon");return c(),i("div",null,[s("blockquote",null,[k,s("p",null,[s("a",v,[n("Vite2官方文档"),e(a)]),n("（看了一个星期的英文文档才发现原来中文文档也更新了 T.T）")])]),m,s("p",null,[n("上面介绍了如何搭建一个全新的 Vite2 项目，但从我个人经验而言，现在由于 Vite2 刚发布，社区里关于如何移植现有项目到 Vite2 的例子是比较少的，以至于我找了好久也只找到了"),s("a",g,[n("一篇文章"),e(a)]),n("（还是个卖课的就离谱）。但也感谢这篇文章给了我一些启发，现在就让我们开始吧~")]),h,s("p",null,[n("由于脱离了 "),b,n(" 环境，在项目代码中不可以直接使用 "),f,n("的方式来使用 "),y,n(" 等模块了，会报 "),_,n("的错误。不过在现有项目中还是有很多地方用到 "),w,n(" 的，因此我的解决方案是通过 "),s("a",q,[x,e(a)]),n("来解决，安装了该包后，将项目中用到 "),j,n(" 的地方换成 "),V,n(" 即可。")]),C,s("p",null,[n("安装 "),E,n(" 插件，"),s("a",A,[n("NPM地址"),e(a)])]),T,s("p",null,[n("使用 EJS 语法（"),s("a",M,[n("文档"),e(a)]),n("）写 template 即可，在 htmlTemplate Plugin 中导出的值会自动输出到 html 文件中。")]),S,s("p",null,[n("安装 "),P,n(" 插件，"),s("a",O,[n("NPM地址"),e(a)])]),D,s("p",null,[n("由于没有了 "),B,n(" 环境，因此 "),R,n(" 在代码中也不能使用了，"),z,n(" 官方提供的一个替代方法是 "),N,n("。（"),s("a",F,[n("文档"),e(a)]),n("）")]),U,s("p",null,[n("在项目中时常有通过 "),W,n(" 引入静态文件（如图片、js文件等）的需求，在没有了 "),I,n(" 环境后，"),Z,n(" 不能用了，"),J,n(" 提供了新的静态资源处理方法。（"),s("a",H,[n("文档"),e(a)]),n("）")]),X,s("p",null,[n("解决方法也很简单，在"),L,n("的 "),Q,n(" 中，在 "),Y,n(" 文件中新增一个 "),$,n(" 即可。具体内部实现就是 "),G,n(" 在生成 css 时，每一个属性前面添加了一个 "),K,n(" 选择器，又因为 id 选择器的高优先级，使得 "),nn,n(" 的样式拥有了较高的优先级。（"),s("a",sn,[n("文档"),e(a)]),n("）")]),an])}const ln=o(d,[["render",en],["__file","vite2-project-practices.html.vue"]]),un=JSON.parse('{"path":"/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE/vite2-project-practices.html","title":"Vite2 真实项目实践","lang":"zh-CN","frontmatter":{"title":"Vite2 真实项目实践","date":"2022-08-04T07:52:40.000Z","category":["实际项目","前端开发"],"tag":["vite"],"description":"Vite1仅仅试用过，Vite2已经更新了，全新插件架构，丝滑的开发体验，和Vue3的完美结合。 出于对尤大的信任与新技术的追求，在做毕设的我尝试着把项目移植到 Vite2 上。 Vite2官方文档（看了一个星期的英文文档才发现原来中文文档也更新了 T.T） 目标 项目能移植到 Vite2 上正常运行，并且不存在影响运行的 bug 测试现有引入框架能否...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE/vite2-project-practices.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"Vite2 真实项目实践"}],["meta",{"property":"og:description","content":"Vite1仅仅试用过，Vite2已经更新了，全新插件架构，丝滑的开发体验，和Vue3的完美结合。 出于对尤大的信任与新技术的追求，在做毕设的我尝试着把项目移植到 Vite2 上。 Vite2官方文档（看了一个星期的英文文档才发现原来中文文档也更新了 T.T） 目标 项目能移植到 Vite2 上正常运行，并且不存在影响运行的 bug 测试现有引入框架能否..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-18T04:29:56.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"vite"}],["meta",{"property":"article:published_time","content":"2022-08-04T07:52:40.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-18T04:29:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vite2 真实项目实践\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-04T07:52:40.000Z\\",\\"dateModified\\":\\"2023-03-18T04:29:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"目标","slug":"目标","link":"#目标","children":[]},{"level":2,"title":"从零开始搭建一个 Vite2 项目","slug":"从零开始搭建一个-vite2-项目","link":"#从零开始搭建一个-vite2-项目","children":[]},{"level":2,"title":"移植现有项目（本文重点）","slug":"移植现有项目-本文重点","link":"#移植现有项目-本文重点","children":[{"level":3,"title":"迁移项目代码","slug":"迁移项目代码","link":"#迁移项目代码","children":[]},{"level":3,"title":"调整代码","slug":"调整代码","link":"#调整代码","children":[]},{"level":3,"title":"完成","slug":"完成","link":"#完成","children":[]}]},{"level":2,"title":"踩坑点","slug":"踩坑点","link":"#踩坑点","children":[{"level":3,"title":"错误提示有待提升","slug":"错误提示有待提升","link":"#错误提示有待提升","children":[]},{"level":3,"title":"Webpack 分包打包","slug":"webpack-分包打包","link":"#webpack-分包打包","children":[]},{"level":3,"title":"HtmlTemplatePlugin 移植","slug":"htmltemplateplugin-移植","link":"#htmltemplateplugin-移植","children":[]},{"level":3,"title":"组件库按需引入（替代babel-plugin-import）","slug":"组件库按需引入-替代babel-plugin-import","link":"#组件库按需引入-替代babel-plugin-import","children":[]},{"level":3,"title":"require.context批量引入","slug":"require-context批量引入","link":"#require-context批量引入","children":[]},{"level":3,"title":"require引入静态文件","slug":"require引入静态文件","link":"#require引入静态文件","children":[]},{"level":3,"title":"tailwindcss 样式优先级低","slug":"tailwindcss-样式优先级低","link":"#tailwindcss-样式优先级低","children":[]},{"level":3,"title":"使用按需引入时一直报 find new dependency","slug":"使用按需引入时一直报-find-new-dependency","link":"#使用按需引入时一直报-find-new-dependency","children":[]},{"level":3,"title":"分包后打包，preview 报错","slug":"分包后打包-preview-报错","link":"#分包后打包-preview-报错","children":[]},{"level":3,"title":"引用的包中 esm 与 commonjs 语法混用，报错","slug":"引用的包中-esm-与-commonjs-语法混用-报错","link":"#引用的包中-esm-与-commonjs-语法混用-报错","children":[]},{"level":3,"title":"资源用 cdn 引入，报错 Uncaught TypeError: Failed to resolve module specifier “echarts”. Relative references must start with either “/”, “./”, or “…/”.","slug":"资源用-cdn-引入-报错-uncaught-typeerror-failed-to-resolve-module-specifier-echarts-relative-references-must-start-with-either-or","link":"#资源用-cdn-引入-报错-uncaught-typeerror-failed-to-resolve-module-specifier-echarts-relative-references-must-start-with-either-or","children":[]},{"level":3,"title":"打包时出现 warning: \\"@charset\\" must be the first rule in the file 警告","slug":"打包时出现-warning-charset-must-be-the-first-rule-in-the-file-警告","link":"#打包时出现-warning-charset-must-be-the-first-rule-in-the-file-警告","children":[]}]}],"git":{"createdTime":1679071923000,"updatedTime":1679113796000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":2}]},"readingTime":{"minutes":10.48,"words":3145},"filePathRelative":"实际项目/vite2-project-practices.md","localizedDate":"2022年8月4日","excerpt":"<blockquote>\\n<p><code>Vite1</code>仅仅试用过，<code>Vite2</code>已经更新了，全新插件架构，丝滑的开发体验，和<code>Vue3</code>的完美结合。 出于对尤大的信任与新技术的追求，在做毕设的我尝试着把项目移植到 Vite2 上。</p>\\n<p><a href=\\"https://cn.vitejs.dev/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Vite2官方文档</a>（看了一个星期的英文文档才发现原来中文文档也更新了 T.T）</p>\\n</blockquote>\\n<h2>目标</h2>","autoDesc":true}');export{ln as comp,un as data};
