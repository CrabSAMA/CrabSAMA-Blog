import{_ as o,c as t,i as r,o as a}from"./app-C8CmrpRJ.js";const c={};function m(n,e){return a(),t("div",null,e[0]||(e[0]=[r('<h1 id="chrome-devtool-protocol-模拟组合键" tabindex="-1"><a class="header-anchor" href="#chrome-devtool-protocol-模拟组合键"><span>Chrome Devtool Protocol 模拟组合键</span></a></h1><p>使用 CDP 模拟键盘操作时，涉及到一些组合键的 case 时，需要关注 <code>Input.dispatchKeyEvent</code> 中的 <code>commands</code> 属性。</p><p>最开始的时候我是直接通过 CDP 发送指定的组合键，并没有传 <code>commands</code> 属性，然后发现按键事件是成功发送了，但是并没有触发全选、复制、粘贴等操作，但我使用 playwright 去测试的时候，却发现 playwright 的模拟按键操作可以实现。我们知道 playwright 也是基于 CDP 实现的模拟操作，因此我去查看了 playwright 的源码，发现了 <code>commands</code> 属性是解决问题的关键。</p><p>比如在发送 Command + A 这种组合键时，它意味着全选，所以我们需要在 <code>a</code> 键 <code>keydown</code> 时发出 <code>selectAll</code> 的 command，就可以实现发送组合键实现全选的行为，如果不带上这个 command 浏览器将不会执行全选这个行为。</p><p>参考 playwright 中有这个映射表：<br><a href="https://github.com/microsoft/playwright/blob/d4ad520a9bf0fea78b610c065af0b0c896229666/packages/playwright-core/src/server/macEditingCommands.ts" target="_blank" rel="noopener noreferrer">https://github.com/microsoft/playwright/blob/d4ad520a9bf0fea78b610c065af0b0c896229666/packages/playwright-core/src/server/macEditingCommands.ts</a></p><p>这里面列出来了组合键对应的浏览器 editor 行为。</p><p>全部行为可以在 CDP 文档中提供的这个链接看到：<br><a href="https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h%E3%80%82" target="_blank" rel="noopener noreferrer">https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h。</a></p><p>同时在查看 playwright 源码的时候也有额外的收获：</p><p>通过看 playwright 源码发现它的实现是一个 client server 模型，client 是跑测试代码的地方，然后 client 给 server 发信息通信，告诉 server 发 CDP 命令给到浏览器。所以我直接在 client 打断点看不到对应的 CDP 命令，我跑到了 server 端那里打断点和 log 最后才看到关键点在 commands 这个属性上。</p><p>playwirght 键盘映射：<br><a href="https://github.com/microsoft/playwright/blob/d4ad520a9bf0fea78b610c065af0b0c896229666/packages/playwright-core/src/server/usKeyboardLayout.ts" target="_blank" rel="noopener noreferrer">https://github.com/microsoft/playwright/blob/d4ad520a9bf0fea78b610c065af0b0c896229666/packages/playwright-core/src/server/usKeyboardLayout.ts</a></p><p>上面这个键盘映射的 map 可以用到自己的项目中，就不用每次都要通过 event 反推具体某个键的 <code>keyCode</code> 和 <code>key</code> 了。</p>',11)]))}const d=o(c,[["render",m],["__file","cdp-keyborad-commands.html.vue"]]),i=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/cdp-keyborad-commands.html","title":"Chrome Devtool Protocol 模拟组合键","lang":"zh-CN","frontmatter":{"title":"Chrome Devtool Protocol 模拟组合键","date":"2024-12-15T07:49:29.000Z","category":["学习笔记"],"tag":["Chrome Extension","RPA"],"description":"Chrome Devtool Protocol 模拟组合键 使用 CDP 模拟键盘操作时，涉及到一些组合键的 case 时，需要关注 Input.dispatchKeyEvent 中的 commands 属性。 最开始的时候我是直接通过 CDP 发送指定的组合键，并没有传 commands 属性，然后发现按键事件是成功发送了，但是并没有触发全选、复制、...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/cdp-keyborad-commands.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"Chrome Devtool Protocol 模拟组合键"}],["meta",{"property":"og:description","content":"Chrome Devtool Protocol 模拟组合键 使用 CDP 模拟键盘操作时，涉及到一些组合键的 case 时，需要关注 Input.dispatchKeyEvent 中的 commands 属性。 最开始的时候我是直接通过 CDP 发送指定的组合键，并没有传 commands 属性，然后发现按键事件是成功发送了，但是并没有触发全选、复制、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-15T07:58:29.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"Chrome Extension"}],["meta",{"property":"article:tag","content":"RPA"}],["meta",{"property":"article:published_time","content":"2024-12-15T07:49:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-15T07:58:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Chrome Devtool Protocol 模拟组合键\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-15T07:49:29.000Z\\",\\"dateModified\\":\\"2024-12-15T07:58:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[],"git":{"createdTime":1734249509000,"updatedTime":1734249509000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":1}]},"readingTime":{"minutes":1.63,"words":488},"filePathRelative":"学习笔记/cdp-keyborad-commands.md","localizedDate":"2024年12月15日","excerpt":"\\n<p>使用 CDP 模拟键盘操作时，涉及到一些组合键的 case 时，需要关注 <code>Input.dispatchKeyEvent</code> 中的 <code>commands</code> 属性。</p>\\n<p>最开始的时候我是直接通过 CDP 发送指定的组合键，并没有传 <code>commands</code> 属性，然后发现按键事件是成功发送了，但是并没有触发全选、复制、粘贴等操作，但我使用 playwright 去测试的时候，却发现 playwright 的模拟按键操作可以实现。我们知道 playwright 也是基于 CDP 实现的模拟操作，因此我去查看了 playwright 的源码，发现了 <code>commands</code> 属性是解决问题的关键。</p>","autoDesc":true}');export{d as comp,i as data};
