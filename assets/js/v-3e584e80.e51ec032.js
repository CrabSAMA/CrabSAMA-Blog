"use strict";(self.webpackChunkcrabsama_blog=self.webpackChunkcrabsama_blog||[]).push([[665],{1596:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-3e584e80",path:"/JavaScript/prototype.html",title:"Prototype",lang:"zh-CN",frontmatter:{title:"Prototype",sidebar:"auto",categories:["JavaScript"]},excerpt:"",headers:[{level:2,title:"方便理解的代码",slug:"方便理解的代码",children:[]}],git:{createdTime:1652167657e3,updatedTime:1652173144e3,contributors:[{name:"CrabSAMA",email:"71915282@qq.com",commits:2}]},filePathRelative:"JavaScript/prototype.md"}},5139:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var t=a(6252);const p=a.p+"assets/img/prototype.0f37287f.png",o=(0,t._)("p",null,"帮你彻底搞懂JS中的PROTOTYPE、__PROTO__与CONSTRUCTOR（图解）",-1),e={href:"https://blog.csdn.net/cc18868876837/article/details/81211729",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("CSDN链接"),l=(0,t.uE)('<ol><li>我们需要牢记两点：①_proto_和_constructor_属性是<strong>对象</strong>所独有的；② _prototype_属性是<strong>函数</strong>所独有的，因为函数也是一种对象，所以函数也拥有_proto_和_constructor_属性。</li><li>_proto_属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的_proto_属性所指向的那个对象（父对象）里找，一直找，直到_proto_属性的终点null，再往上找就相当于在null上取值，会报错。通过_proto_属性将对象连接起来的这条链路即我们所谓的<strong>原型链</strong>。</li><li>_prototype_属性的作用就是让该<strong>函数所实例化的对象</strong>们都可以找到<strong>公用的属性和方法</strong>，即f1.<em>proto</em> === Foo.<em>prototype</em>。</li><li>_constructor_属性的含义就是指向<strong>该对象的构造函数</strong>，所有函数（此时看成对象了）最终的构造函数都指向Function。</li></ol><p><img src="https://img-blog.csdnimg.cn/20190311194017886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NjMTg4Njg4NzY4Mzc=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p style="text-align:center;">原型链解释图</p><hr><h2 id="方便理解的代码" tabindex="-1"><a class="header-anchor" href="#方便理解的代码" aria-hidden="true">#</a> 方便理解的代码</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 指向 Function 的 prototype</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>\\_\\_proto\\_\\_<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Person.prototype.\\_\\_proto\\_\\_ 指向 Object.prototype</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>\\_\\_proto\\_\\_<span class="token punctuation">)</span><span class="token punctuation">;</span>  \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>\\_\\_proto\\_\\_<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// constructor 从对象指向一个函数 即自身的构造函数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>  \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><img src="'+p+'" alt=""></p><p style="text-align:center;">运行结果</p>',8),u={},r=(0,a(3744).Z)(u,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)(t.HY,null,[(0,t._)("blockquote",null,[o,(0,t._)("p",null,[(0,t._)("a",e,[c,(0,t.Wm)(a)])])]),l],64)}]])}}]);