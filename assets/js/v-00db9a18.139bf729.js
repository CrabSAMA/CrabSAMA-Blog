"use strict";(self.webpackChunkcrabsama_blog=self.webpackChunkcrabsama_blog||[]).push([[5637],{1666:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-00db9a18",path:"/%E7%AC%94%E8%AF%95%E9%A2%98/js-type-changed.html",title:"js类型转换",lang:"zh-CN",frontmatter:{title:"js类型转换",lastUpdated:!0,sidebar:"auto",categories:["笔试题"]},excerpt:"",headers:[{level:2,title:"《JavaScript权威指南》的部分相关知识点",slug:"《javascript权威指南》的部分相关知识点",children:[]}],git:{createdTime:1652170033e3,updatedTime:1652170033e3,contributors:[{name:"CrabSAMA",email:"71915282@qq.com",commits:1}]},filePathRelative:"笔试题/js-type-changed.md"}},918:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});const t=(0,a(6252).uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>\\<span class="token punctuation">[</span>\\<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>\\<span class="token punctuation">[</span>\\<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">)</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><p>得到的结果： true true false</p><p>此题考察类型转换，三元运算符先**“分清是非”<strong>，再决定今后该走哪条路，“==”运算符比较</strong>“喜欢”**Number类型。（我就不严谨地这么一说，若要刨根问底，请看《JavaScript权威指南》）</p><p>下面是题目的类型转换结果：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">Boolean</span><span class="token punctuation">(</span>\\<span class="token punctuation">[</span>\\<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\n<span class="token function">Number</span><span class="token punctuation">(</span>\\<span class="token punctuation">[</span>\\<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>因此：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>\\<span class="token punctuation">[</span>\\<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span>fasle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =&gt; console.log((true)?true:false);</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\\<span class="token punctuation">[</span>\\<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; console.log(0==0?true:false);</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; console.log((NaN==0)?true:false);</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="《javascript权威指南》的部分相关知识点" tabindex="-1"><a class="header-anchor" href="#《javascript权威指南》的部分相关知识点" aria-hidden="true">#</a> 《JavaScript权威指南》的部分相关知识点</h2><hr><p><strong>“==”运算符（两个操作数的类型不相同时）</strong></p><ul><li>如果一个值是**<em>null</em><strong>，另一个值是</strong><em>undefined</em><strong>，则它们</strong>相等**</li><li>如果一个值是<strong>数字</strong>，另一个值是<strong>字符串</strong>，先将<strong>字符串转换为数字</strong>，然后使用转换后的值进行比较。</li><li>如果其中一个值是<strong>true</strong>，则将其<strong>转换为1</strong>再进行比较。如果其中的一个值是<strong>false</strong>，则将其<strong>转换为0</strong>再进行比较。</li><li>如果一个值是<strong>对象</strong>，另一个值是<strong>数字</strong>或<strong>字符串</strong>，则将<strong>对象转换为原始值</strong>，再进行比较。</li></ul><p><strong>对象到数字的转换</strong></p><ul><li>如果对象具有valueOf()方法，后者返回一个原始值，则JavaScript将这个原始值转换为数字（如果需要的话）并返回一个数字。</li><li>否则，如果对象具有toString()方法，后者返回一个原始值，则JavaScript将其转换并返回。（对象的toString()方法返回一个字符串直接量（作者所说的原始值），JavaScript将这个字符串转换为数字类型，并返回这个数字）。</li><li>否则，JavaScript抛出一个类型错误异常。</li></ul><p><strong>空数组转换为数字0</strong></p><ul><li>数组继承了默认的valueOf()方法，这个方法返回一个对象而不是一个原始值，因此，数组到数字的转换则调用toString()方法。空数组转换为空字符串，空字符串转换为数字0。<code>（Number.valueOf(Array.toString()) =&gt; 0）</code></li></ul>',16),p={},o=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])}}]);