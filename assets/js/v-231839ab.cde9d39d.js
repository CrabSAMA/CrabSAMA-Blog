"use strict";(self.webpackChunkcrabsama_blog=self.webpackChunkcrabsama_blog||[]).push([[44],{8839:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-231839ab",path:"/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/eslint%E6%8F%90%E4%BA%A4%E6%97%B6%E6%8B%A6%E6%88%AA.html",title:"eslint 提交时拦截",lang:"zh-CN",frontmatter:{title:"eslint 提交时拦截",sidebar:"auto",categories:["开发规范"]},excerpt:"",headers:[{level:2,title:"说在前面",slug:"说在前面",children:[]},{level:2,title:"先看效果",slug:"先看效果",children:[]},{level:2,title:"使用到的工具",slug:"使用到的工具",children:[]},{level:2,title:"安装",slug:"安装",children:[]},{level:2,title:"husky 钩子 pre-commit 配置",slug:"husky-钩子-pre-commit-配置",children:[]}],git:{createdTime:1652167657e3,updatedTime:1652167657e3,contributors:[{name:"CrabSAMA",email:"71915282@qq.com",commits:1}]},filePathRelative:"开发规范/eslint提交时拦截.md"}},9364:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var e=a(6252);const t=a.p+"assets/img/image-20201215152650015.eaffb07b.png",l=(0,e._)("ol",null,[(0,e._)("li",null,[(0,e.Uk)("是什么？ "),(0,e._)("ol",null,[(0,e._)("li",null,"一个npm包，可以对代码风格和基础语法作检查，实时报错提示")])]),(0,e._)("li",null,[(0,e.Uk)("好处 "),(0,e._)("ol",null,[(0,e._)("li",null,"解决代码风格不统一的问题"),(0,e._)("li",null,"还可以检测到一些基础语法错误")])])],-1),i=(0,e._)("h2",{id:"说在前面",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#说在前面","aria-hidden":"true"},"#"),(0,e.Uk)(" 说在前面")],-1),p=(0,e.Uk)("如果想了解如何在 IDE 中配置 eslint，可以看"),r={href:"https://wiki.huolala.work/pages/viewpage.action?pageId=45918046",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("这篇 wiki"),c=(0,e.Uk)("。"),u=(0,e.uE)('<hr><h2 id="先看效果" tabindex="-1"><a class="header-anchor" href="#先看效果" aria-hidden="true">#</a> 先看效果</h2><p><img src="'+t+'" alt="image-20201215152650015"></p><p>以这个为例，在代码中我们定义了一个 This 的常量，但是在代码中并没有使用到它，这是违反 eslint 规则的，因此这里马上就被 IDE 识别出来并且标红提示。平时使用过 eslint 的小伙伴应该知道，如果是一些小问题（例如<strong>字符串</strong>应该用单引号而不是双引号）这种问题，在保存代码时可以被 auto fix 掉，但是上面例子的这个问题，因为涉及到一个变量/常量，eslint 是不会擅自将其删掉来修改这个问题的。所以如果我们使用 <code>eslint --fix</code> 修复的话，eslint 会报错让我们自行修改。我们可以利用这个错误，来防止没有通过 eslint 的代码被 commit。</p><p><strong>总结一下： 在我们提交代码时，先自动使用eslint检查代码，并自动修复错误，在修复不了的时候，报错给我们。并且报错后此次的commit不会提交。</strong></p><p>下面来看看如何进行配置。</p><h2 id="使用到的工具" tabindex="-1"><a class="header-anchor" href="#使用到的工具" aria-hidden="true">#</a> 使用到的工具</h2><ul><li>husky。一个 git 钩子工具，在这个需求中我们主要使用到了 pre-commit 钩子。通俗点来说，就是 husky 可以在你 commit 之前帮你做一些事情。</li><li>eslint。代码检查工具，负责代码的错误检查与修复。</li><li>lint-staged。在你<strong>提交的文件</strong>中，执行自定义的指令。（如果不想每次都检查目录下的所有文件，用这个准没错😋）</li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>安装 husky，lint-staged</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>npm i -D husky lint-staged pretty-quick\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="husky-钩子-pre-commit-配置" tabindex="-1"><a class="header-anchor" href="#husky-钩子-pre-commit-配置" aria-hidden="true">#</a> husky 钩子 pre-commit 配置</h2><p>在 package.json 中：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;husky&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;hooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n     \t.......\n      <span class="token property">&quot;pre-commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lint-staged&quot;</span>  <span class="token comment">// pre-commit，提交前的钩子</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 此处可以配置文件夹和文件类型的范围</span>\n    <span class="token property">&quot;src/**/*.{js,vue}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;eslint --fix&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 先使用 eslint 进行自动修复</span>\n      <span class="token string">&quot;git add&quot;</span>  <span class="token comment">// 通过的话执行 git</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>husky 会在你提交前，调用 pre-commit 钩子，执行 lint-staged，用 eslint 的规则进行检查，如果有不符合规则且无法自动修复的，就会停止此次提交。如果都通过了就会将代码添加到 stage，然后 commit。</p>',15),m={},d=(0,a(3744).Z)(m,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)(e.HY,null,[l,i,(0,e._)("p",null,[p,(0,e._)("a",r,[o,(0,e.Wm)(a)]),c]),u],64)}]])}}]);