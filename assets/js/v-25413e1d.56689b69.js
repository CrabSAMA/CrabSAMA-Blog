"use strict";(self.webpackChunkcrabsama_blog=self.webpackChunkcrabsama_blog||[]).push([[5101],{5347:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-25413e1d",path:"/Node.js/URL.html",title:"URL",lang:"zh-CN",frontmatter:{title:"URL",date:"2020-07-09T07:01:49.000Z",lastUpdated:!0,categories:["Node.js"]},excerpt:"",headers:[{level:2,title:"parse方法",slug:"parse方法",children:[]},{level:2,title:"format方法",slug:"format方法",children:[]},{level:2,title:"resolve方法",slug:"resolve方法",children:[]}],git:{createdTime:16552117e5,updatedTime:16552117e5,contributors:[{name:"CrabSAMA",email:"71915282@qq.com",commits:1}]},filePathRelative:"Node.js/URL.md"}},3369:(s,n,a)=>{a.r(n),a.d(n,{default:()=>i});var e=a(6252);const p=a.p+"assets/img/image-20220614202420009.aec69ce6.png",r=(0,e._)("strong",null,"官方文档：",-1),t={href:"http://nodejs.cn/api/url.html",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("http://nodejs.cn/api/url.html"),c=(0,e.uE)('<p>完整的<code>URL</code>的各组成部分：</p><p><img src="'+p+'" alt="image-20220614202420009"></p><h2 id="parse方法" tabindex="-1"><a class="header-anchor" href="#parse方法" aria-hidden="true">#</a> parse方法</h2><p>我们可以使用<code>.parse</code>方法来将一个<code>URL</code>字符串转换为<code>URL</code>对象，示例如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">/* =&gt;\n{ protocol: &#39;http:&#39;,\n  auth: &#39;user:pass&#39;,\n  host: &#39;host.com:8080&#39;,\n  port: &#39;8080&#39;,\n  hostname: &#39;host.com&#39;,\n  hash: &#39;#hash&#39;,\n  search: &#39;?query=string&#39;,\n  query: &#39;query=string&#39;,\n  pathname: &#39;/p/a/t/h&#39;,\n  path: &#39;/p/a/t/h?query=string&#39;,\n  href: &#39;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&#39; }\n*/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><code>.parse</code>方法还支持第二个和第三个布尔类型可选参数。 第二个参数等于<code>true</code>时，该方法返回的<code>URL</code>对象中，<code>query</code>字段不再是一个字符串，而是一个经过<code>querystring</code>模块转换后的参数对象。 第三个参数等于<code>true</code>时，该方法可以正确解析不带协议头的URL，例如www.example.com/foo/bar。</p><h2 id="format方法" tabindex="-1"><a class="header-anchor" href="#format方法" aria-hidden="true">#</a> format方法</h2><p><code>format</code>方法允许将一个<code>URL</code>对象转换为<code>URL</code>字符串，示例如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>url<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">protocol</span><span class="token operator">:</span> <span class="token string">&#39;http:&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;www.example.com&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">&#39;/p/a/t/h&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">search</span><span class="token operator">:</span> <span class="token string">&#39;query=string&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/* =&gt;\n&#39;http://www.example.com/p/a/t/h?query=string&#39;\n*/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="resolve方法" tabindex="-1"><a class="header-anchor" href="#resolve方法" aria-hidden="true">#</a> resolve方法</h2><p><code>.resolve</code>方法可以用于拼接<code>URL</code>，示例如下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>url<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.example.com/foo/bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../baz&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">/* =&gt;\nhttp://www.example.com/baz\n*/</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',12),o={},i=(0,a(3744).Z)(o,[["render",function(s,n){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)(e.HY,null,[(0,e._)("p",null,[r,(0,e._)("a",t,[l,(0,e.Wm)(a)])]),c],64)}]])}}]);