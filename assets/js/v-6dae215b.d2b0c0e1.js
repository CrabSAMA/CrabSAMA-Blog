"use strict";(self.webpackChunkcrabsama_blog=self.webpackChunkcrabsama_blog||[]).push([[7880],{5773:(e,n,s)=>{s.r(n),s.d(n,{data:()=>o});const o={key:"v-6dae215b",path:"/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/husky4-to-5.html",title:"Git Hook 插件——husky4.x升级到5.+指南",lang:"zh-CN",frontmatter:{title:"Git Hook 插件——husky4.x升级到5.+指南",sidebar:"auto",categories:["前端工程化"]},excerpt:"",headers:[],git:{createdTime:1659599852e3,updatedTime:1659599852e3,contributors:[{name:"CrabSAMA",email:"71915282@qq.com",commits:1}]},filePathRelative:"前端工程化/husky4-to-5.md"}},8093:(e,n,s)=>{s.r(n),s.d(n,{default:()=>C});var o=s(6252);const l=(0,o._)("p",null,[(0,o.Uk)("由于 "),(0,o._)("code",null,"husky"),(0,o.Uk)(" 这个插件在升级到 5.+ 的版本后有一个配置上的更新，因此需要对现有项目中的配置文件进行重新配置。如果现在有项目使用 4.x 版本想升级的也可以进行升级。")],-1),a=(0,o.Uk)("附上"),c={href:"https://typicode.github.io/husky/#/?id=migrate-from-v4-to-v7",target:"_blank",rel:"noopener noreferrer"},t=(0,o.Uk)("官方文档"),i=(0,o.Uk)("，有什么问题可以先自己看一下官方文档~"),u=(0,o.uE)('<ol><li><p>升级<code>husky</code>版本（如果不需要可以跳过）</p><p>更改 package.json 里面的版本号为最新，然后<code>sudo lnpm install</code>即可。</p></li><li><p>初始化新版 <code>husky</code></p><p>新版 <code>husky</code> 需要有一个 <code>install</code> 的操作，安装新版后需要执行<code>husky install</code>命令，<strong>刚 <code>clone</code> 下来的项目也需要进行 <code>install</code> 操作</strong>，同理。</p></li><li><p>根据之前的配置文件重新配置</p><p>一般来说，现有项目的 <code>husky</code> 配置都在 <code>package.json</code> 中，可以看到有 <code>husky</code> 的相关配置，例如：</p></li></ol><div class="language-JSON ext-JSON line-numbers-mode"><pre class="language-JSON"><code>// package.json\n{\n    ...\n    &quot;husky&quot;: {\n      &quot;hooks&quot;: {\n        &quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot;,\n        &quot;pre-commit&quot;: &quot;lint-staged&quot;\n      }\n    },\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这里其实就是定义了两个 <code>hook</code>，在新版 <code>husky</code> 中定义 <code>hook</code> 的方式更改为了命令行，如果想要新增 <code>hook</code>，需要执行：</p><div class="language-Shell ext-Shell line-numbers-mode"><pre class="language-Shell"><code>npx husky add .husky/pre-commit &quot;lint-staged&quot;\ngit add .husky/pre-commit\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',4),d=(0,o.Uk)("以上面的配置为例，我们需要在新版 "),r=(0,o._)("code",null,"husky",-1),p=(0,o.Uk)(" 中添加两个钩子："),m=(0,o._)("code",null,"commit-msg",-1),k=(0,o.Uk)(" 和 "),h=(0,o._)("code",null,"pre-commit",-1),b=(0,o.Uk)("，那就执行两次上面的命令即可。但是在新版 "),g=(0,o._)("code",null,"husky",-1),y=(0,o.Uk)(" 中还有一些变化，一个比较重要的点就是 "),_=(0,o._)("code",null,"HUSKY_GIT_PARAMS",-1),q=(0,o.Uk)(" 这个环境变量不在了，要使用 $1、$2 这种方式替代（"),v={href:"https://typicode.github.io/husky/#/?id=husky_git_params-ie-commitlint-",target:"_blank",rel:"noopener noreferrer"},U=(0,o.Uk)("文档"),S=(0,o.Uk)("），因此添加 "),f=(0,o._)("code",null,"commlint",-1),x=(0,o.Uk)(" 的命令应该是："),A=(0,o.uE)('<div class="language-Shell ext-Shell line-numbers-mode"><pre class="language-Shell"><code>npx husky add .husky/commit-msg &quot;npx --no-install commitlint --edit $1&quot;\ngit add .husky/commit-msg\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>在上述配置完成后，就可以重试 <code>commit</code> 操作，看看是否 <code>husky</code> 是否正常运行啦！</strong></p>',2),E={},C=(0,s(3744).Z)(E,[["render",function(e,n){const s=(0,o.up)("ExternalLinkIcon");return(0,o.wg)(),(0,o.iD)(o.HY,null,[l,(0,o._)("p",null,[a,(0,o._)("a",c,[t,(0,o.Wm)(s)]),i]),u,(0,o._)("p",null,[d,r,p,m,k,h,b,g,y,_,q,(0,o._)("a",v,[U,(0,o.Wm)(s)]),S,f,x]),A],64)}]])}}]);