"use strict";(self.webpackChunkcrabsama_blog=self.webpackChunkcrabsama_blog||[]).push([[4473],{4299:(a,n,e)=>{e.r(n),e.d(n,{data:()=>t});const t={key:"v-3fe8f5fe",path:"/Node.js/path.html",title:"Path路径",lang:"zh-CN",frontmatter:{title:"Path路径",date:"2020-07-09T01:28:55.000Z",lastUpdated:!0,categories:["Node.js"]},excerpt:"",headers:[{level:2,title:"path.normalize",slug:"path-normalize",children:[]},{level:2,title:"path.join",slug:"path-join",children:[]},{level:2,title:"path.extname",slug:"path-extname",children:[]}],git:{createdTime:1656301772e3,updatedTime:1656301772e3,contributors:[{name:"CrabSAMA",email:"71915282@qq.com",commits:1}]},filePathRelative:"Node.js/path.md"}},2542:(a,n,e)=>{e.r(n),e.d(n,{default:()=>g});var t=e(6252);const s=(0,t._)("strong",null,"官方文档：",-1),p={href:"http://nodejs.org/api/path.html",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("http://nodejs.org/api/path.html"),l=(0,t.Uk)(" 操作文件时难免不与文件路径打交道。"),i=(0,t._)("code",null,"NodeJS",-1),c=(0,t.Uk)("提供了"),r=(0,t._)("code",null,"path",-1),d=(0,t.Uk)("内置模块来简化路径相关操作，并提升代码可读性。以下分别介绍几个常用的"),u=(0,t._)("code",null,"API",-1),h=(0,t.Uk)("。"),m=(0,t.uE)('<h2 id="path-normalize" tabindex="-1"><a class="header-anchor" href="#path-normalize" aria-hidden="true">#</a> <code>path.normalize</code></h2><p>将传入的路径转换为标准路径，具体讲的话，除了解析路径中的.与..外，还能去掉多余的斜杠。如果有程序需要使用路径作为某些数据的索引，但又允许用户随意输入路径时，就需要使用该方法保证路径的唯一性。</p><p>**坑出没注意：**标准化之后的路径里的斜杠在Windows系统下是\\，而在Linux系统下是/。如果想保证任何系统下都使用/作为路径分隔符的话，需要用<code>.replace(/\\\\\\\\/g, &#39;/&#39;)</code>再替换一下标准路径。</p><h2 id="path-join" tabindex="-1"><a class="header-anchor" href="#path-join" aria-hidden="true">#</a> <code>path.join</code></h2><p>将传入的多个路径拼接为标准路径。该方法可避免手工拼接路径字符串的繁琐，并且能在不同系统下正确使用相应的路径分隔符。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;foo/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baz/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &quot;foo/bar&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="path-extname" tabindex="-1"><a class="header-anchor" href="#path-extname" aria-hidden="true">#</a> <code>path.extname</code></h2><p>当我们需要根据不同文件扩展名做不同操作时，该方法就显得很好用。以下是一个例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&#39;foo/bar.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; &quot;.js&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>',9),k={},g=(0,e(3744).Z)(k,[["render",function(a,n){const e=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)(t.HY,null,[(0,t._)("p",null,[s,(0,t._)("a",p,[o,(0,t.Wm)(e)]),l,i,c,r,d,u,h]),m],64)}]])}}]);