"use strict";(self.webpackChunkcrabsama_blog=self.webpackChunkcrabsama_blog||[]).push([[6368],{4332:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-510eecdd",path:"/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/unit-test-function.html",title:"公用方法单元测试",lang:"zh-CN",frontmatter:{title:"公用方法单元测试",sidebar:"auto",categories:["前端工程化"]},excerpt:"",headers:[{level:2,title:"使用场景",slug:"使用场景",children:[]},{level:2,title:"框架选型",slug:"框架选型",children:[{level:3,title:"安装",slug:"安装",children:[]},{level:3,title:"配置",slug:"配置",children:[]}]},{level:2,title:"测试工作",slug:"测试工作",children:[{level:3,title:"基础概念",slug:"基础概念",children:[]},{level:3,title:"实操",slug:"实操",children:[]}]},{level:2,title:"代码覆盖率",slug:"代码覆盖率",children:[]}],git:{createdTime:1652170033e3,updatedTime:1652170033e3,contributors:[{name:"CrabSAMA",email:"71915282@qq.com",commits:1}]},filePathRelative:"前端工程化/unit-test-function.md"}},8323:(n,s,a)=>{a.r(s),a.d(s,{default:()=>j});var t=a(6252);const p=a.p+"assets/img/Lark20201222163421.c92f9631.png",e=a.p+"assets/img/image-20201222105658767.2474bf2c.png",o=a.p+"assets/img/Lark20201222163936.bf0d5ccf.png",c=(0,t._)("h2",{id:"使用场景",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#使用场景","aria-hidden":"true"},"#"),(0,t.Uk)(" 使用场景")],-1),u=(0,t._)("p",null,"公共 function 和 公共 vue component",-1),l=(0,t._)("h2",{id:"框架选型",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#框架选型","aria-hidden":"true"},"#"),(0,t.Uk)(" 框架选型")],-1),i={href:"https://jestjs.io/docs/zh-Hans/getting-started",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Uk)("Jest"),k=(0,t.Uk)(" 是功能最全的测试运行器。它所需的配置是最少的，默认安装了 JSDOM，内置断言且命令行的用户体验非常好。不过你需要一个能够将单文件组件导入到测试中的预处理器。我们已经创建了 "),b=(0,t._)("code",null,"vue-jest",-1),d=(0,t.Uk)(" 预处理器来处理最常见的单文件组件特性，但仍不是 "),m=(0,t._)("code",null,"vue-loader",-1),g=(0,t.Uk)(" 100% 的功能。"),q={href:"https://vue-test-utils.vuejs.org/zh/installation/#%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E8%BF%90%E8%A1%8C%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},f=(0,t.Uk)("摘自 Vue Test Utils 官网"),h=(0,t.uE)('<p>在公共 function 的单元测试中，使用了 <strong>Jest</strong> 作为测试框架。</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><p><code>npm install --save-dev jest @babel/plugin-transform-modules-commonjs</code></p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><p><code>npx jest --init</code></p><p><img src="'+p+'" alt=""></p><p>执行上述命令后根据命令行提示即可完成 jest 的初始化，得到一个位于根目录下的 jest.config.js 配置文件。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// package.json</span>\n<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jest&quot;</span>  <span class="token comment">// 运行 jest 会自动扫描目录下 *.test.js 与 *.spec.js 文件并运行</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 根目录下建立 .babelrc 配置文件</span>\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 在测试环境中使用 babel 以支持 es6 的 import module 语法</span>\n      <span class="token comment">// 本质上 node 是支持大多数新语法的，如果有其他的不支持可以自行配置所需的 babel plugin</span>\n      <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/plugin-transform-modules-commonjs&quot;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="测试工作" tabindex="-1"><a class="header-anchor" href="#测试工作" aria-hidden="true">#</a> 测试工作</h2><h3 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念" aria-hidden="true">#</a> 基础概念</h3><p>来看一段实例代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;number test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n\t<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;1 is true&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n\t\t<span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;2 is true&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n\t\t<span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>名词解释：</p><ul><li><strong>describe</strong> 描述, <code>decribe</code>会形成一个作用域</li><li><strong>it</strong> 断言</li><li><strong>expect</strong> 期望</li><li><strong>test</strong> 测试，类似<code>it</code></li></ul><p>实际写出来就是用 describe 包裹住一个模块的测试项目，然后使用 test / it 定义一个一个的测试项，向 expect 中传入执行后的结果，并使用 toBe() 等方法说明我们期望得到的结果。Jest 执行后就会自动判断两者是否相等，从而判断测试是否通过。</p><h3 id="实操" tabindex="-1"><a class="header-anchor" href="#实操" aria-hidden="true">#</a> 实操</h3><p>首先我们先在项目根目录下建立 test 文件夹用于归类测试的代码。一般我们按照“模块名.test.js”或者“模块名.spec.js”的规范来对测试代码文件进行命名（eg: deepCopy.js 对应的测试代码名就是 deepCopy.test.js）。</p><p>以 parse function 为例，首先我们要阅读方法，看看在这个方法中存在什么值得测试的点。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// parse.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">parse</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> key <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;json格式错误: &#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>可以看到，这个方法有两个参数：str 是传入的 json 字符串，而 key 可以帮助快速找到转换完成后对象的取值。我们可以从两个方面下手，找到应该测试的点：</p><ul><li>参数：类型、传值与否会导致方法不可用或报错</li><li>方法实现：实际代码实现中有没有会出现问题的点，比如测试是否能正确进入对应的 loop</li></ul><p>在上面的 parse function 中，有两个参数，因此首先我们测试参数相关的内容，在这里我考虑到了两个参数的四种情况：str 类型错误，str 不是 json 格式，传不存在的 key，key 类型错误。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// parse.test.js</span>\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;parse test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;str type error&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;str format error&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;a&quot;: &quot;b&quot;; &quot;c&quot;: &quot;d&quot;}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;key not include&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;}&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;key type error&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;}&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>接下来要考虑到的就是实际代码逻辑，这里我设定了两个场景：仅 parse 与 parse and get value。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// parse.test.js</span>\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;parse test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// ...</span>\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;only parse&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;parse and get value by key&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;a&quot;: &quot;b&quot;, &quot;c&quot;: &quot;d&quot;}&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>测试代码编写完成后，我们可以直接运行一下 <code>npm run test</code> 来看看成果。</p><p><img src="'+e+'" alt="image-20201222105658767"></p><p>这里可以看到，我们编写的测试代码成功通过了，证明在我们定义的测试环境下是没有问题的。但是不代表我们的代码就完全不会出错了，毕竟我们永远都想象不到我们的用户有多么奇葩。￣□￣｜｜</p><p>实际上，测试的工作就是需要我们自己去想象这个方法会出现什么样的问题，通过人为地设定一些场景，判断实际得出的结果与预期的结果是否相同来判定代码是否合格。这需要我们设身处地地想象这些方法的使用情景。</p><h2 id="代码覆盖率" tabindex="-1"><a class="header-anchor" href="#代码覆盖率" aria-hidden="true">#</a> 代码覆盖率</h2><p>代码覆盖率的意思就是我们的测试代码执行时跑过了多少地方，简单的来说：代码覆盖率 ＝ 代码的覆盖程度。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// package.json</span>\n<span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jest --coverage&quot;</span>  <span class="token comment">// 添加 --coverage 即可添加代码覆盖率的报告</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// jest.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ...</span>\n  <span class="token comment">// Jest 将要输出覆盖率到何处</span>\n  <span class="token literal-property property">coverageDirectory</span><span class="token operator">:</span> <span class="token string">&quot;&lt;rootDir&gt;/test/coverage&quot;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>上述配置做了两样事情，一是开启了代码覆盖率报告的生成，二是将代码覆盖率的输出目录指定到了根目录下的 test 文件夹中，保证了目录的整齐规范。在 jest.config.js 中还有许多其他的配置项，有兴趣的小伙伴可以自己研究一下。</p><p>打开其中的 lcov-report/index.html 文件，便通过可视化的方式查看代码覆盖率。</p><p><img src="'+o+'" alt="Lark20201222163936"></p><p>我们应该尽可能地增加测试的覆盖率，保证大多数测试都在绿色的状态下（80%以上）。</p>',36),v={},j=(0,a(3744).Z)(v,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)(t.HY,null,[c,u,l,(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t._)("strong",null,[(0,t._)("a",i,[r,(0,t.Wm)(a)])]),k,b,d,m,g]),(0,t._)("p",null,[(0,t._)("a",q,[f,(0,t.Wm)(a)])])]),h],64)}]])}}]);