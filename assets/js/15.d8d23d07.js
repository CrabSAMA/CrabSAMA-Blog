(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{508:function(t,s,a){t.exports=a.p+"assets/img/image-20201215152650015.f32ca8c3.png"},534:function(t,s,a){"use strict";a.r(s);var e=a(6),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("ol",[e("li",[t._v("是什么？\n"),e("ol",[e("li",[t._v("一个npm包，可以对代码风格和基础语法作检查，实时报错提示")])])]),t._v(" "),e("li",[t._v("好处\n"),e("ol",[e("li",[t._v("解决代码风格不统一的问题")]),t._v(" "),e("li",[t._v("还可以检测到一些基础语法错误")])])])]),t._v(" "),e("h2",{attrs:{id:"说在前面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说在前面"}},[t._v("#")]),t._v(" 说在前面")]),t._v(" "),e("p",[t._v("如果想了解如何在 IDE 中配置 eslint，可以看"),e("a",{attrs:{href:"https://wiki.huolala.work/pages/viewpage.action?pageId=45918046",target:"_blank",rel:"noopener noreferrer"}},[t._v("这篇 wiki"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"先看效果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#先看效果"}},[t._v("#")]),t._v(" 先看效果")]),t._v(" "),e("p",[e("img",{attrs:{src:a(508),alt:"image-20201215152650015"}})]),t._v(" "),e("p",[t._v("以这个为例，在代码中我们定义了一个 This 的常量，但是在代码中并没有使用到它，这是违反 eslint 规则的，因此这里马上就被 IDE 识别出来并且标红提示。平时使用过 eslint 的小伙伴应该知道，如果是一些小问题（例如"),e("strong",[t._v("字符串")]),t._v("应该用单引号而不是双引号）这种问题，在保存代码时可以被 auto fix 掉，但是上面例子的这个问题，因为涉及到一个变量/常量，eslint 是不会擅自将其删掉来修改这个问题的。所以如果我们使用 "),e("code",[t._v("eslint --fix")]),t._v(" 修复的话，eslint 会报错让我们自行修改。我们可以利用这个错误，来防止没有通过 eslint 的代码被 commit。")]),t._v(" "),e("p",[e("strong",[t._v("总结一下： 在我们提交代码时，先自动使用eslint检查代码，并自动修复错误，在修复不了的时候，报错给我们。并且报错后此次的commit不会提交。")])]),t._v(" "),e("p",[t._v("下面来看看如何进行配置。")]),t._v(" "),e("h2",{attrs:{id:"使用到的工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用到的工具"}},[t._v("#")]),t._v(" 使用到的工具")]),t._v(" "),e("ul",[e("li",[t._v("husky。一个 git 钩子工具，在这个需求中我们主要使用到了 pre-commit 钩子。通俗点来说，就是 husky 可以在你 commit 之前帮你做一些事情。")]),t._v(" "),e("li",[t._v("eslint。代码检查工具，负责代码的错误检查与修复。")]),t._v(" "),e("li",[t._v("lint-staged。在你"),e("strong",[t._v("提交的文件")]),t._v("中，执行自定义的指令。（如果不想每次都检查目录下的所有文件，用这个准没错😋）")])]),t._v(" "),e("h2",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),e("p",[t._v("安装 husky，lint-staged")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("npm i -D husky lint-staged pretty-quick\n")])])]),e("h2",{attrs:{id:"husky-钩子-pre-commit-配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#husky-钩子-pre-commit-配置"}},[t._v("#")]),t._v(" husky 钩子 pre-commit 配置")]),t._v(" "),e("p",[t._v("在 package.json 中：")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"husky"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"hooks"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     \t.......\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pre-commit"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lint-staged"')]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pre-commit，提交前的钩子")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint-staged"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此处可以配置文件夹和文件类型的范围")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"src/**/*.{js,vue}"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint --fix"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先使用 eslint 进行自动修复")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过的话执行 git")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("husky 会在你提交前，调用 pre-commit 钩子，执行 lint-staged，用 eslint 的规则进行检查，如果有不符合规则且无法自动修复的，就会停止此次提交。如果都通过了就会将代码添加到 stage，然后 commit。")])])}),[],!1,null,null,null);s.default=n.exports}}]);