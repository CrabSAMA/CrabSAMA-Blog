"use strict";(self.webpackChunkcrabsama_blog=self.webpackChunkcrabsama_blog||[]).push([[8615],{2958:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-5af74616",path:"/Node.js/text-encode.html",title:"文本编码",lang:"zh-CN",frontmatter:{title:"文本编码",date:"2020-07-09T02:15:04.000Z",lastUpdated:!0,categories:["Node.js"]},excerpt:"",headers:[{level:2,title:"BOM的移除",slug:"bom的移除",children:[]},{level:2,title:"GBK转UTF8",slug:"gbk转utf8",children:[]}],git:{createdTime:1656301772e3,updatedTime:1656301772e3,contributors:[{name:"CrabSAMA",email:"71915282@qq.com",commits:1}]},filePathRelative:"Node.js/text-encode.md"}},7197:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const e=(0,s(6252).uE)('<p>使用<code>NodeJS</code>编写前端工具时，操作得最多的是文本文件，因此也就涉及到了文件编码的处理问题。我们常用的文本编码有<code>UTF8</code>和<code>GBK</code>两种，并且<code>UTF8</code>文件还可能带有<code>BOM</code>。在读取不同编码的文本文件时，需要将文件内容转换为<code>JS</code>使用的<code>UTF8</code>编码字符串后才能正常处理。</p><h2 id="bom的移除" tabindex="-1"><a class="header-anchor" href="#bom的移除" aria-hidden="true">#</a> BOM的移除</h2><p><code>BOM</code>用于标记一个文本文件使用<code>Unicode</code>编码，其本身是一个<code>Unicode</code>字符<code>（&quot;\\\\uFEFF&quot;）</code>，位于文本文件头部。在不同的<code>Unicode</code>编码下，<code>BOM</code>字符对应的二进制字节如下：</p><table><thead><tr><th>Bytes</th><th>Encoding</th></tr></thead><tbody><tr><td>FE FF</td><td>UTF16BE</td></tr><tr><td>FF FF</td><td>UTF16LE</td></tr><tr><td>EF BB BF</td><td>UTF8</td></tr></tbody></table><p>因此，我们可以根据文本文件头几个字节等于啥来判断文件是否包含<code>BOM</code>，以及使用哪种<code>Unicode</code>编码。但是，BOM<code>字符</code>虽然起到了标记文件编码的作用，其本身却不属于文件内容的一部分，如果读取文本文件时不去掉<code>BOM</code>，在某些使用场景下就会有问题。例如我们把几个<code>JS</code>文件合并成一个文件后，如果文件中间含有<code>BOM</code>字符，就会导致浏览器<code>JS</code>语法错误。因此，使用<code>NodeJS</code>读取文本文件时，一般需要去掉<code>BOM</code>。例如，以下代码实现了识别和去除<code>UTF8 BOM</code>的功能。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">readText</span><span class="token punctuation">(</span><span class="token parameter">pathname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> bin <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>bin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0xEF</span> <span class="token operator">&amp;&amp;</span> bin<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0xBB</span> <span class="token operator">&amp;&amp;</span> bin<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0xBF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        bin <span class="token operator">=</span> bin<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> bin<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="gbk转utf8" tabindex="-1"><a class="header-anchor" href="#gbk转utf8" aria-hidden="true">#</a> GBK转UTF8</h2><p><code>NodeJS</code>支持在读取文本文件时，或者在<code>Buffer</code>转换为字符串时指定文本编码，但遗憾的是，<code>GBK</code>编码不在<code>NodeJS</code>自身支持范围内。因此，一般我们借助<code>iconv-lite</code>这个三方包来转换编码。使用<code>NPM</code>下载该包后，我们可以按下边方式编写一个读取<code>GBK</code>文本文件的函数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> iconv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;iconv-lite&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">readGBKText</span><span class="token punctuation">(</span><span class="token parameter">pathname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> bin <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> iconv<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>bin<span class="token punctuation">,</span> <span class="token string">&#39;gbk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',9),t={},p=(0,s(3744).Z)(t,[["render",function(n,a){return e}]])}}]);