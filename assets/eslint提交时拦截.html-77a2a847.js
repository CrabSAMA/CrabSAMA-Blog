const t=JSON.parse('{"key":"v-231839ab","path":"/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/eslint%E6%8F%90%E4%BA%A4%E6%97%B6%E6%8B%A6%E6%88%AA.html","title":"eslint 提交时拦截","lang":"zh-CN","frontmatter":{"title":"eslint 提交时拦截","date":"2021-11-03T07:33:40.000Z","lastUpdated":true,"category":["开发规范"],"description":"是什么？ 一个 npm 包，可以对代码风格和基础语法作检查，实时报错提示 好处 解决代码风格不统一的问题 还可以检测到一些基础语法错误 先看效果 image-20201215152650015 以这个为例，在代码中我们定义了一个 This 的常量，但是在代码中并没有使用到它，这是违反 eslint 规则的，因此这里马上就被 IDE 识别出来并且标红提示。平时使用过 eslint 的小伙伴应该知道，如果是一些小问题（例如字符串应该用单引号而不是双引号）这种问题，在保存代码时可以被 auto fix 掉，但是上面例子的这个问题，因为涉及到一个变量/常量，eslint 是不会擅自将其删掉来修改这个问题的。所以如果我们使用 eslint --fix 修复的话，eslint 会报错让我们自行修改。我们可以利用这个错误，来防止没有通过 eslint 的代码被 commit。","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/eslint%E6%8F%90%E4%BA%A4%E6%97%B6%E6%8B%A6%E6%88%AA.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"eslint 提交时拦截"}],["meta",{"property":"og:description","content":"是什么？ 一个 npm 包，可以对代码风格和基础语法作检查，实时报错提示 好处 解决代码风格不统一的问题 还可以检测到一些基础语法错误 先看效果 image-20201215152650015 以这个为例，在代码中我们定义了一个 This 的常量，但是在代码中并没有使用到它，这是违反 eslint 规则的，因此这里马上就被 IDE 识别出来并且标红提示。平时使用过 eslint 的小伙伴应该知道，如果是一些小问题（例如字符串应该用单引号而不是双引号）这种问题，在保存代码时可以被 auto fix 掉，但是上面例子的这个问题，因为涉及到一个变量/常量，eslint 是不会擅自将其删掉来修改这个问题的。所以如果我们使用 eslint --fix 修复的话，eslint 会报错让我们自行修改。我们可以利用这个错误，来防止没有通过 eslint 的代码被 commit。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://crabsama.github.io/CrabSAMA-Blog/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-17T16:52:03.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"eslint 提交时拦截"}],["meta",{"property":"article:published_time","content":"2021-11-03T07:33:40.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-17T16:52:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"eslint 提交时拦截\\",\\"image\\":[\\"https://crabsama.github.io/CrabSAMA-Blog/\\"],\\"datePublished\\":\\"2021-11-03T07:33:40.000Z\\",\\"dateModified\\":\\"2023-03-17T16:52:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"先看效果","slug":"先看效果","link":"#先看效果","children":[]},{"level":2,"title":"使用到的工具","slug":"使用到的工具","link":"#使用到的工具","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"husky 钩子 pre-commit 配置","slug":"husky-钩子-pre-commit-配置","link":"#husky-钩子-pre-commit-配置","children":[]}],"git":{"createdTime":1679071923000,"updatedTime":1679071923000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":1}]},"readingTime":{"minutes":2.11,"words":632},"filePathRelative":"开发规范/eslint提交时拦截.md","localizedDate":"2021年11月3日","excerpt":"<ol>\\n<li>是什么？\\n<ol>\\n<li>一个 npm 包，可以对代码风格和基础语法作检查，实时报错提示</li>\\n</ol>\\n</li>\\n<li>好处\\n<ol>\\n<li>解决代码风格不统一的问题</li>\\n<li>还可以检测到一些基础语法错误</li>\\n</ol>\\n</li>\\n</ol>\\n<h2> 先看效果</h2>\\n<figure><figcaption>image-20201215152650015</figcaption></figure>\\n<p>以这个为例，在代码中我们定义了一个 This 的常量，但是在代码中并没有使用到它，这是违反 eslint 规则的，因此这里马上就被 IDE 识别出来并且标红提示。平时使用过 eslint 的小伙伴应该知道，如果是一些小问题（例如<strong>字符串</strong>应该用单引号而不是双引号）这种问题，在保存代码时可以被 auto fix 掉，但是上面例子的这个问题，因为涉及到一个变量/常量，eslint 是不会擅自将其删掉来修改这个问题的。所以如果我们使用 <code>eslint --fix</code> 修复的话，eslint 会报错让我们自行修改。我们可以利用这个错误，来防止没有通过 eslint 的代码被 commit。</p>","autoDesc":true}');export{t as data};
