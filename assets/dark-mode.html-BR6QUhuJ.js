import{_ as e,c as i,i as t,o as a}from"./app-B0UMYhNd.js";const n={};function l(r,s){return a(),i("div",null,s[0]||(s[0]=[t(`<p>本质上就是通过判断某个时机来去修改样式，实现方案就分解成：时机、修改样式这两个问题了。</p><p>常见的方法有：</p><ul><li><p>媒体查询</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 系统设置浅色模式 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@media</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (prefers-color-scheme: light) {}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 系统设置深色模式 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@media</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (prefers-color-scheme: dark) {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过媒体查询可以获取到系统当前的设定，从而直接修改对应的样式。</p><p>在支持 css 变量的浏览器环境中，更常见的做法是通过媒体查询动态地修改 root 下面的 css 变量，然后具体的组件样式使用 css 变量来作为样式值，这样可以将样式都收拢到一个地方，方便维护。</p><p>这个方法的缺点是，浅色模式和深色模式会跟着系统设置来，并没有办法由用户手动地去切换。</p></li><li><p>data set + css 属性选择器</p><p>我们可以通过元素标签上的 data set 存放一些属性，自然也可以在根元素上去定义一个 data-theme 属性，属性值可以是 light 和 dark。</p><p>在用户第一次进入页面的时候，可以通过 <code>window.matchMedia(&#39;(prefers-color-scheme: dark)&#39;).matches</code> 来获取系统当前的设置，为 data-theme 属性配置一个默认值，然后通过 css 属性选择器来定义 css 变量，和上面的方法一样实现深色模式。</p><p>这个方法的好处是 data-theme 这个属性是可以由 js 修改的，我们可以做一个按钮或者选择器来给用户手动切换与自动跟随系统，这个也是现在许多系统都有提供的功能。同时由于有了 js 的加入，我们也可以将这个值记录在 localStorage 这种持久化存储里面，记录用户上次的使用习惯，在用户再次进入页面的时候就取出来，而不是通过媒体查询去查询了。</p></li></ul><p>总结一下现在常见的方法，<strong>时机</strong>这个东西的获取有现成的媒体查询能够获取默认值，然后也可以通过 localStorage 或者 state 等地方存储状态来控制是浅色模式还是深色模式。<strong>修改样式</strong>这一块可以通过 JavaScript 动态修改，也可以通过修改 css 样式来实现，目前常见的组件库都用到了 css 变量来作为样式值，那其实就可以通过 css 的属性选择器或者 JavaScript 直接修改样式值来实现了。</p>`,4)]))}const c=e(n,[["render",l]]),o=JSON.parse(`{"path":"/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/dark-mode.html","title":"暗夜模式实现","lang":"zh-CN","frontmatter":{"title":"暗夜模式实现","date":"2025-04-26T14:10:57.000Z","category":["解决方案"],"tag":["JavaScript","CSS"],"description":"本质上就是通过判断某个时机来去修改样式，实现方案就分解成：时机、修改样式这两个问题了。 常见的方法有： 媒体查询 通过媒体查询可以获取到系统当前的设定，从而直接修改对应的样式。 在支持 css 变量的浏览器环境中，更常见的做法是通过媒体查询动态地修改 root 下面的 css 变量，然后具体的组件样式使用 css 变量来作为样式值，这样可以将样式都收拢...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"暗夜模式实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-26T14:10:57.000Z\\",\\"dateModified\\":\\"2025-04-26T14:12:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"],["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/dark-mode.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"暗夜模式实现"}],["meta",{"property":"og:description","content":"本质上就是通过判断某个时机来去修改样式，实现方案就分解成：时机、修改样式这两个问题了。 常见的方法有： 媒体查询 通过媒体查询可以获取到系统当前的设定，从而直接修改对应的样式。 在支持 css 变量的浏览器环境中，更常见的做法是通过媒体查询动态地修改 root 下面的 css 变量，然后具体的组件样式使用 css 变量来作为样式值，这样可以将样式都收拢..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-26T14:12:38.000Z"}],["meta",{"property":"article:tag","content":"CSS"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2025-04-26T14:10:57.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-26T14:12:38.000Z"}]]},"git":{"createdTime":1745676758000,"updatedTime":1745676758000,"contributors":[{"name":"CrabSAMA","username":"CrabSAMA","email":"71915282@qq.com","commits":1,"url":"https://github.com/CrabSAMA"}]},"readingTime":{"minutes":2.22,"words":666},"filePathRelative":"解决方案/dark-mode.md","excerpt":"<p>本质上就是通过判断某个时机来去修改样式，实现方案就分解成：时机、修改样式这两个问题了。</p>\\n<p>常见的方法有：</p>\\n<ul>\\n<li>\\n<p>媒体查询</p>\\n<div class=\\"language-css line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"css\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-css\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">/* 系统设置浅色模式 */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">@media</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> (prefers-color-scheme: light) {}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">/* 系统设置深色模式 */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">@media</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> (prefers-color-scheme: dark) {}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>通过媒体查询可以获取到系统当前的设定，从而直接修改对应的样式。</p>\\n<p>在支持 css 变量的浏览器环境中，更常见的做法是通过媒体查询动态地修改 root 下面的 css 变量，然后具体的组件样式使用 css 变量来作为样式值，这样可以将样式都收拢到一个地方，方便维护。</p>\\n<p>这个方法的缺点是，浅色模式和深色模式会跟着系统设置来，并没有办法由用户手动地去切换。</p>\\n</li>\\n<li>\\n<p>data set + css 属性选择器</p>\\n<p>我们可以通过元素标签上的 data set 存放一些属性，自然也可以在根元素上去定义一个 data-theme 属性，属性值可以是 light 和 dark。</p>\\n<p>在用户第一次进入页面的时候，可以通过 <code>window.matchMedia('(prefers-color-scheme: dark)').matches</code> 来获取系统当前的设置，为 data-theme 属性配置一个默认值，然后通过 css 属性选择器来定义 css 变量，和上面的方法一样实现深色模式。</p>\\n<p>这个方法的好处是 data-theme 这个属性是可以由 js 修改的，我们可以做一个按钮或者选择器来给用户手动切换与自动跟随系统，这个也是现在许多系统都有提供的功能。同时由于有了 js 的加入，我们也可以将这个值记录在 localStorage 这种持久化存储里面，记录用户上次的使用习惯，在用户再次进入页面的时候就取出来，而不是通过媒体查询去查询了。</p>\\n</li>\\n</ul>","autoDesc":true}`);export{c as comp,o as data};
