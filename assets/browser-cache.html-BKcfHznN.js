import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as t,c as d,a as e,b as a,d as i,e as n}from"./app-CzTMLA3i.js";const s="/CrabSAMA-Blog/assets/image-20220627101135766-BtM-5-AK.png",g="/CrabSAMA-Blog/assets/image-20220627101147985-DcMtXSu1.png",l="/CrabSAMA-Blog/assets/image-20220627101229595-Du8I55Xn.png",p="/CrabSAMA-Blog/assets/image-20220627101238686-B9EqJwHU.png",h="/CrabSAMA-Blog/assets/image-20220627101248580-DTxRCV2d.png",m="/CrabSAMA-Blog/assets/image-20220627101258268-DA3EOiG8.png",f="/CrabSAMA-Blog/assets/image-20220627101307561-CE1JmCdL.png",u={},x={href:"https://www.jianshu.com/p/54cc04190252",target:"_blank",rel:"noopener noreferrer"},T=n('<h2 id="缓存位置" tabindex="-1"><a class="header-anchor" href="#缓存位置"><span><strong>缓存位置</strong></span></a></h2><ul><li><code>Service Worker</code><br><code>Service Worker</code> 是<strong>运行在浏览器背后的独立线程</strong>，一般可以用来实现缓存功能。</li></ul><p>使用 <code>Service Worker</code> 的话，传输协议必须为**<code>HTTPS</code><strong>。因为 <code>Service Worker</code> 中涉及到</strong>请求拦截**，所以必须使用 <code>HTTPS</code> 协议来保障安全。</p><p><code>Service Worker</code> 的缓存与浏览器其他内建的缓存机制不同，它可以让我们<strong>自由控制缓存哪些文件、如何匹配缓存、如何读取缓存</strong>，并且缓存是<strong>持续性</strong>的。</p><p><code>Service Worker</code> 实现缓存功能一般分为三个步骤：首先需要先注册 <code>Service Worker</code>，然后监听到 <code>install</code> 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。</p><p>当 <code>Service Worker</code> 没有命中缓存的时候，我们需要去调用 <code>fetch</code> 函数获取数据。也就是说，如果我们没有在 <code>Service Worker</code> 命中缓存的话，会<strong>根据缓存查找优先级去查找数据</strong>。但是不管我们是从 <code>Memory Cache</code> 中还是从网络请求中获取的数据，浏览器都会显示我们是从 <code>Service Worker</code> 中获取的内容。</p><ul><li><code>Memory Cache</code><br><code>Memory Cache</code> 也就是内存中的缓存，主要包含的是当前页面中已经抓取到的资源，例如页面上已经下载的样式、脚本、图片等。<strong>一旦我们关闭Tab页面，内存中的缓存也就被释放了</strong>。</li></ul><p>内存缓存中有一块重要的缓存资源是<code>preloader</code>相关指令（例如`<link rel="prefetch">`）下载的资源。</p><p>需要注意的是，<strong>内存缓存在缓存资源时并不关心返回资源的<code>HTTP</code>缓存头<code>Cache-Control</code>是什么值，同时资源的匹配也并非仅仅是对<code>URL</code>做匹配，还可能会对<code>Content-Type</code>，<code>CORS</code>等其他特征做校验</strong>。</p><ul><li><code>Disk Cache</code><br><code>Disk Cache</code> 也就是存储在硬盘中的缓存，<strong>比之 <code>Memory Cache</code> 胜在容量和存储时效性上。</strong></li></ul><p>在所有浏览器缓存中，<code>Disk Cache</code> 覆盖面基本是最大的。它会<strong>根据 <code>HTTP Herder</code> 中的字段</strong>判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。<strong>绝大部分的缓存都来自 <code>Disk Cache</code></strong>。</p><p>一般来说：对于大文件来说，大概率是不存储在内存中的，反之优先；当前系统内存使用率高的话，文件优先存储进硬盘。</p><ul><li><code>Push Cache</code><br><code>Push Cache</code>（推送缓存）是 <code>HTTP/2</code> 中的内容，当以上三种缓存都没有命中时，它才会被使用。<strong>它只在会话（<code>Session</code>）中存在，一旦会话结束就被释放，并且缓存时间也很短暂</strong>，在Chrome浏览器中只有5分钟左右，同时它也并非严格执行<code>HTTP</code>头中的缓存指令。</li></ul><p>如果以上<strong>四种缓存都没有命中</strong>的话，那么只能发起请求来获取资源了。为了性能上的考虑，大部分的接口都应该选择好缓存策略，通常<strong>浏览器缓存策略</strong>分为两种：<strong>强缓存和协商缓存</strong>，并且<strong>缓存策略都是通过设置<code>HTTP Header</code>来实现的</strong>。</p><h2 id="缓存过程分析" tabindex="-1"><a class="header-anchor" href="#缓存过程分析"><span><strong>缓存过程分析</strong></span></a></h2><p>浏览器与服务器通信的方式为应答模式，即是：浏览器发起<code>HTTP</code>请求 – 服务器响应该请求，<strong>那么浏览器怎么确定一个资源该不该缓存，如何去缓存呢</strong>？浏览器第一次向服务器发起该请求后拿到请求结果后，将请求结果和缓存标识存入浏览器缓存，<strong>浏览器对于缓存的处理是根据第一次请求资源时返回的响应头来确定的</strong>。具体过程如下图：</p><figure><img src="'+s+'" alt="image-20220627101135766" tabindex="0" loading="lazy"><figcaption>image-20220627101135766</figcaption></figure><p>由上图我们可以知道：</p><ul><li>浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识</li><li>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中<br> 根据<strong>是否需要向服务器重新发起<code>HTTP</code>请求</strong>，将缓存过程分为两个部分，分别是<strong>强缓存</strong>和<strong>协商缓存</strong>。</li></ul><h2 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存"><span><strong>强缓存</strong></span></a></h2><p><strong>不会向服务器发送请求，直接从缓存中读取资源</strong>，在chrome控制台的<code>Network</code>选项中可以看到该请求返回<code>200</code>的状态码，并且<code>Size</code>显示<code>from disk cache</code>或<code>from memory cache</code>。强缓存可以通过设置两种 <code>HTTP Header</code> 实现：<code>Expires</code> 和 <code>Cache-Control</code>。</p><ul><li><strong><code>Expires</code></strong><br> 指的是缓存过期时间，用来指定资源到期的时间，是服务器端具体的时间点。也就是说，<code>Expires = max-age + 请求时间</code>，需要和<code>Last-modified</code>结合使用。</li></ul><p><strong><code>Expires</code>是<code>HTTP/1</code>的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效</strong>。</p><ul><li><strong><code>Cache-Control</code></strong><br> 在<code>HTTP/1.1</code>中，<code>Cache-Control</code>是最重要的规则，主要用于控制网页缓存。</li></ul><p><code>Cache-Control</code>可以在请求头或者响应头中设置，并且可以组合使用多种指令：</p><figure><img src="'+g+'" alt="image-20220627101147985" tabindex="0" loading="lazy"><figcaption>image-20220627101147985</figcaption></figure><ul><li><strong>public</strong>：<strong>所有内容都将被缓存（客户端和代理服务器都可缓存）</strong>。具体来说响应可被任何中间节点缓存，如 Browser &lt;-- proxy1 &lt;-- proxy2 &lt;-- Server，中间的proxy可以缓存资源，比如下次再请求同一资源proxy1直接把自己缓存的东西给 Browser 而不再向proxy2要。</li><li><strong>private</strong>：<strong>所有内容只有客户端可以缓存</strong>，<code>Cache-Control</code>的默认取值。具体来说，表示中间节点不允许缓存，对于Browser &lt;-- proxy1 &lt;-- proxy2 &lt;-- Server，proxy 会老老实实把Server 返回的数据发送给proxy1,自己不缓存任何数据。当下次Browser再次请求时proxy会做好请求转发而不是自作主张给自己缓存的数据。</li><li><strong>no-cache</strong>：客户端缓存内容，是否使用缓存则需要经过协商缓存来验证决定。表示不使用 <code>Cache-Control</code>的缓存控制方式做前置验证，而是使用 <code>Etag</code> 或者<code>Last-Modified</code>字段来控制缓存。<strong>需要注意的是，<code>no-cache</code>这个名字有一点误导。设置了<code>no-cache</code>之后，并不是说浏览器就不再缓存数据，只是浏览器在使用缓存数据时，需要先确认一下数据是否还跟服务器保持一致。</strong></li><li><strong>no-store</strong>：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存</li><li><strong>max-age</strong>：<code>max-age=xxx</code> (xxx is numeric)表示缓存内容将在xxx秒后失效</li><li><strong>s-maxage</strong>（单位为s)：同<code>max-age</code>作用一样，只在代理服务器中生效（比如<code>CDN</code>缓存）。比如当s-maxage=60时，在这60秒中，即使更新了<code>CDN</code>的内容，浏览器也不会进行请求。<code>max-age</code>用于普通缓存，而<code>s-maxage</code>用于代理缓存。<strong><code>s-maxage</code>的优先级高于<code>max-age</code></strong>。如果存在<code>s-maxage</code>，则会覆盖掉max-age和<code>Expires header</code>。</li><li><strong>max-stale</strong>：能容忍的最大过期时间。<code>max-stale</code>指令标示了客户端愿意接收一个已经过期了的响应。如果指定了<code>max-stale</code>的值，则最大容忍时间为对应的秒数。如果没有指定，那么说明浏览器愿意接收任何<code>age</code>的响应（<code>age</code>表示响应由源站生成或确认的时间与当前时间的差值）。</li><li><strong>min-fresh</strong>：能够容忍的最小新鲜度。<code>min-fresh</code>标示了客户端不愿意接受新鲜度不多于当前的<code>age</code>加上<code>min-fresh</code>设定的时间之和的响应。</li></ul><p><code>Expires</code>和<code>Cache-Control</code>对比，区别就在于 <code>Expires</code> 是http1.0的产物，<code>Cache-Control</code>是http1.1的产物，<strong>两者同时存在的话，<code>Cache-Control</code>优先级高于<code>Expires</code>。</strong></p><p>强缓存判断是否缓存的依据来自于是否超出某个时间或者某个时间段，而<strong>不关心服务器端文件是否已经更新</strong>，这可能会导致加载文件不是服务器端最新的内容，<strong>我们如果要获知服务器端内容是否已经发生了更新，<strong>此时我们需要用到</strong>协商缓存策略</strong>。</p><h2 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存"><span><strong>协商缓存</strong></span></a></h2><p>协商缓存就是<strong>强缓存失效</strong>后，浏览器携带<strong>缓存标识</strong>向服务器发起请求，由服务器来根据缓存标识决定是否使用缓存的过程，主要分成两种情况：</p><ul><li><p>协商缓存生效，返回<code>304</code>和<code>Not Modified</code></p><figure><img src="'+l+'" alt="image-20220627101229595" tabindex="0" loading="lazy"><figcaption>image-20220627101229595</figcaption></figure></li><li><p>协商缓存失效，返回<code>200</code>和请求结果</p><figure><img src="'+p+'" alt="image-20220627101238686" tabindex="0" loading="lazy"><figcaption>image-20220627101238686</figcaption></figure></li></ul><p>协商缓存可以通过设置两种 <code>HTTP Header</code> 实现：</p><ul><li><strong><code>Last-Modified</code> 和 <code>If-Modified-Since</code></strong><br> 浏览器在第一次访问资源时，服务器返回资源的同时，在<code>response header</code>中添加 <code>Last-Modified</code>的<code>header</code>，值是这个资源在服务器上的最后修改时间，浏览器接收后缓存文件和<code>header</code>；浏览器下一次请求这个资源，浏览器检测到 <code>Last-Modified</code>这个 <code>header</code>，于是添加 <code>If-Modified-Since</code> 这个 <code>header</code>，值就是 <code>Last-Modified</code> 中的值；服务器再次收到这个资源请求，会<strong>根据 <code>If-Modified-Since</code> 中的值与服务器中这个资源的最后修改时间对比</strong>。如果没有发生变化，返回<code>304</code>和空响应体，提示浏览器直接从缓存读取；如果<code>If-Modified-Since</code>的时间小于服务器中这个资源的最后修改时间，说明文件有更新，于是返回新的资源文件和<code>200</code>。</li></ul><figure><img src="'+h+'" alt="image-20220627101248580" tabindex="0" loading="lazy"><figcaption>image-20220627101248580</figcaption></figure><p>但是 <code>Last-Modified</code> <strong>存在一些弊端</strong>：</p><ul><li>如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 <code>Last-Modified</code> 被修改，服务端不能命中缓存导致发送相同的资源</li><li>因为 <code>Last-Modified</code> <strong>只能以秒计时</strong>，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源</li><li><strong><code>ETag</code>和<code>If-None-Match</code></strong><br><strong><code>Etag</code>是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，只要资源有变化，<code>Etag</code>就会重新生成</strong>。浏览器在下一次加载资源向服务器发送请求时，会将上一次返回的<code>Etag</code>值放到<code>request header</code>里的<code>If-None-Match</code>里，服务器只需要比较客户端传来的<code>If-None-Match</code>跟自己服务器上该资源的<code>ETag</code>是否一致，就能很好地判断资源相对客户端而言是否被修改过了。如果服务器发现<code>ETag</code>匹配不上，那么直接以常规<code>GET 200</code>回包形式将新的资源（当然也包括了新的<code>ETag</code>）发给客户端；如果<code>ETag</code>是一致的，则直接返回<code>304</code>知会客户端直接使用本地缓存即可。</li></ul><figure><img src="'+m+'" alt="image-20220627101258268" tabindex="0" loading="lazy"><figcaption>image-20220627101258268</figcaption></figure><p>两者之间对比：</p><ul><li>在精确度上，<code>ETag</code>要优于<code>Last-Modified</code></li><li>在性能上，<code>ETag</code>要逊于<code>Last-Modified</code>。因为<code>Last-Modified</code>只需要记录时间，而<code>ETag</code>需要服务器通过算法来计算出一个<code>hash</code>值</li><li>在优先级上，服务器校验优先考虑<code>Etag</code></li></ul><h2 id="缓存机制" tabindex="-1"><a class="header-anchor" href="#缓存机制"><span><strong>缓存机制</strong></span></a></h2><p>强缓存优先于协商缓存进行，若强制缓存生效则直接使用缓存，若不生效则进行协商缓存，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回<code>200</code>，重新返回资源和缓存标识，再存入到浏览器缓存中；生效则返回<code>304</code>，继续使用缓存。具体流程图如下：</p><figure><img src="'+f+'" alt="image-20220627101307561" tabindex="0" loading="lazy"><figcaption>image-20220627101307561</figcaption></figure><p>如果<strong>什么缓存策略都没设置</strong>，浏览器会采用一个启发性的算法，通常会<strong>取响应头中的Date减去Last-Modified值得10%作为缓存时间</strong>。</p>',44);function S(C,b){const o=r("ExternalLinkIcon");return t(),d("div",null,[e("p",null,[e("a",x,[a("简书文章链接"),i(o)])]),T])}const y=c(u,[["render",S],["__file","browser-cache.html.vue"]]),_=JSON.parse('{"path":"/HTML/browser-cache.html","title":"浏览器的缓存机制","lang":"zh-CN","frontmatter":{"title":"浏览器的缓存机制","date":"2020-08-10T02:49:39.000Z","category":["浏览器"],"tag":["浏览器","缓存","性能优化"],"description":"简书文章链接 缓存位置 Service Worker Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。 使用 Service Worker 的话，传输协议必须为**HTTPS。因为 Service Worker 中涉及到请求拦截**，所以必须使用 HTTPS 协议来保障安全。 Service Worker 的缓存与...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/HTML/browser-cache.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"浏览器的缓存机制"}],["meta",{"property":"og:description","content":"简书文章链接 缓存位置 Service Worker Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。 使用 Service Worker 的话，传输协议必须为**HTTPS。因为 Service Worker 中涉及到请求拦截**，所以必须使用 HTTPS 协议来保障安全。 Service Worker 的缓存与..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-18T04:29:56.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"浏览器"}],["meta",{"property":"article:tag","content":"缓存"}],["meta",{"property":"article:tag","content":"性能优化"}],["meta",{"property":"article:published_time","content":"2020-08-10T02:49:39.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-18T04:29:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器的缓存机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-08-10T02:49:39.000Z\\",\\"dateModified\\":\\"2023-03-18T04:29:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"缓存位置","slug":"缓存位置","link":"#缓存位置","children":[]},{"level":2,"title":"缓存过程分析","slug":"缓存过程分析","link":"#缓存过程分析","children":[]},{"level":2,"title":"强缓存","slug":"强缓存","link":"#强缓存","children":[]},{"level":2,"title":"协商缓存","slug":"协商缓存","link":"#协商缓存","children":[]},{"level":2,"title":"缓存机制","slug":"缓存机制","link":"#缓存机制","children":[]}],"git":{"createdTime":1679071923000,"updatedTime":1679113796000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":2}]},"readingTime":{"minutes":10.29,"words":3086},"filePathRelative":"HTML/browser-cache.md","localizedDate":"2020年8月10日","excerpt":"<p><a href=\\"https://www.jianshu.com/p/54cc04190252\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">简书文章链接</a></p>\\n<h2><strong>缓存位置</strong></h2>\\n<ul>\\n<li><code>Service Worker</code><br>\\n<code>Service Worker</code> 是<strong>运行在浏览器背后的独立线程</strong>，一般可以用来实现缓存功能。</li>\\n</ul>\\n<p>使用 <code>Service Worker</code> 的话，传输协议必须为**<code>HTTPS</code><strong>。因为 <code>Service Worker</code> 中涉及到</strong>请求拦截**，所以必须使用 <code>HTTPS</code> 协议来保障安全。</p>","autoDesc":true}');export{y as comp,_ as data};
