import{_ as e,c as t,i as a,o as s}from"./app-BN3TCIWe.js";const l="/CrabSAMA-Blog/assets/image-20250606190520031-DP4nWip2.png",r={};function n(o,i){return s(),t("div",null,i[0]||(i[0]=[a(`<p>阮一峰 CSS Grid 网格布局教程</p><p><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener noreferrer">https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></p><h2 id="为什么使用-grid-布局" tabindex="-1"><a class="header-anchor" href="#为什么使用-grid-布局"><span>为什么使用 grid 布局？</span></a></h2><p>因为看到需要实现 n 行 n 列的效果，自然就会想到使用 grid 布局。</p><hr><p>grid 布局默认的放置方式是<strong>先行后列</strong>，如果要想<strong>先列后行</strong>，可以使用 <code>grid-auto-flow: column</code> 这个属性来实现。</p><hr><p>grid 布局的核心都是通过 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 来定义行列格</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">display: grid;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">width: 100%;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">column-gap</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 50px;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">grid-template-columns</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: repeat(5</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 20%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="这样的-column-gap-样式会导致里面的内容大于实际父容器的宽度-要怎么解决" tabindex="-1"><a class="header-anchor" href="#这样的-column-gap-样式会导致里面的内容大于实际父容器的宽度-要怎么解决"><span>这样的 <code>column-gap</code> 样式会导致里面的内容大于实际父容器的宽度，要怎么解决？</span></a></h2><p>问题原因：计算宽度时，总宽度 = 5 列宽度之和 + 4 个间隙宽度，因此比 100% 长，就会出现滚动条。</p><p>两个问题：</p><p>我们一般针对这种固定距离的可以不去设置 20%，可以使用 fr 单位代替百分比，改成 <code>grid-template-columns: repeat(5, 1fr);</code>，使用 fr 单位会自动扣除间隙的宽度。</p><p>另外有些时候，内容有可能会超过预想的大小，默认情况下使用 fr 做单位的单元格宽度被设定为 auto，如果某个单元格过长会撑开影响布局。这个使用我们就要使用 <code>grid-template-columns: repeat(5, minmax(0, 1fr));</code>。这个代码的效果是：<strong>创建 5 个列，每个列可以在 0 到平均分配的空间之间伸缩</strong>。</p><p>通过<code>minmax(0, 1fr)</code>实现了三种重要的行为：</p><ol><li><strong>重置最小宽度为 0</strong>： <ul><li>覆盖默认的<code>auto</code>行为</li><li>允许列宽被压缩到 0 像素（在极端情况下）</li></ul></li><li><strong>强制列在容器内布局</strong>： <ul><li>即使有非常长的内容（如 URL），列也会被限制在容器内</li><li>内容会溢出但不会破坏布局结构</li></ul></li><li><strong>保持空间分配的公平性</strong>： <ul><li>当容器空间不足时，所有列按比例收缩</li><li>没有内容的长列不会被特殊对待</li></ul></li></ol><p>这个技巧是 CSS Grid 布局中的最佳实践之一。</p><hr><h2 id="auto-fill-和-auto-fit-的区别是" tabindex="-1"><a class="header-anchor" href="#auto-fill-和-auto-fit-的区别是"><span><code>auto-fill</code> 和 <code>auto-fit</code> 的区别是？</span></a></h2><p>在还有剩余空间的时候，<code>auto-fill</code> 会创建单元格来填充，而不会扩宽原来的单元格，而 <code>auto-fit</code> 会扩宽原来的单元格填满剩余空间。</p><figure><img src="`+l+'" alt="image-20250606190520031" tabindex="0" loading="lazy"><figcaption>image-20250606190520031</figcaption></figure><p><a href="https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/" target="_blank" rel="noopener noreferrer">https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/</a> 这篇文章详细对比了二者的区别。</p><hr><h2 id="grid-布局的实用技巧和最佳实践-by-deepseek" tabindex="-1"><a class="header-anchor" href="#grid-布局的实用技巧和最佳实践-by-deepseek"><span>Grid 布局的实用技巧和最佳实践 By deepseek</span></a></h2><h3 id="自适应网格列-auto-fit-minmax" tabindex="-1"><a class="header-anchor" href="#自适应网格列-auto-fit-minmax"><span>自适应网格列 (auto-fit/minmax)</span></a></h3><p>使用 <code>auto-fit</code> 或 <code>auto-fill</code> 配合 <code>minmax()</code> 函数创建真正自适应的网格布局：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>auto-fit</strong>: 尽可能多地创建列，并拉伸以填满可用空间</li><li><strong>auto-fill</strong>: 尽可能多地创建列，但会保留空白轨道</li><li><strong>minmax()</strong>: 设置列的最小和最大宽度</li></ul><h3 id="灵活的间距控制" tabindex="-1"><a class="header-anchor" href="#灵活的间距控制"><span>灵活的间距控制</span></a></h3><p>使用 <code>gap</code> 属性和 <code>minmax()</code> 创建响应式间距：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>gap: minmax(10px, 2vw);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>提供最小间距保证</li><li>间距会随视口宽度缩放</li></ul><h3 id="解决内容溢出问题" tabindex="-1"><a class="header-anchor" href="#解决内容溢出问题"><span>解决内容溢出问题</span></a></h3><p>使用 <code>minmax(0, 1fr)</code> 防止内容溢出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>grid-template-columns: repeat(3, minmax(0, 1fr));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将最小宽度设置为 0 可以防止内容强制列宽大于预期</p>',36)]))}const p=e(r,[["render",n],["__file","css-grid-layout.html.vue"]]),c=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/css-grid-layout.html","title":"Grid 布局实践与问题","lang":"zh-CN","frontmatter":{"title":"Grid 布局实践与问题","date":"2025-06-06T12:32:32.000Z","category":["学习笔记"],"tag":["CSS"],"description":"阮一峰 CSS Grid 网格布局教程 https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html 为什么使用 grid 布局？ 因为看到需要实现 n 行 n 列的效果，自然就会想到使用 grid 布局。 grid 布局默认的放置方式是先行后列，如果要想先列后行，可以使用 grid...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/css-grid-layout.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"Grid 布局实践与问题"}],["meta",{"property":"og:description","content":"阮一峰 CSS Grid 网格布局教程 https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html 为什么使用 grid 布局？ 因为看到需要实现 n 行 n 列的效果，自然就会想到使用 grid 布局。 grid 布局默认的放置方式是先行后列，如果要想先列后行，可以使用 grid..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T12:52:41.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"CSS"}],["meta",{"property":"article:published_time","content":"2025-06-06T12:32:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T12:52:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Grid 布局实践与问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-06T12:32:32.000Z\\",\\"dateModified\\":\\"2025-06-06T12:52:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"为什么使用 grid 布局？","slug":"为什么使用-grid-布局","link":"#为什么使用-grid-布局","children":[]},{"level":2,"title":"这样的 column-gap 样式会导致里面的内容大于实际父容器的宽度，要怎么解决？","slug":"这样的-column-gap-样式会导致里面的内容大于实际父容器的宽度-要怎么解决","link":"#这样的-column-gap-样式会导致里面的内容大于实际父容器的宽度-要怎么解决","children":[]},{"level":2,"title":"auto-fill 和 auto-fit 的区别是？","slug":"auto-fill-和-auto-fit-的区别是","link":"#auto-fill-和-auto-fit-的区别是","children":[]},{"level":2,"title":"Grid 布局的实用技巧和最佳实践 By deepseek","slug":"grid-布局的实用技巧和最佳实践-by-deepseek","link":"#grid-布局的实用技巧和最佳实践-by-deepseek","children":[{"level":3,"title":"自适应网格列 (auto-fit/minmax)","slug":"自适应网格列-auto-fit-minmax","link":"#自适应网格列-auto-fit-minmax","children":[]},{"level":3,"title":"灵活的间距控制","slug":"灵活的间距控制","link":"#灵活的间距控制","children":[]},{"level":3,"title":"解决内容溢出问题","slug":"解决内容溢出问题","link":"#解决内容溢出问题","children":[]}]}],"git":{"createdTime":1749213870000,"updatedTime":1749214361000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":2}]},"readingTime":{"minutes":2.74,"words":821},"filePathRelative":"学习笔记/css-grid-layout.md","localizedDate":"2025年6月6日","excerpt":"<p>阮一峰 CSS Grid 网格布局教程</p>\\n<p><a href=\\"https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></p>\\n<h2>为什么使用 grid 布局？</h2>\\n<p>因为看到需要实现 n 行 n 列的效果，自然就会想到使用 grid 布局。</p>\\n<hr>\\n<p>grid 布局默认的放置方式是<strong>先行后列</strong>，如果要想<strong>先列后行</strong>，可以使用 <code>grid-auto-flow: column</code> 这个属性来实现。</p>","autoDesc":true}');export{p as comp,c as data};
