import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as i,c as p,a as e,b as n,d as s,e as t}from"./app-CzTMLA3i.js";const l="/CrabSAMA-Blog/assets/image-20220614202420009-DhLT60QY.png",c={},d=e("strong",null,"官方文档：",-1),u={href:"http://nodejs.cn/api/url.html",target:"_blank",rel:"noopener noreferrer"},m=t('<p>完整的<code>URL</code>的各组成部分：</p><figure><img src="'+l+`" alt="image-20220614202420009" tabindex="0" loading="lazy"><figcaption>image-20220614202420009</figcaption></figure><h2 id="parse方法" tabindex="-1"><a class="header-anchor" href="#parse方法"><span>parse方法</span></a></h2><p>我们可以使用<code>.parse</code>方法来将一个<code>URL</code>字符串转换为<code>URL</code>对象，示例如下。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&#39;</span><span class="token punctuation">)</span>
<span class="token comment">/* =&gt;
{ protocol: &#39;http:&#39;,
  auth: &#39;user:pass&#39;,
  host: &#39;host.com:8080&#39;,
  port: &#39;8080&#39;,
  hostname: &#39;host.com&#39;,
  hash: &#39;#hash&#39;,
  search: &#39;?query=string&#39;,
  query: &#39;query=string&#39;,
  pathname: &#39;/p/a/t/h&#39;,
  path: &#39;/p/a/t/h?query=string&#39;,
  href: &#39;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&#39; }
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),h=e("code",null,".parse",-1),v=e("br",null,null,-1),g=e("code",null,"true",-1),b=e("code",null,"URL",-1),_=e("code",null,"query",-1),k=e("code",null,"querystring",-1),f=e("br",null,null,-1),y=e("code",null,"true",-1),L={href:"http://xn--www-uc0ep96b.example.com/foo/bar%E3%80%82",target:"_blank",rel:"noopener noreferrer"},R=t(`<h2 id="format方法" tabindex="-1"><a class="header-anchor" href="#format方法"><span>format方法</span></a></h2><p><code>format</code>方法允许将一个<code>URL</code>对象转换为<code>URL</code>字符串，示例如下。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>url<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">protocol</span><span class="token operator">:</span> <span class="token string">&#39;http:&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;www.example.com&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">&#39;/p/a/t/h&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">search</span><span class="token operator">:</span> <span class="token string">&#39;query=string&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* =&gt;
&#39;http://www.example.com/p/a/t/h?query=string&#39;
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="resolve方法" tabindex="-1"><a class="header-anchor" href="#resolve方法"><span>resolve方法</span></a></h2><p><code>.resolve</code>方法可以用于拼接<code>URL</code>，示例如下。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>url<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.example.com/foo/bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../baz&#39;</span><span class="token punctuation">)</span>
<span class="token comment">/* =&gt;
http://www.example.com/baz
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function U(j,x){const a=r("ExternalLinkIcon");return i(),p("div",null,[e("p",null,[d,e("a",u,[n("http://nodejs.cn/api/url.html"),s(a)])]),m,e("p",null,[h,n("方法还支持第二个和第三个布尔类型可选参数。"),v,n(" 第二个参数等于"),g,n("时，该方法返回的"),b,n("对象中，"),_,n("字段不再是一个字符串，而是一个经过"),k,n("模块转换后的参数对象。"),f,n(" 第三个参数等于"),y,n("时，该方法可以正确解析不带协议头的URL，"),e("a",L,[n("例如www.example.com/foo/bar。"),s(a)])]),R])}const q=o(c,[["render",U],["__file","URL.html.vue"]]),C=JSON.parse('{"path":"/Node.js/URL.html","title":"URL","lang":"zh-CN","frontmatter":{"title":"URL","date":"2020-07-09T07:01:49.000Z","category":["node.js"],"tag":["node.js"],"description":"官方文档：http://nodejs.cn/api/url.html 完整的URL的各组成部分： image-20220614202420009image-20220614202420009 parse方法 我们可以使用.parse方法来将一个URL字符串转换为URL对象，示例如下。 .parse方法还支持第二个和第三个布尔类型可选参数。 第二个参数等...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/Node.js/URL.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"URL"}],["meta",{"property":"og:description","content":"官方文档：http://nodejs.cn/api/url.html 完整的URL的各组成部分： image-20220614202420009image-20220614202420009 parse方法 我们可以使用.parse方法来将一个URL字符串转换为URL对象，示例如下。 .parse方法还支持第二个和第三个布尔类型可选参数。 第二个参数等..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-18T04:29:56.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"node.js"}],["meta",{"property":"article:published_time","content":"2020-07-09T07:01:49.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-18T04:29:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"URL\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-07-09T07:01:49.000Z\\",\\"dateModified\\":\\"2023-03-18T04:29:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"parse方法","slug":"parse方法","link":"#parse方法","children":[]},{"level":2,"title":"format方法","slug":"format方法","link":"#format方法","children":[]},{"level":2,"title":"resolve方法","slug":"resolve方法","link":"#resolve方法","children":[]}],"git":{"createdTime":1679071923000,"updatedTime":1679113796000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":2}]},"readingTime":{"minutes":0.91,"words":273},"filePathRelative":"Node.js/URL.md","localizedDate":"2020年7月9日","excerpt":"<p><strong>官方文档：</strong><a href=\\"http://nodejs.cn/api/url.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">http://nodejs.cn/api/url.html</a></p>\\n<p>完整的<code>URL</code>的各组成部分：</p>\\n<figure><figcaption>image-20220614202420009</figcaption></figure>\\n<h2>parse方法</h2>\\n<p>我们可以使用<code>.parse</code>方法来将一个<code>URL</code>字符串转换为<code>URL</code>对象，示例如下。</p>","autoDesc":true}');export{q as comp,C as data};
