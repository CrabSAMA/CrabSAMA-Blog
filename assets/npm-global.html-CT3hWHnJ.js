import{_ as i,c as a,i as n,o as e}from"./app-5IOFPByO.js";const l={};function t(p,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="npm-包全局安装" tabindex="-1"><a class="header-anchor" href="#npm-包全局安装"><span>NPM 包全局安装</span></a></h1><h2 id="npm" tabindex="-1"><a class="header-anchor" href="#npm"><span>NPM</span></a></h2><p><code>npm install -g</code> 只做了一个事情：复制 bin 下面的文件到 xx 目录，因此需要自己配置运行环境或者提供可执行文件</p><p><a href="https://docs.npmjs.com/cli/v10/commands/npm-install#global" target="_blank" rel="noopener noreferrer">npm install -g 文档</a></p><p>因此网上的教程一般让我们加上：<code>#!/usr/bin/env node</code> ，这样我们在 shell 中直接运行这个文件的时候，会告诉 shell 使用 node 作为运行环境帮我们运行这个文件的内容。</p><p><a href="https://nodejs.org/en/learn/command-line/run-nodejs-scripts-from-the-command-line" target="_blank" rel="noopener noreferrer">https://nodejs.org/en/learn/command-line/run-nodejs-scripts-from-the-command-line</a></p><h2 id="yarn" tabindex="-1"><a class="header-anchor" href="#yarn"><span>yarn</span></a></h2><p><code>yarn global</code> 已经在最新版本中被删除，官方的说法是：Yarn 专注于<em>项目管理</em>，管理系统范围的包被认为超出了我们的范围。</p><p>在 yarn 中我们需要使用 <code>yarn dlx</code> 直接运行 cli，它预期的行为是直接运行二进制脚本，因此它也需要我们在 js 文件前面加上环境注释，否则 js 文件无法被当做二进制文件直接运行。</p><h2 id="pnpm" tabindex="-1"><a class="header-anchor" href="#pnpm"><span>pnpm</span></a></h2><p><code>pnpm global add</code> 行为不太一样，它帮忙封装了一个可执行 shell 脚本，帮我们将 bin 中的 js 文件封装起来了：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">basedir</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dirname</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;$(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">$0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sed</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;s,\\\\,/,g&#39;)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">case</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uname</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    *</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">CYGWIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">basedir</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\`cygpath -w &quot;$basedir&quot;\`;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">esac</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-z</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$NODE_PATH</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> NODE_PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/Users/crab.huang/Library/pnpm/global/5/.pnpm/commit-and-tag-version@12.4.4/node_modules/commit-and-tag-version/bin/node_modules:/Users/crab.huang/Library/pnpm/global/5/.pnpm/commit-and-tag-version@12.4.4/node_modules/commit-and-tag-version/node_modules:/Users/crab.huang/Library/pnpm/global/5/.pnpm/commit-and-tag-version@12.4.4/node_modules:/Users/crab.huang/Library/pnpm/global/5/.pnpm/node_modules&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> NODE_PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/Users/crab.huang/Library/pnpm/global/5/.pnpm/commit-and-tag-version@12.4.4/node_modules/commit-and-tag-version/bin/node_modules:/Users/crab.huang/Library/pnpm/global/5/.pnpm/commit-and-tag-version@12.4.4/node_modules/commit-and-tag-version/node_modules:/Users/crab.huang/Library/pnpm/global/5/.pnpm/commit-and-tag-version@12.4.4/node_modules:/Users/crab.huang/Library/pnpm/global/5/.pnpm/node_modules:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$NODE_PATH</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fi</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-x</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$basedir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/node&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$basedir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/node&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$basedir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/global/5/node_modules/commit-and-tag-version/bin/cli.js&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">$@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  exec</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$basedir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/global/5/node_modules/commit-and-tag-version/bin/cli.js&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">$@</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看不懂上面的代码没关系，简单来说就是帮我们整理了 node 的 path，让 shell 能自动地找到 node 运行环境，然后拿到对应的目录，使用 node 作为运行环境执行源代码。</p><p>pnpm 更为智能化地帮我们做了一层包装，因此我们可以不在 js 文件的头部加入那一行运行环境注释，也可以正常运行。</p>`,14)]))}const r=i(l,[["render",t]]),d=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/npm-global.html","title":"NPM 包全局安装","lang":"zh-CN","frontmatter":{"title":"NPM 包全局安装","date":"2024-10-29T10:01:28.000Z","category":["学习笔记"],"tag":["Node.js","npm"],"description":"NPM 包全局安装 NPM npm install -g 只做了一个事情：复制 bin 下面的文件到 xx 目录，因此需要自己配置运行环境或者提供可执行文件 npm install -g 文档 因此网上的教程一般让我们加上：#!/usr/bin/env node ，这样我们在 shell 中直接运行这个文件的时候，会告诉 shell 使用 node 作...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NPM 包全局安装\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-29T10:01:28.000Z\\",\\"dateModified\\":\\"2024-10-29T10:05:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"],["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/npm-global.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"NPM 包全局安装"}],["meta",{"property":"og:description","content":"NPM 包全局安装 NPM npm install -g 只做了一个事情：复制 bin 下面的文件到 xx 目录，因此需要自己配置运行环境或者提供可执行文件 npm install -g 文档 因此网上的教程一般让我们加上：#!/usr/bin/env node ，这样我们在 shell 中直接运行这个文件的时候，会告诉 shell 使用 node 作..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-29T10:05:03.000Z"}],["meta",{"property":"article:tag","content":"npm"}],["meta",{"property":"article:tag","content":"Node.js"}],["meta",{"property":"article:published_time","content":"2024-10-29T10:01:28.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-29T10:05:03.000Z"}]]},"git":{"createdTime":1730196303000,"updatedTime":1730196303000,"contributors":[{"name":"CrabSAMA","username":"CrabSAMA","email":"71915282@qq.com","commits":1,"url":"https://github.com/CrabSAMA"}]},"readingTime":{"minutes":1.69,"words":507},"filePathRelative":"学习笔记/npm-global.md","excerpt":"\\n<h2>NPM</h2>\\n<p><code>npm install -g</code> 只做了一个事情：复制 bin 下面的文件到 xx 目录，因此需要自己配置运行环境或者提供可执行文件</p>\\n<p><a href=\\"https://docs.npmjs.com/cli/v10/commands/npm-install#global\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">npm install -g 文档</a></p>\\n<p>因此网上的教程一般让我们加上：<code>#!/usr/bin/env node</code> ，这样我们在 shell 中直接运行这个文件的时候，会告诉 shell 使用 node 作为运行环境帮我们运行这个文件的内容。</p>","autoDesc":true}');export{r as comp,d as data};
