import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as t,e as o}from"./app-D1nyDd9a.js";const a={},c=o(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>公司大前端提供的平台里看到了一个功能，在代码中写特定的链接，例如 <code>__REPLACE__</code>，在实际访问时会替换成指定内容，来实现 <code>CDN</code> 的功能。在看到这个功能后，对它具体是怎么实现的比较好奇，因此看看具体是怎么操作的。</p><h2 id="实操" tabindex="-1"><a class="header-anchor" href="#实操"><span>实操</span></a></h2><p><code>nginx</code> 提供了 <code>sub_filter</code> 模块来实现重写 content 的功能。</p><p>我们需要找到 <code>nginx</code> 的安装目录，进入其 <code>conf</code> 文件夹，打开 <code>nginx.conf</code> 配置文件。</p><p>找到 <code>location / { … }</code> 这一行，这里是代理默认请求到 <code>index.html</code> ：</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_set_header</span> Accept-Encoding <span class="token string">&quot;&quot;</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">sub_filter</span> <span class="token string">&#39;__NGINX_REPLACE__&#39;</span> <span class="token string">&#39;Replace Content&#39;</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">sub_filter_types</span> text/html</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">sub_filter_once</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来解释一下具体的配置内容：</p><p><code>sub_filter &#39;__NGINX_REPLACE__&#39; &#39;Replace Content&#39;;</code> —— 这个实际将 <code>index.html</code> 中 <code>__NGINX_REPLACE__</code> 替换成 <code>Replace Content</code> 。</p><p>注意只有在新版本 <code>nginx</code> 中才支持多 <code>sub_filter</code>。</p><p><code>sub_filter_types *;</code> -- 只对 <code>text/html</code> 响应类型做<code>sub_filter</code> 指定的替换。</p><p><code>sub_filter_once off;</code> -- <code>sub_filter</code> 会执行<strong>多次</strong>而不是一次. 效果类似于 <code>java</code> 中的 <code>string.replaceAll</code> 而不是 <code>replace</code>。</p><p><code>proxy_set_header Accept-Encoding &quot;&quot;;</code> -- 设置这个得原因是告诉后端不要进行 <code>gzip</code> 压缩。如果是 <code>gzip</code> 压缩流, 那么我们就没法进行替换了。</p><h2 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶"><span>进阶</span></a></h2><p><code>nginx</code> 有一个增强模块 <code>ngx_http_substitutions_filter_module</code>，可以支持更多高级功能：</p><ol><li>支持多次替换</li><li>支持正则替换</li><li>支持中文替换</li></ol><p>具体使用方法可以直接看文档，此处不多赘述。</p>`,17),s=[c];function i(d,p){return n(),t("div",null,s)}const _=e(a,[["render",i],["__file","nginx-replace.html.vue"]]),u=JSON.parse('{"path":"/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE/nginx-replace.html","title":"使用 nginx 实现内容替换","lang":"zh-CN","frontmatter":{"title":"使用 nginx 实现内容替换","date":"2022-07-28T09:19:53.000Z","category":["实际项目"],"tag":["nginx"],"description":"背景 公司大前端提供的平台里看到了一个功能，在代码中写特定的链接，例如 __REPLACE__，在实际访问时会替换成指定内容，来实现 CDN 的功能。在看到这个功能后，对它具体是怎么实现的比较好奇，因此看看具体是怎么操作的。 实操 nginx 提供了 sub_filter 模块来实现重写 content 的功能。 我们需要找到 nginx 的安装目录，...","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE/nginx-replace.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"使用 nginx 实现内容替换"}],["meta",{"property":"og:description","content":"背景 公司大前端提供的平台里看到了一个功能，在代码中写特定的链接，例如 __REPLACE__，在实际访问时会替换成指定内容，来实现 CDN 的功能。在看到这个功能后，对它具体是怎么实现的比较好奇，因此看看具体是怎么操作的。 实操 nginx 提供了 sub_filter 模块来实现重写 content 的功能。 我们需要找到 nginx 的安装目录，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-18T04:29:56.000Z"}],["meta",{"property":"article:author","content":"CrabSAMA"}],["meta",{"property":"article:tag","content":"nginx"}],["meta",{"property":"article:published_time","content":"2022-07-28T09:19:53.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-18T04:29:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 nginx 实现内容替换\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-28T09:19:53.000Z\\",\\"dateModified\\":\\"2023-03-18T04:29:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CrabSAMA\\",\\"url\\":\\"https://crabsama.github.io/CrabSAMA-Blog\\"}]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"实操","slug":"实操","link":"#实操","children":[]},{"level":2,"title":"进阶","slug":"进阶","link":"#进阶","children":[]}],"git":{"createdTime":1679071923000,"updatedTime":1679113796000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":2}]},"readingTime":{"minutes":1.27,"words":382},"filePathRelative":"实际项目/nginx-replace.md","localizedDate":"2022年7月28日","excerpt":"<h2>背景</h2>\\n<p>公司大前端提供的平台里看到了一个功能，在代码中写特定的链接，例如 <code>__REPLACE__</code>，在实际访问时会替换成指定内容，来实现 <code>CDN</code> 的功能。在看到这个功能后，对它具体是怎么实现的比较好奇，因此看看具体是怎么操作的。</p>\\n<h2>实操</h2>\\n<p><code>nginx</code> 提供了 <code>sub_filter</code> 模块来实现重写 content 的功能。</p>\\n<p>我们需要找到 <code>nginx</code> 的安装目录，进入其 <code>conf</code> 文件夹，打开 <code>nginx.conf</code> 配置文件。</p>","autoDesc":true}');export{_ as comp,u as data};
