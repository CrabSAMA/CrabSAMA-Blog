const e=JSON.parse('{"key":"v-3fdb2a52","path":"/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE/electron-start.html","title":"electron 初体验","lang":"zh-CN","frontmatter":{"title":"electron 初体验","date":"2023-03-20T10:49:55.000Z","category":["实际项目"],"tag":["electron"],"description":"electron 初体验 背景 在搭建基于 vuepress 的博客时，由于框架是基于 markdown 中的 frontmatter 来获取元数据，现在文章数量大，杂糅着不规范的 frontmatter，有些甚至没有写 frontmatter，因此下意识就想写一个可视化的 frontmatter 编辑器。 由于这里面需要文件读写等操作系统权限，使用 web 应用会捉襟见肘，因此第一时间想到的就是使用 electron 来实现，顺便也可以实践一下 electron。 架构模型 主进程 每个 electron 应用都有一个单一的主进程，作为整个应用程序的入口。主进程运行在 node.js 环境中，意味着它具有 require 模块和使用所有 node.js api 的能力。","head":[["meta",{"property":"og:url","content":"https://crabsama.github.io/CrabSAMA-Blog/CrabSAMA-Blog/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE/electron-start.html"}],["meta",{"property":"og:site_name","content":"CrabSAMA · 笔记"}],["meta",{"property":"og:title","content":"electron 初体验"}],["meta",{"property":"og:description","content":"electron 初体验 背景 在搭建基于 vuepress 的博客时，由于框架是基于 markdown 中的 frontmatter 来获取元数据，现在文章数量大，杂糅着不规范的 frontmatter，有些甚至没有写 frontmatter，因此下意识就想写一个可视化的 frontmatter 编辑器。 由于这里面需要文件读写等操作系统权限，使用 web 应用会捉襟见肘，因此第一时间想到的就是使用 electron 来实现，顺便也可以实践一下 electron。 架构模型 主进程 每个 electron 应用都有一个单一的主进程，作为整个应用程序的入口。主进程运行在 node.js 环境中，意味着它具有 require 模块和使用所有 node.js api 的能力。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-20T07:30:32.000Z"}],["meta",{"property":"article:tag","content":"electron"}],["meta",{"property":"article:published_time","content":"2023-03-20T10:49:55.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-20T07:30:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"electron 初体验\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-20T10:49:55.000Z\\",\\"dateModified\\":\\"2023-03-20T07:30:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"架构模型","slug":"架构模型","link":"#架构模型","children":[{"level":3,"title":"主进程","slug":"主进程","link":"#主进程","children":[]},{"level":3,"title":"渲染器进程","slug":"渲染器进程","link":"#渲染器进程","children":[]},{"level":3,"title":"Preload 脚本","slug":"preload-脚本","link":"#preload-脚本","children":[]},{"level":3,"title":"效率进程","slug":"效率进程","link":"#效率进程","children":[]}]},{"level":2,"title":"进程间通信","slug":"进程间通信","link":"#进程间通信","children":[{"level":3,"title":"渲染器进程到主进程（单向）","slug":"渲染器进程到主进程-单向","link":"#渲染器进程到主进程-单向","children":[]},{"level":3,"title":"渲染器进程到主进程（双向）","slug":"渲染器进程到主进程-双向","link":"#渲染器进程到主进程-双向","children":[]},{"level":3,"title":"主进程到渲染器进程","slug":"主进程到渲染器进程","link":"#主进程到渲染器进程","children":[]}]},{"level":2,"title":"经验","slug":"经验","link":"#经验","children":[{"level":3,"title":"vite 在 electron 中的使用","slug":"vite-在-electron-中的使用","link":"#vite-在-electron-中的使用","children":[]},{"level":3,"title":"electron 选择文件/文件夹","slug":"electron-选择文件-文件夹","link":"#electron-选择文件-文件夹","children":[]},{"level":3,"title":"typescript 扩展 window 全局对象","slug":"typescript-扩展-window-全局对象","link":"#typescript-扩展-window-全局对象","children":[]},{"level":3,"title":"electron + pnpm 打包报错","slug":"electron-pnpm-打包报错","link":"#electron-pnpm-打包报错","children":[]},{"level":3,"title":"react 更改数组中某一项","slug":"react-更改数组中某一项","link":"#react-更改数组中某一项","children":[]},{"level":3,"title":"typescript 索引类型","slug":"typescript-索引类型","link":"#typescript-索引类型","children":[]},{"level":3,"title":"文本标签遇到 /n 换行","slug":"文本标签遇到-n-换行","link":"#文本标签遇到-n-换行","children":[]},{"level":3,"title":"Windows 下隐藏菜单栏","slug":"windows-下隐藏菜单栏","link":"#windows-下隐藏菜单栏","children":[]}]}],"git":{"createdTime":1679297432000,"updatedTime":1679297432000,"contributors":[{"name":"CrabSAMA","email":"71915282@qq.com","commits":1}]},"readingTime":{"minutes":3.86,"words":1157},"filePathRelative":"实际项目/electron-start.md","localizedDate":"2023年3月20日","excerpt":"<h1> electron 初体验</h1>\\n<h2> 背景</h2>\\n<p>在搭建基于 vuepress 的博客时，由于框架是基于 markdown 中的 frontmatter 来获取元数据，现在文章数量大，杂糅着不规范的 frontmatter，有些甚至没有写 frontmatter，因此下意识就想写一个可视化的 frontmatter 编辑器。</p>\\n<p>由于这里面需要文件读写等操作系统权限，使用 web 应用会捉襟见肘，因此第一时间想到的就是使用 electron 来实现，顺便也可以实践一下 electron。</p>\\n<h2> 架构模型</h2>\\n<h3> 主进程</h3>\\n<p>每个 electron 应用都有一个单一的主进程，作为整个应用程序的入口。主进程运行在 node.js 环境中，意味着它具有 <code>require</code> 模块和使用所有 node.js api 的能力。</p>","autoDesc":true}');export{e as data};
